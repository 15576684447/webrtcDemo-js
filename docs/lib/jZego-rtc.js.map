{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///./sdk/common/zego.entity.ts","webpack:///./sdk/common/client-util.ts","webpack:///./sdk/common/zego.extern.ts","webpack:///./sdk/common/clientBase/liveHandler.ts","webpack:///./sdk/common/clientBase/messageHandler.ts","webpack:///./sdk/common/clientBase/heartBeatHandler.ts","webpack:///./sdk/common/clientBase/streamHandler.ts","webpack:///./sdk/common/clientBase/stateCenter.ts","webpack:///./sdk/common/clientBase/roomHandler.ts","webpack:///./sdk/common/clientBase/socketCenter.ts","webpack:///./sdk/common/clientBase/common.ts","webpack:///./sdk/common/clientBase/index.ts","webpack:///./sdk/common/ZegoStreamCenter.ts","webpack:///./sdk/webrtc/zego.play.web.ts","webpack:///./sdk/common/zego.signal.ts","webpack:///(webpack)/buildin/global.js","webpack:///./sdk/webrtc/adapter.js","webpack:///./sdk/webrtc/zego.publish.ts","webpack:///./sdk/webrtc/zego.preview.ts","webpack:///./sdk/common/zego.datareport.ts","webpack:///./sdk/webrtc/zego.streamCenter.web.ts","webpack:///./sdk/common/zego.logger.ts","webpack:///./sdk/webrtc/zego.logger.webrtc.ts","webpack:///./sdk/webrtc/zego.client.web.ts"],"names":["root","factory","exports","module","define","amd","a","i","self","this","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ENUM_LOG_LEVEL","ENUM_REMOTE_TYPE","PROTO_VERSION","ListNode","id","data","_id","next","prev","_data","hasNext","hasPrev","LinkedList","start","end","_idCounter","_numNodes","insertBefore","toInsertBefore","newNode","addLast","add","getFirst","getLast","size","getFromFirst","index","count","temp","remove","node","removeFirst","removeLast","removeAll","each","iterator","find","found","result","map","results","push","unshift","pop","shift","sdkErrorList","SUCCESS","code","msg","PARAM","HEARTBEAT_TIMEOUT","LOGIN_TIMEOUT","SEND_MSG_TIMEOUT","RESET_QUEUE","LOGIN_DISCONNECT","KICK_OUT","UNKNOWN","FREQ_LIMITED","ENUM_SIGNAL_STATE","ENUM_RESOLUTION_TYPE","LOW","width","height","frameRate","bitRate","MEDIUM","HIGH","ENUM_RETRY_STATE","didNotStart","retrying","finished","ENUM_PUBLISH_STATE","waitingSessionRsp","waitingOffserRsp","waitingServerAnswer","waitingServerICE","connecting","publishing","stop","ENUM_PLAY_STATE","playing","ENUM_CONNECT_STATE","disconnect","connected","MAX_TRY_CONNECT_COUNT","SEND_MSG_RESET","MAX_TRY_HEARTBEAT_COUNT","ENUM_PUBLISH_STREAM_STATE","waiting_url","tryPublish","update_info","ENUM_STREAM_SUB_CMD","liveNone","liveBegin","liveEnd","liveUpdate","ENUM_STREAM_UPDATE_TYPE","added","deleted","ENUM_RUN_STATE","ENUM_PUBLISH_STATE_UPDATE","error","retry","ENUM_PLAY_STATE_UPDATE","MAX_TRY_LOGIN_COUNT","TRY_LOGIN_INTERVAL","MINIUM_HEARTBEAT_INTERVAL","ENUM_STREAM_UPDATE_CMD","updated","SERVER_ERROR_CODE","MIXSTREAM_ERROR_CODE","QUALITYLEVEL","ENUM_SIGNAL_SUB_CMD","none","joinLiveRequest","joinLiveResult","joinLiveInvite","joinLiveStop","ENUM_PUSH_SIGNAL_SUB_CMD","pushJoinLiveRequest","pushJoinLiveResult","pushJoinLiveInvite","pushJoinLiveStop","ENUM_PLAY_SOURCE_TYPE","auto","ultra","ENUM_DISPATCH_TYPE","cdn","ClientUtil","checkConfigParam","option","logger","appid","server","idName","checkLoginParam","roomid","token","registerCallback","fName","callbackList","sf","ef","success","actionErrorCallback","actionSuccessCallback","getServerError","serverErrorList","1","1001","1002","1003","1004","1005","1006","1007","1008","1009","2002","1000000000","err","isKeepTryLogin","mergeStreamList","oldStreamList","newStreamList","callbackResult","debug","flag","addStreamList","delStreamList","updateStreamList","length","anchor_id_name","j","stream_id","extra_info","k","checkCustomCommandParam","param","generateRandumNumber","maxNum","parseInt","Math","random","isSupportWebrtc","e","window","navigator","isSupportH264","sucCall","errCall","RTCPeerConnection","createOffer","offerToReceiveAudio","offerToReceiveVideo","then","desc","sdp","hasH264","split","some","item","startsWith","indexOf","seq","playErrorList","DISPATCH_ERROR","DISPATCH_TIMEOUT","TOKEN_ERROR","SEND_SESSION_TIMEOUT","CREATE_SESSION_ERROR","CREATE_OFFER_ERROR","SERVER_MEDIA_DESC_TIMEOUT","SET_REMOTE_DESC_ERROR","CREATE_ANSWER_ERROR","SET_LOCAL_DESC_ERROR","SEND_MEDIA_DESC_TIMEOUT","SEND_CANDIDATE_ERROR","SEND_CANDIDATE_TIMEOUT","SERVER_CANDIDATE_TIMEOUT","SERVER_CANDIDATE_ERROR","MEDIA_CONNECTION_FAILED","MEDIA_CONNECTION_CLOSED","SESSION_CLOSED","WEBSOCKET_ERROR","publishErrorList","SERVER_MEDIA_DESC_ERROR","getSeq","zego_entity_1","LiveHandler","stateCenter","socketCenter","requestJoinLive","destIdName","resultCallback","requestId","getRequestId","signalCmd","getSignalCmdContent","undefined","joinLiveCallbackMap","sendSignalCmd","inviteJoinLive","endJoinLive","respondJoinLive","respondResult","dest_id_name","joinLiveRequestMap","info","cmd","signalMsg","isLogin","bodyData","sub_cmd","signal_msg","sendMessage","handlePushSignalMsg","JSON","parse","body","handlePushJoinLiveRequestMsg","handlePushJoinLiveResultMsg","handlePushJoinLiveInviteMsg","handlePushJoinLiveStopMsg","warn","request_id","from_userid","onRecvJoinLiveRequest","from_username","room_id","onRecvInviteJoinLiveRequest","result_callback","onRecvEndJoinLiveCommand","client_util_1","MessageHandler","sendCustomCommand","dstMembers","customContent","_this","customContent_send","nickName","custom_content","custom_msg","stringify","registerRouter","handleSendCustomMsgRsp","sendCustomMessage","sendData","sendDataNode","sendDataMap","header","err_code","sendDataList","handlePushCustomMsg","submsg","custommsg","onRecvCustomCommand","from_idname","sendRoomMsg","msg_category","msg_type","msg_content","timestamp","Date","sendRoomMsgTime","SendRoomMsgInterval","handleSendRoomMsgRsp","msg_id","onRecvRoomMsg","chat_data","server_msg_id","ret_msg_id","sendReliableMessage","type","transSeqMap","trans_type","trans_data","sendBigRoomMessage","category","content","timeWindow","bigimTimeWindow","offset","serverTimeOffset","serverTime","getTime","clientId","cmdSeq","toString","bigImCallbackMap","bigmsg_client_id","sendBigRoomMessageInternal","handleBigImMsgRsp","currentIndex","floor","bigImLastTimeIndex","bigImMessageList","oneData","setBigImTimer","handlePushMergeMsg","messages","handlePushBigRooMsg","msg_body","bodyString","messageBody","roomId","pushData","msg_data","message","id_name","nick_name","messageId","bigmsg_id","time","send_time","onRecvBigRoomMessage","messageList","msgs","bigim_time_window","msgId","residue","interval","bigImTimer","setTimeout","onBigImTimer","serverTimestamp","requestList","splice","callbackInfo","clearTimeout","sendRelayMessage","datiTimeWindow","realyMessageList","setRelayTimer","sendRelayMessageInternal","relay_type","relay_data","relayTimer","onRelayTimer","relayInfo","handlePushTransMsg","trans_seq","trans_user_idname","onRecvReliableMessage","HeartBeatHandler","resetHeartbeat","heartbeatTimer","tryHeartbeatCount","hbLogout","heartbeatInterval","handleHeartbeatRsp","reserve","streamid","hearbeat_interval","dati_time_window","ReliableMessageHandler","fetchStreamList","server_user_seq","userSeq","userStateUpdate","fetchUserList","publishStreamList","state","updateStreamInfo","online_count","onUpdateOnlineCount","trans_seqs","oldSeq","fetchReliableMessage","localSeq","trans_local_seq","handleFetchTransRsp","stream_seq","streamSeq","streamQuerying","handleFetchStreamListRsp","stream_extra_info","userCount","resetCheckMessage","sendDataCheckTimer","checkSendMessageList","sendCommandList","sendCommandMap","head","checkMessageListTimeout","messageMap","checkCount","timeoutMsgCount","dropMsgCount","sendDataTimeout","sendDataDropTimeout","sendDataCheckOnceCount","startCheckMessageTimeout","sendDataCheckInterval","StreamHandler","setCDNInfo","streamInfo","streamItem","onStreamUpdated","streamList","onStreamExtraInfoUpdated","handleStreamStart","lastRunState","handleStreamUpdateRsp","handlePushStreamUpdateMsg","login","handleFullUpdateStream","stream_info","callbackStreamList","makeCallbackStreamList","onPublishStateUpdate","streamId","stream_msg","serverStreamSeq","serverStreamList","stream_cmd","handleAddedStreamList","handleDeletedStreamList","handleUpdatedStreamList","stream_gid","anchor_nick_name","urls_flv","urls_rtmp","urls_hls","updateMixStream","mixStreamConfig","successCallback","errorCallback","outputStreamId","outputUrl","req_body","live_channel","version","userData","mixInput","totalStreamId","testEnvironment","rect","layer","top","left","bottom","right","mixOutput","outputBitrate","outputFps","outputWidth","outputHeight","outputAudioConfig","outputAudioBitrate","outputAudioChannels","outputBgColor","outputBgImage","channel","rspBody","prefix","play","mixPlayInfo","stream_alias","slice","rtmp_url","hls_url","hdl_url","nonExistsStreamId","non_exist_streams","stopMixStream","updateStreamExtraInfo","extraInfo","zego_extern_1","StateCenter","configOK","roomCreateFlag","runState","logout","userQuerying","userTempList","streamUrlMap","cmdCallback","bigIMmessageList","tryLoginCount","tryLoginTimer","to_userid","RoomHandler","setRunState","newRunState","resetTryLogin","resetBigRoomInfo","resetRoom","resetRoomCallBack","sessionid","handleLogoutRsp","closeSocket","userid","setSessionInfo","onDisconnect","loginSuccessCallBack","onGetTotalUserList","userList","role","trylogin","tryLogin","loginBodyData","user_state_flag","room_create_flag","isDisConnect","createSocket","handleLoginRsp","closeHandler","openHandler","handleLoginFail","handleLoginSuccess","user_id","session_id","config_info","setRemoteLogLevel","log_level","log_url","openLogServer","ret_timestamp","parseFloat","responseHandler","setUserStateUpdate","update","fetchUserListWithPage","userIndex","handleFetchUserListRsp","user_index","sort_type","concat","user_baseinfos","ret_user_index","server_user_index","user_list","user_info","handlePushUserStateUpdateMsg","user_actions","user_list_seq","action","Action","IdName","NickName","Role","loginTime","LoginTime","onUserStateUpdate","SocketCenter","responseRouters","push_kickout","handlePushKickout","push_custommsg","push_im_chat","handlePushRoomMsg","push_userlist_update","push_merge_message","trans","handleTransRsp","push_trans","handleBizChannelRspCallback","rsp_body","callBack","getSocket","getHeader","Protocol","cmdData","cmdDataNode","websocket","send","dataBuffer","readyState","onclose","onerror","close","hander","onopen","errorHandler","checkResponse","onmessage","handleSendCommandMsgRsp","handleRelayRspCallback","handleBigImRspCallback","relay_result","Common","onPlayStateUpdateHandle","stopPlayingStream","onPlayStateUpdate","onPublishStateUpdateHandle","streamHandler","streamCenter","WebrtcOnPublishStateUpdateHandle","stopPublishingStream","resetStreamCenter","customUrl","reset","handleFetchWebRtcUrlRsp","ptype","startPublishingStream","urls","startPlayingStream","common_1","socketCenter_1","roomHandler_1","stateCenter_1","streamHandler_1","heartBeatHandler_1","messageHandler_1","liveHandler_1","BaseCenter","_super","bindSocketHandler","bindStreamHandler","bindHeatBeatHandler","bindRoomHandler","bindMessageHandler","bindLiveHandler","bindStreamCenterHandler","__extends","liveHandler","roomHandler","onKickOut","reason","messageHandler","heartBeatHandler","anchor_info","onGetAnchorInfo","onPlayQualityUpdate","streamQuality","onPublishQualityUpdate","onPlayerStreamUrlUpdate","url","onStreamUrlUpdate","onVideoSizeChanged","videoWidth","videoHeight","config","setLogLevel","logLevel","audienceCreateRoom","remoteLogLevel","logUrl","anchor_userid","anchro_username","release","stopLogServer","ZegoStreamCenter","log","ZegoPlayWeb","signal","dataReport","qualityTimeInterval","candidateInfo","waitICETimer","waitingICETimeInterval","waitingOfferTimer","waitingOfferTimeInterval","waitingServerTimer","waitingServerTimerInterval","qualityTimer","playQualityList","maxQualityListCount","lastPlayStats","audioBytesReceived","videoBytesReceived","framesDecoded","framesReceived","framesDropped","reportSeq","videoSizeCallback","qualityUpload","qualityUploadInterval","qualityUploadLastTime","maxRetryCount","currentRetryCount","retryState","closeSessionSignal","newReport","setAudioDestination","audioOutput","remoteVideo","sinkId","setSinkId","catch","startPlay","playOption","sessionSeq","eventStart","createSession","sessionId","eventEndWithMsg","playStateUpdateError","onCreatePlaySessionSuccess","turn_server","stun_server","configuration","iceServers","username","turn_username","credential","turn_auth_key","peerConnection","onicecandidate","onIceCandidate","onsignalingstatechange","onConnectionStateChange","oniceconnectionstatechange","onIceConnectionStateChange","onaddstream","onGotRemoteStream","oncanplay","offerOptions","playType","eventEnd","onCreateOfferSuccess","registerPushCallback","onRecvMediaDesc","onRecvCandidateInfo","onRecvCloseSession","onRecvResetSession","setLocalDescription","onSetLocalDescriptionSuccess","mediaDescription","answerSeq","sendMediaDesc","sendCandidateInfo","addEvent","sendMediaDescAck","offerDescription","toJSON","setRemoteDescription","RTCSessionDescription","sendCandidateInfoAck","infos","ice","sdpMid","sdpMLineIndex","candidate","addIceCandidate","RTCIceCandidate","event","target","signalingState","iceConnectionState","setPlayQualityTimer","checkPlayConnectionFailedState","connectionState","shouldRetryPlay","startRetryPlay","resetPlay","tryStartPlay","clearTryPlayTimer","audioOputput","isServerConnected","clearPlayQualityTimer","clearInterval","srcObject","unregisterPushCallback","setInterval","getStats","getPlayStats","playData","audioFractionLost","audioPacketsLost","videoBitrate","videoFPS","nackCount","pliCount","sliCount","videoFractionLos","audioJitter","videoFractionLost","videoFramesDecoded","frameHeight","frameWidth","videoTransferFPS","videoFramesDropped","totalRoundTripTime","currentRoundTripTime","forEach","bytesReceived","mediaType","jitter","packetsLost","fractionLost","kind","uploadPlayQuality","timeStamp","QualityReport","report","report_interval_ms","sendCloseSessionAck","stream","filter","shouldSendCloseSession","errorCode","sendCloseSession","quality","stopPlay","addMsgExt","uploadReport","ZegoSignal","signalSeq","pushCallback","sessionInfos","tryConnectCount","tryConnectTimer","tryConnectInterval","tokenType","browser","getBrowserAndVersion","platform","tem","ua","userAgent","M","match","test","exec","appName","appVersion","onUpdateHeartBeartInterval","resetConnectTimer","bindWebSocketHandle","handleServerPush","startConnectTimer","handleRespondData","addSession","session_token","removeSession","handlePushData","handlePushResetSessionData","disconnectCallback","connectCallback","disconnectServer","updateToken","keys","sessions","sendMessageWithCallback","tokenInfo","report_interval","errorTokenInfo","strError","globalHeader","connectServer","serverUrl","WebSocket","callback","app_id","callbackData","sessionList","cResetType","session_ids","sendResetSessionAck","video_min_kpbs","video_max_kpbs","audio_kpbs","candidateList","dataList","checkMessageTimeout","sendHeartbeat","sessionIdList","hb_interval","qualityStat","streams","g","Function","eval","require","u","f","Error","SDPUtils","writeMediaSection","transceiver","caps","dtlsRole","writeRtpDescription","writeIceParameters","iceGatherer","getLocalParameters","writeDtlsParameters","dtlsTransport","mid","rtpSender","rtpReceiver","trackId","_initialTrackId","track","msid","sendEncodingParameters","ssrc","rtx","localCName","getCommonCapabilities","localCapabilities","remoteCapabilities","commonCapabilities","codecs","headerExtensions","fecMechanisms","findCodecByPayloadType","pt","payloadType","preferredPayloadType","rtxCapabilityMatches","lRtx","rRtx","lCodecs","rCodecs","lCodec","parameters","apt","rCodec","toLowerCase","clockRate","numChannels","min","rtcpFeedback","fb","parameter","lHeaderExtension","rHeaderExtension","uri","isActionAllowedInSignalingState","offer","answer","maybeAddCandidate","iceTransport","alreadyAdded","getRemoteCandidates","remoteCandidate","foundation","ip","port","priority","protocol","addRemoteCandidate","makeError","description","NotSupportedError","InvalidStateError","InvalidAccessError","TypeError","OperationError","edgeVersion","addTrackToStreamAndFireEvent","addTrack","dispatchEvent","MediaStreamTrackEvent","fireAddTrack","pc","receiver","trackEvent","Event","_dispatchEvent","_eventTarget","document","createDocumentFragment","method","canTrickleIceCandidates","needNegotiation","localStreams","remoteStreams","localDescription","remoteDescription","iceGatheringState","usingBundle","bundlePolicy","rtcpMuxPolicy","iceTransportPolicy","hasTurn","console","isString","filterIceServers","_iceGatherers","iceCandidatePoolSize","RTCIceGatherer","gatherPolicy","_config","transceivers","_sdpSessionId","generateSessionId","_sdpSessionVersion","_dtlsRole","_isClosed","ontrack","onremovestream","onconnectionstatechange","onicegatheringstatechange","onnegotiationneeded","ondatachannel","_emitGatheringStateChange","getConfiguration","getLocalStreams","getRemoteStreams","_createTransceiver","doNotAdd","hasBundleTransport","recvEncodingParameters","associatedRemoteMediaStreams","wantReceive","transports","_createIceAndDtlsTransports","alreadyExists","_maybeFireNegotiationNeeded","RTCRtpSender","addStream","getTracks","clonedStream","clone","idx","clonedTrack","addEventListener","enabled","removeTrack","sender","removeStream","getSenders","getReceivers","_createIceGatherer","writable","bufferedCandidateEvents","bufferCandidates","_gather","onlocalcandidate","removeEventListener","evt","cand","component","ufrag","usernameFragment","serializedCandidate","writeCandidate","assign","parseCandidate","sections","getMediaSections","getDescription","join","complete","every","RTCIceTransport","onicestatechange","_updateIceConnectionState","_updateConnectionState","RTCDtlsTransport","ondtlsstatechange","_disposeIceAndDtlsTransports","_transceive","recv","params","encodings","rtcp","cname","compound","rtcpParameters","receive","sessionpart","Promise","reject","splitSections","mediaSection","parseRtpParameters","isIceLite","matchPrefix","rejected","isRejected","remoteIceParameters","getIceParameters","remoteDtlsParameters","getDtlsParameters","_updateSignalingState","resolve","receiverList","iceOptions","substr","lines","splitLines","getKind","direction","getDirection","remoteMsid","parseMsid","getMid","generateIdentifier","parseRtpEncodingParameters","parseRtcpParameters","isComplete","cands","setTransport","setRemoteCandidates","MediaStream","default","RTCRtpReceiver","getCapabilities","codec","isNewTrack","nativeTrack","sid","newState","states","new","closed","checking","completed","disconnected","failed","numAudioTracks","numVideoTracks","arguments","mandatory","optional","writeSessionBoilerplate","remoteCodec","hdrExt","remoteExtensions","rHdrExt","getLocalCandidates","createAnswer","mediaSectionsInOffer","localTrack","getAudioTracks","getVideoTracks","hasRtx","reducedSize","candidateString","trim","selector","MediaStreamTrack","senderOrReceiver","promises","all","allStats","Map","stats","stat","set","ortcObjectName","obj","nativeGetstats","apply","nativeStats","mapStats","inboundrtp","outboundrtp","candidatepair","localcandidate","remotecandidate","methods","nativeMethod","args","2","blob","line","parts","part","substring","relatedAddress","relatedPort","tcpType","toUpperCase","parseIceOptions","parseRtpMap","parsed","writeRtpMap","parseExtmap","writeExtmap","headerExtension","preferredId","parseFmtp","kv","writeFmtp","parseRtcpFb","writeRtcpFb","parseSsrcMedia","sp","colon","attribute","parseFingerprint","algorithm","fingerprints","setupType","fp","iceParameters","password","mline","rtpmapline","fmtps","maxptime","extension","secondarySsrc","encodingParameters","hasRed","hasUlpfec","ssrcs","primarySsrc","flows","encParam","codecPayloadType","fec","mechanism","bandwidth","maxBitrate","remoteSsrc","rsize","mux","spec","planB","sessId","sessVer","parseMLine","fmt","parseOLine","sessionVersion","netType","addressType","address","3","global","adapterFactory","./adapter_factory.js","4","utils","dependencies","opts","options","shimChrome","shimFirefox","shimEdge","shimSafari","logging","browserDetails","detectBrowser","chromeShim","edgeShim","firefoxShim","safariShim","commonShim","adapter","extractVersion","disableLog","disableWarnings","shimPeerConnection","browserShim","shimCreateObjectURL","shimGetUserMedia","shimMediaStream","shimSourceObject","shimOnTrack","shimAddTrackRemoveTrack","shimGetSendersWithDtmf","shimRTCIceCandidate","shimMaxMessageSize","shimSendThrowTypeError","shimRemoveStream","shimReplaceTrack","shimRTCIceServerUrls","shimCallbacksAPI","shimLocalStreamsAPI","shimRemoteStreamsAPI","shimTrackEventTransceiver","shimCreateOfferLegacy","./chrome/chrome_shim","./common_shim","./edge/edge_shim","./firefox/firefox_shim","./safari/safari_shim","./utils","5","webkitMediaStream","wrapPeerConnectionEvent","_ontrack","origSetRemoteDescription","_ontrackpoly","te","shimSenderWithDtmf","dtmf","_dtmf","createDTMFSender","_pc","_senders","origAddTrack","origRemoveTrack","origAddStream","origRemoveStream","origGetSenders","senders","URL","HTMLMediaElement","_srcObject","src","revokeObjectURL","createObjectURL","shimAddTrackRemoveTrackWithNative","_shimmedLocalStreams","DOMException","existingSenders","newSenders","newSender","origGetLocalStreams","nativeStreams","_reverseStreams","_streams","newStream","replaceInternalStreamId","internalId","externalStream","internalStream","replace","RegExp","oldStream","isLegacyCall","origSetLocalDescription","replaceExternalStreamId","origLocalDescription","getOwnPropertyDescriptor","isLocal","hasTrack","webkitRTCPeerConnection","pcConfig","pcConstraints","iceTransports","generateCertificate","OrigPeerConnection","newIceServers","deprecated","origGetStats","fixChromeStats_","response","standardReport","reports","standardStats","names","makeMapStats","promise","nativeAddIceCandidate","../utils.js","./getusermedia","6","constraintsToChrome_","cc","ideal","exact","max","oldname_","charAt","oc","mix","advanced","shimConstraints_","constraints","func","audio","remap","b","video","face","facingMode","matches","getSupportedFacingModeLies","mediaDevices","getSupportedConstraints","enumerateDevices","devices","dev","label","deviceId","shimError_","PermissionDeniedError","PermissionDismissedError","DevicesNotFoundError","ConstraintNotSatisfiedError","TrackStartError","MediaDeviceFailedDueToShutdown","MediaDeviceKillSwitchOn","TabCaptureError","ScreenCaptureError","DeviceCaptureError","constraint","constraintName","getUserMedia","onSuccess","onError","webkitGetUserMedia","getUserMediaPromise_","kinds","getSources","device","groupId","echoCancellation","origGetUserMedia","cs","7","NativeRTCIceCandidate","nativeCandidate","parsedCandidate","augmentedCandidate","nativeCreateObjectURL","nativeRevokeObjectURL","newId","delete","dsc","nativeSetAttribute","setAttribute","RTCSctpTransport","_sctp","remoteIsFirefox","canSendMaxMessageSize","mLine","maxMessageSize","isFirefox","getRemoteFirefoxVersion","canSendMMS","remoteMMS","getMaxMessageSize","Number","POSITIVE_INFINITY","sctp","origCreateDataChannel","createDataChannel","dataChannel","origDataChannelSend","byteLength","8","shimRTCPeerConnection","origMSTEnabled","ev","RTCDtmfSender","RTCDTMFSender","replaceTrack","setTrack","../utils","rtcpeerconnection-shim","9","10","RTCTrackEvent","mozSrcObject","mozRTCPeerConnection","newServer","mozRTCSessionDescription","mozRTCIceCandidate","modernStatsTypes","nativeGetStats","onSucc","onErr","11","InternalError","SecurityError","The operation is insecure.","getUserMedia_","constraintsToFF37_","mozGetUserMedia","orgEnumerateDevices","nativeGetUserMedia","getSettings","nativeGetSettings","applyConstraints","nativeApplyConstraints","12","_localStreams","getStreamById","_remoteStreams","_addTrack","tracks","_onaddstream","_onaddstreampoly","failureCallback","withCallback","cb","errcb","RTCTransceiver","origCreateOffer","audioTransceiver","getTransceivers","setDirection","addTransceiver","videoTransceiver","13","logDisabled_","deprecationWarnings_","uastring","expr","pos","eventNameToWrap","wrapper","proto","nativeAddEventListener","nativeEventName","wrappedCallback","_eventMap","nativeRemoveEventListener","unwrappedCb","bool","oldMethod","newMethod","ZegoPublish","waitingAnswerTimeInterval","waitingICETimer","waitingAnswerTimer","publishQualityList","lastPublishStats","qualitySeq","videoInfo","offerSeq","qualityCount","publishStateUpdateError","resetPublish","clearPublishQualityTimer","clearTryPublishTimer","startPublish","localStream","onCreatePublishSessionSuccess","videoTracks_1","audioTracks_1","onRecvMediaDescription","updateBandwidthRestriction","modifier","stopPublish","setPublishQualityTimer","checkPublishConnectionFailedState","onGetRemoteOfferSucceses","answerDescription","shouldRetryPublish","startRetryPublish","tryStartPublish","getPublishStats","audioBytesSent","videoBytesSent","framesEncoded","framesSent","publishData","audioBitrate","bytesSent","uploadPublishQuality","ZegoPreview","localVideo","previewSuc","enableMicrophone","enable","enableCamera","getMediaStreamConstraints","mediaStreamConfig","mediaStreamConstraints","audioInput","videoQuality","horizontal","videoInput","startPreview","externalMediaStream","externalCapture","captureStream","stopPreview","ZegoDataReport","dataStatistics","abs_time","now","time_consumed","events","msg_ext","event_name","extInfo","__assign","addEventInfo","itemType","reportInfo","itemtype","zego_datareport_1","zego_preview_1","zego_publish_1","zego_signal_1","zego_play_web_1","ZegoStreamCenterWeb","playerList","publisherList","qualityTimerInterval","previewVideoList","signalList","getAllInUseUrl","serverUrls","onDisconnectHandle","signalInfo","publishConnectedList","publish","publisher","playConnectedList","player","stopSignalHeartbeat","onSignalDisconnected","setQualityMonitorCycle","timeInMs","onUpdateHeartBeartIntervalHandle","startSignalHeartbeat","preview","checkPreivew","removePreview","setPublishStateStart","getTotalStreamId","_streamid","retryCount","testStreamId","preferPublishSourceType","totalStreamid","connectPublishServer","updateWaitingList","isPublish","publishWaitingList","playWaitingList","publishStream","connetWithReuseSignalServer","checkPublish","checkPublisher","getTokenSuccess","shouldRetry","retryServerUrl","removeStreamFromSignal","setPlayStreamAudioOutput","setPublishStreamAudioOutput","publishCallback","playCallback","setPlayStateStart","currentPlaySourceType","connectPlayServer","checkPlay","checkPlayer","playStream","deleteSignal","publishStreamId","playStreamId","checkSignalHeartbeat","streamUrl","D","Logger","logUploadTimer","logUploadInterval","logCache","logCacheSend","logCacheMax","disable","logRemoteLevel","userName","logType","openWebSocketLogServer","https","openHttpsLogServer","stopWebSocketServer","SendHttpsLog","stopHttpsServer","dataItem","logReportParamList","RemoteLog","values","_i","logParamList","level","force","RemoteWebSocketLog","RemoteHttpsLog","logBefore","logInfo","stringTime","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","zego_logger_1","LoggerWeb","uploadData","xmlhttp","XMLHttpRequest","onreadystatechange","status","responseText","timeInterval","open","zego_logger_webrtc_1","zego_streamCenter_web_1","ZegoClient","_a","canRequestAudioTrack","origin","screenStreamFrom","setLocalAudioOutput","setPlayAudioOutput","setCustomSignalUrl","signalUrl","signals","startScreenShotChrome","screenShotReady","postMessage","text","startScreenShotFirFox","mediaSource","screenShotStream","stopScreenShot","urls_m3u8","chromeMediaSource","chromeMediaSourceId","maxWidth","screen","maxHeight","enumDevices","deviceInfoCallback","deviceInfos","microphone","speaker","camera","deviceInfo","microphones","speakers","cameras","location"],"mappings":"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","file":"jZego-rtc.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 23);\n","import {ZegoSignal} from \"./zego.signal\";\nimport {ZegoPlayWeb} from \"../webrtc/zego.play.web\";\n\nexport enum ENUM_LOG_LEVEL { debug = 0, info = 1, warn = 2, error = 3, report = 99, disable = 100 };\n\nexport enum ENUM_REMOTE_TYPE {disable, websocket, https};\n\n\n\nexport interface Config {\n        appid: number //\tappid\t数值\n        server: string\t//小程序服务器地址\t字符串\n        idName: string\t//用户id\t字符串\n        nickName: string\t//用户昵称\t字符串\n        logLevel: ENUM_LOG_LEVEL//本地log级别 0:debug 1:info 2:warn 3:error 98:report 100:disable\t数值\n        logUrl: string\t//远程log服务器地址 websocket地址\t字符串\n        audienceCreateRoom: boolean\t//观众是否可以创建房间\t布尔值\n        remoteLogLevel:ENUM_LOG_LEVEL\n}\n\nexport const PROTO_VERSION = \"1.0.3\";\n\n\nexport class ListNode {\n        _id: number = null;\n        _data: any;\n        next: ListNode = null;\n        prev: ListNode = null;\n\n        constructor(id: number = null, data: any = null) {\n                this._id = id;\n                this._data = data;\n        }\n\n\n        set id(id: number) {\n                this._id = id;\n        }\n\n        get id() {\n                return this._id;\n        }\n\n        set data(data: any) {\n                this._data = data;\n        }\n\n        get data() {\n                return this._data;\n        }\n\n        hasNext() {\n                return this.next && this.next.id;\n        }\n\n\n        hasPrev() {\n                return this.prev && this.prev.id;\n        }\n\n}\n\nexport class LinkedList {\n        //initialize end buffer nodes\n        start = new ListNode();\n        end = new ListNode();\n\n        //initialize counters\n        _idCounter = 0;\n        _numNodes = 0;\n\n        constructor() {\n                //initialize node pointers\n                this.start.next = this.end;\n                this.start.prev = null;\n                this.end.prev = this.start;\n                this.end.next = null;\n        }\n\n        /**\n         *   Inserts a node before another node in the linked list\n         *   @param {Node} toInsertBefore\n         *   @param {Node} node\n         */\n        insertBefore(toInsertBefore: ListNode, data: any) {\n                let newNode = new ListNode(this._idCounter, data);\n\n                newNode.next = toInsertBefore;\n                newNode.prev = toInsertBefore.prev;\n\n                toInsertBefore.prev.next = newNode;\n                toInsertBefore.prev = newNode;\n\n                ++this._idCounter;\n                ++this._numNodes;\n                return newNode;\n        }\n\n        /**\n         *   Adds data wrapped in a Node object to the end of the linked list\n         *   @param {object} data\n         */\n        addLast(data: any) {\n                return this.insertBefore(this.end, data);\n        }\n\n        /**\n         *   Alias for addLast\n         *   @param {object} data\n         */\n        add(data: any) {\n                return this.addLast(data);\n        }\n\n        /**\n         *   Gets and returns the first node in the linked list or null\n         *   @return {Node/null}\n         */\n        getFirst() {\n                if (this._numNodes === 0) {\n                        return null;\n                } else {\n                        return this.start.next;\n                }\n        }\n\n        /**\n         *   Gets and returns the last node in the linked list or null\n         *   @return {Node/null}\n         */\n        getLast() {\n                if (this._numNodes === 0) {\n                        return null;\n                } else {\n                        return this.end.prev;\n                }\n        }\n\n        /**\n         *   Gets and returns the size of the linked list\n         *   @return {number}\n         */\n        size() {\n                return this._numNodes;\n        }\n\n        /**\n         *   (Internal) Gets and returns the node at the specified index starting from the first in the linked list\n         *   Use getAt instead of this function\n         *   @param {number} index\n         */\n        getFromFirst(index) {\n                let count = 0, temp = this.start.next;\n                if (index >= 0) {\n                        while (count < index && temp !== null) {\n                                temp = temp.next;\n                                ++count;\n                        }\n                } else {\n                        temp = null;\n                }\n\n                if (temp === null) {\n                        throw 'Index out of bounds.';\n                }\n\n                return temp;\n        }\n\n        /**\n         *   Gets and returns the Node at the specified index in the linked list\n         *   @param {number} index\n         */\n        get(index) {\n                let temp = null;\n\n                if (index === 0) {\n                        temp = this.getFirst();\n                } else if (index === this._numNodes - 1) {\n                        temp = this.getLast();\n                } else {\n                        temp = this.getFromFirst(index);\n                }\n\n                return temp;\n        }\n\n        /**\n         *   Removes and returns node from the linked list by rearranging pointers\n         *   @param {Node} node\n         *   @return {Node}\n         */\n        remove(node) {\n                node.prev.next = node.next;\n                node.next.prev = node.prev;\n\n                --this._numNodes;\n\n                return node;\n        }\n\n        /**\n         *   Removes and returns the first node in the linked list if it exists, otherwise returns null\n         *   @return {Node/null}\n         */\n        removeFirst() {\n                let temp = null;\n\n                if (this._numNodes > 0) {\n                        temp = this.remove(this.start.next);\n                }\n\n                return temp;\n        }\n\n        /**\n         *   Removes and returns the last node in the linked list if it exists, otherwise returns null\n         *   @return {Node/null}\n         */\n        removeLast() {\n                let temp = null;\n\n                if (this._numNodes > 0) {\n                        temp = this.remove(this.end.prev);\n                }\n\n                return temp;\n        }\n\n        /**\n         *   Removes all nodes from the list\n         */\n        removeAll() {\n                this.start.next = this.end;\n                this.end.prev = this.start;\n                this._numNodes = 0;\n                this._idCounter = 0;\n        }\n\n        /**\n         *    Iterates the list calling the given fn for each node\n         *    @param {function} fn\n         */\n        each(iterator) {\n                let temp = this.start;\n\n                while (temp.hasNext()) {\n                        temp = temp.next;\n                        iterator(temp);\n                }\n        }\n\n        find(iterator) {\n                let temp = this.start,\n                        found = false,\n                        result = null;\n\n                while (temp.hasNext() && !found) {\n                        temp = temp.next;\n                        if (iterator(temp)) {\n                                result = temp;\n                                found = true;\n                        }\n                }\n\n                return result;\n        }\n\n        map(iterator) {\n                let temp = this.start,\n                        results = [];\n\n                while (temp.hasNext()) {\n                        temp = temp.next;\n                        if (iterator(temp)) {\n                                results.push(temp);\n                        }\n                }\n\n                return results;\n        }\n\n        /**\n         *    Alias for addLast\n         *    @param {object} data\n         */\n        push(data) {\n                return this.addLast(data);\n        }\n\n        /**\n         *    Performs insertBefore on the first node\n         *    @param {object} data\n         */\n        unshift(data) {\n                if (this._numNodes > 0) {\n                        this.insertBefore(this.start.next, data);\n                } else {\n                        this.insertBefore(this.end, data);\n                }\n        }\n\n        /**\n         *    Alias for removeLast\n         */\n        pop() {\n                return this.removeLast();\n        }\n\n        /**\n         *    Alias for removeFirst()\n         */\n        shift() {\n                return this.removeFirst();\n        }\n}\n\n\nexport const sdkErrorList = {\n        SUCCESS: {\n                code: \"ZegoClient.Success\",\n                msg: \"success.\"\n        },\n        PARAM: {\n                code: \"ZegoClient.Error.Param\",\n                msg: \"input error.\"\n        },\n        HEARTBEAT_TIMEOUT: {\n                code: \"ZegoClient.Error.Timeout\",\n                msg: \"heartbeat timeout.\"\n        },\n        LOGIN_TIMEOUT: {\n                code: \"ZegoClient.Error.Timeout\",\n                msg: \"login timeout.\"\n        },\n        SEND_MSG_TIMEOUT: {\n                code: \"ZegoClient.Error.Timeout\",\n                msg: \"send customsg timeout.\"\n        },\n        RESET_QUEUE: {\n                code: \"ZegoClient.Error.Timeout\",\n                msg: \"msg waiting ack is clear when reset.\"\n        },\n        LOGIN_DISCONNECT: {\n                code: \"ZegoClient.Error.Network\",\n                msg: \"network is broken and login fail.\"\n        },\n        KICK_OUT: {\n                code: \"ZegoClient.Error.Kickout\",\n                msg: \"kickout reason=\"\n        },\n        UNKNOWN: {\n                code: \"ZegoClient.Error.Unknown\",\n                msg: \"unknown error.\"\n        },\n        FREQ_LIMITED: {\n                code: \"ZegoClient.Error.requencyLimited\",\n                msg: \"Frequency Limited.\"\n        }\n        // SIGNAL_DISCONNECT: {\n        //     code: \"ZegoClient.Error.Timeout\",\n        //     msg: \"WebRTC Signal broken\"\n        // }\n};\n\nexport interface DataStatisticsItemEvent{\n        event: string,\n        abs_time: number,\n        time_consumed?: number,\n        msg_ext?:{[index:string]:string|number}\n}\n\nexport interface DataStatisticsItem {\n        abs_time: number,\n        time_consumed: number,\n        error: number,\n        events: DataStatisticsItemEvent[],\n        msg_ext?: any,\n        itemtype?: string\n};\n\n\nexport interface DataStatistics {\n        [index: string]: DataStatisticsItem\n}\n\nexport enum ENUM_SIGNAL_STATE {disconnected, connecting, connected};\n\nexport const ENUM_RESOLUTION_TYPE = {\n        LOW: {\n                width: 240,\n                height: 320,\n                frameRate: 15,\n                bitRate: 300\n        },\n        MEDIUM: {\n                width: 480,\n                height: 640,\n                frameRate: 15,\n                bitRate: 800\n        },\n        HIGH: {\n                width: 720,\n                height: 1280,\n                frameRate: 20,\n                bitRate: 1500\n        }\n};\n\nexport const ENUM_RETRY_STATE = {\n        didNotStart: 0,\n        retrying: 1,\n        finished: 2\n};\n\nexport const ENUM_PUBLISH_STATE = {\n        start: 0,\n        waitingSessionRsp: 1, //等待Session回包\n        waitingOffserRsp: 2, //等待offser回包\n        waitingServerAnswer: 3, //等待server answer\n        waitingServerICE: 4, //等待candidate\n        connecting: 5, //等待candidate连接\n        publishing: 6, //开始推流\n        stop: 7,\n        didNotStart:8\n};\n\n\nexport const ENUM_PLAY_STATE = {\n        start: 0,\n        waitingSessionRsp: 1,\n        waitingOffserRsp: 2,\n        waitingServerAnswer: 3,\n        waitingServerICE: 4,\n        connecting: 5,\n        playing: 6,\n        stop: 7,\n        didNotStart:8\n};\n\nexport interface VideoInfo {\n        width: number,\n        height: number,\n        frameRate: number,\n        bitRate: number\n}\n\nexport const ENUM_CONNECT_STATE = {disconnect: 0, connecting: 1, connected: 2};\n\nexport const  MAX_TRY_CONNECT_COUNT = 3;\nexport const SEND_MSG_RESET = 2;\nexport const  SEND_MSG_TIMEOUT = 1;\nexport const MAX_TRY_HEARTBEAT_COUNT = 5;\n\n\n\nexport const ENUM_PUBLISH_STREAM_STATE = {\n        waiting_url: 1,\n        tryPublish: 2,\n        update_info: 3,\n        publishing: 4,\n        stop: 5\n};\n\nexport const  ENUM_STREAM_SUB_CMD = {\n        liveNone: 0,\n        liveBegin: 2001,\n        liveEnd: 2002,\n        liveUpdate: 2003\n};\n\nexport  const ENUM_STREAM_UPDATE_TYPE = {\n        added: 0,\n        deleted: 1\n};\n\n//运行状态\nexport  enum ENUM_RUN_STATE   {\n        logout,\n        trylogin,\n        login\n};\n\nexport const ENUM_PUBLISH_STATE_UPDATE = {\n        start: 0,\n        error: 1,\n        retry: 2\n};\n\nexport const ENUM_PLAY_STATE_UPDATE = {\n        start: 0,\n        error: 1,\n        retry: 2\n};\n\nexport interface StreamQuality {\n  videoBitrate:number,//\t视频码率\t数值\n  audioBitrate:number,//\t音频码率\t数值\n  videoFPS:number,//\t帧率\t数值\n  frameHeight:number,//\t视频高度\t数值\n  frameWidth:number,//\t视频宽度\t数值\n  videoTransferFPS:number,//\t传输帧率\t数值\n}\n\nexport interface  StreamInfo{\n  stream_id:string,//\t流Id\t字符串\n  anchor_id_name:string,\t//流对应的用户Id\t字符串\n  anchor_nick_name:string,\t//流对应的用户昵称\t字符串\n  extra_info:string,\t//流附加信息\t字符串\n}\n\n\nexport interface ERRO {\n     code:string,\n     msg:string\n}\n\nexport const MAX_TRY_LOGIN_COUNT = 5; //最大重试登录次数\nexport const TRY_LOGIN_INTERVAL = [2000, 2000, 3000, 3000, 4000]; //重试登录的频率\nexport const MINIUM_HEARTBEAT_INTERVAL = 3000; //最小心跳尝试间隔\nexport const ENUM_STREAM_UPDATE_CMD = {\n  added: 12001,\n  deleted: 12002,\n  updated: 12003\n};\nexport const SERVER_ERROR_CODE = 10000;\nexport const MIXSTREAM_ERROR_CODE = 10000;\n\nexport interface WaitingInfo {\n  streamId: string,\n  success: Function,\n  error: Function\n}\n\nexport interface SignalInfo {\n  signal: ZegoSignal,\n  state: number,\n  publishWaitingList: WaitingInfo[],\n  playWaitingList: WaitingInfo[],\n  publishConnectedList: string[],\n  playConnectedList: string[],\n  tokenInfo: any\n}\n\n\nexport interface PlayerInfo {\n  player: ZegoPlayWeb,\n  remoteVideo: HTMLElement,\n  audioOutput: string,\n  signal: ZegoSignal,\n  serverUrls: string[],\n  retryCount: number,\n  playOption:PlayOption\n}\n\nexport enum QUALITYLEVEL   {\n  low=1,\n  stantard=2,\n  hight=3,\n  custome=4\n}\n\nexport interface MediaStreamConstraints {\n  \n  audio:boolean,\n  audioInput:string,\n  video:boolean,\n  facingMode?:string\n  videoInput:string\n  videoQuality:QUALITYLEVEL,\n  horizontal:boolean,\n  externalCapture?:boolean,\n  height?:number,\n  frameRate?:number,\n  width?:number,\n  bitRate?:number,\n  externalMediaStream?:MediaStream\n}\n\n\nexport interface DeviceInfo {\n  label:string\n  deviceId:string\n}\n\n\nexport const ENUM_SIGNAL_SUB_CMD = {\n  none: 0,\n  joinLiveRequest: 1001,\n  joinLiveResult: 1002,\n  joinLiveInvite: 1003,\n  joinLiveStop: 1004\n};\n\nexport const ENUM_PUSH_SIGNAL_SUB_CMD = {\n  none: 0,\n  pushJoinLiveRequest: 11001,\n  pushJoinLiveResult: 11002,\n  pushJoinLiveInvite: 11003,\n  pushJoinLiveStop: 11004\n};\n\nexport interface ChatInfo {\n        id_name:string//\t字符串\n        nick_name:string//\t用户昵称\t字符串\n        role:number//\t用户角色\t数值\n        msg_id:string//\t消息Id\t数值\n        msg_category:number//\t消息类别\t数值\n        msg_type:number//\t消息类型\t数值\n        msg_content:string//\t消息内容\t字符串\n        send_time:number//\t发送时间\t数值\n}\n\nexport interface UserInfo {\n        action:1|2//\t行为\t数值 1:进入房间 2:退出房间\n        idName:string//\t用户id\t字符串\n        nickName:string//\t用户昵称\t字符串\n        role:1|2//\t角色类型\t数值 1:主播 2:观众\n        logintime:string//\t登录时间\t字符串\n}\n\nexport interface MessageInfo {\n        idName:string//\t用户ID\t字符串\n        nickName:string//\t用户昵称\t字符串\n        messageId:string//\t消息ID\t字符串\n        category:number//\t消息分类\t数值\n        type:number//\t消息类型\t数值\n        content:string//\t消息内容\t字符串\n        time:number//\t发送消息时间\t数值\n}\n\n//拉流选择\nexport const ENUM_PLAY_SOURCE_TYPE = {\n        auto: 0,\n        ultra: 1\n};\n\n//推流选择\nexport const ENUM_DISPATCH_TYPE = {\n        cdn: 0,\n        ultra: 1\n};\n\nexport type PlayOption = {\n      playType:'audio'|'video'|'all'\n}\n","import {Config} from \"./zego.entity\";\nimport {Logger} from \"./zego.logger\";\n\nexport class ClientUtil {\n        \n        static checkConfigParam (option: Config, logger: Logger): boolean {\n                if (!option.appid) {\n                        logger.error (\"ccp.0 appid must be number\");\n                        return false;\n                }\n                \n                if (!option.server) {\n                        logger.error (\"ccp.0 server must be string and not empty\");\n                        return false;\n                }\n                \n                if (!option.idName) {\n                        logger.error (\"ccp.0 idName must be string and not empty\");\n                }\n                \n                return true;\n                \n        }\n        \n        \n        static checkLoginParam (roomid: string, token: string) {\n                return true;\n        }\n        \n        \n        static registerCallback (fName, option: { success?: Function, error?: Function }, callbackList: { [index: string]: Function }) {\n                let sf, ef;\n                if (option.success) sf = option.success;\n                if (option.error) ef = option.error;\n                callbackList[fName + \"SuccessCallback\"] = sf;\n                callbackList[fName + \"ErrorCallback\"] = ef;\n        }\n        \n        \n        static actionErrorCallback (fName: string, callbackList: { [index: string]: Function }): Function {\n                return callbackList[fName + \"ErrorCallback\"];\n        }\n        \n        // 执行成功回调函数\n        static actionSuccessCallback (fName, callbackList: { [index: string]: Function }): Function {\n                return callbackList[fName + \"SuccessCallback\"];\n        }\n        \n        \n        /**\n         错误管理\n         */\n        static getServerError (code) {\n                const serverErrorList = {\n                        1: \"parse json error.\",\n                        1001: \"login is processing.\",\n                        1002: \"liveroom request error.\",\n                        1003: \"zpush connect fail.\",\n                        1004: \"zpush handshake fail.\",\n                        1005: \"zpush login fail.\",\n                        1006: \"user login state is wrong.\",\n                        1007: \"got no zpush addr\",\n                        1008: \"token error\",\n                        1009: \"dispatch error\",\n                        2002: \"biz channel error\",\n                        1000000000: \"liveroom cmd error, result=\",\n                };\n                \n                if (code === 0) {\n                        return {\n                                code: \"ZegoClient.Success\",\n                                msg: \"success\"\n                        };\n                }\n                \n                let err = {\n                        code: \"ZegoClient.Error.Server\",\n                        msg: \"\",\n                };\n                if (code > 1000000000) {\n                        err.msg = serverErrorList[1000000000] + code;\n                } else if (!serverErrorList[code]) {\n                        err.msg = serverErrorList[code];\n                } else {\n                        err.msg = \"unknown error code:\" + code;\n                }\n                \n                return err;\n        }\n        \n        \n        static isKeepTryLogin (code: number) {\n                switch (code) {\n                        case 1002: //liveroom connect error\n                        case 1003: //zpush connect error\n                                return true;\n                        default:\n                                return false;\n                }\n        }\n        \n        \n        /*\n        *    \"msl.0\": \"ZegoClient.mergeStreamList\",\n        */\n        static mergeStreamList (logger: Logger, idName: string, oldStreamList: any[], newStreamList: any[], callbackResult) {\n                logger.debug (\"msl.0 call\");\n                let addStreamList = [];\n                let delStreamList = [];\n                let updateStreamList = [];\n                let flag;\n                \n                for (let i = 0; i < newStreamList.length; i++) {\n                        if (newStreamList[i].anchor_id_name == idName) {\n                                logger.debug (\"msl.0 have self stream added\");\n                                continue;\n                        }\n                        flag = false;\n                        for (let j = 0; j < oldStreamList.length; j++) {\n                                if (newStreamList[i].stream_id === oldStreamList[j].stream_id) {\n                                        if (newStreamList[i].extra_info !== oldStreamList[j].extra_info) {\n                                                updateStreamList.push (newStreamList[i]);\n                                        }\n                                        flag = true;\n                                        break;\n                                }\n                        }\n                        if (!flag) {\n                                addStreamList.push (newStreamList[i]);\n                        }\n                }\n                \n                for (let k = 0; k < oldStreamList.length; k++) {\n                        flag = false;\n                        for (let n = 0; n < newStreamList.length; n++) {\n                                if (newStreamList[n].anchor_id_name == idName) {\n                                        logger.debug (\"msl.0 have self stream deleted\");\n                                        continue;\n                                }\n                                \n                                if (oldStreamList[k].stream_id === newStreamList[n].stream_id) {\n                                        flag = true;\n                                        break;\n                                }\n                        }\n                        if (!flag) {\n                                delStreamList.push (oldStreamList[k]);\n                        }\n                }\n                \n                oldStreamList = newStreamList;\n                callbackResult (addStreamList, delStreamList, updateStreamList);\n                logger.debug (\"msl.0 call success\");\n        }\n        \n        \n        static checkCustomCommandParam (param: {\n                dest_id_name: string[],\n                custom_msg: string\n        }) {\n                return true;\n        }\n        \n        //生成随机数\n        static generateRandumNumber (maxNum: number) {\n                return parseInt (Math.random () * (maxNum + 1) + '', 10);\n        }\n        \n        \n        static isSupportWebrtc (): boolean {\n                const e = window['RTCPeerConnection'] || window['mozRTCPeerConnection'] || window['webkitRTCPeerConnection'],\n                            t = navigator['getUserMedia'] || navigator['webkitGetUserMedia'] ||\n                                        navigator['msGetUserMedia'] || navigator['mozGetUserMedia'] ||\n                                        navigator['mediaDevices'] && navigator['mediaDevices']['getUserMedia'],\n                            n = window['WebSocket']\n                return !!e && !!t && !!n;\n        }\n        \n        static isSupportH264 (sucCall, errCall) {\n                new RTCPeerConnection (null).createOffer ({\n                        offerToReceiveAudio: 1,\n                        offerToReceiveVideo: 1\n                }).then (desc => {\n                        if (desc && desc.sdp) {\n                                const sdplist = desc.sdp.split ('\\r\\n');\n                                const hasH264 = sdplist.some (item => {\n                                        return item.startsWith ('a=rtpmap:') && (item.indexOf ('H264/') > -1)\n                                });\n                                sucCall (hasH264);\n                        }\n                }, err => {\n                        errCall (err);\n                });\n        }\n}\n","export let playErrorList = {\n        DISPATCH_ERROR: {\n                code: \"ZegoPlayWeb.Error.Dispatch\",\n                msg: \"dispatch request error\"\n        },\n        DISPATCH_TIMEOUT: {\n                code: \"ZegoPlayWeb.Timeout.Dispatch\",\n                msg: \"dispatch request timeout\"\n        },\n        TOKEN_ERROR: {\n                code: \"ZegoPlayWeb.Error.Token\",\n                msg: \"login token error\"\n        },\n        SEND_SESSION_TIMEOUT: {\n                code: \"ZegoPlayWeb.Timeout.Session\",\n                msg: \"send session request timeout\"\n        },\n        CREATE_SESSION_ERROR: {\n                code: \"ZegoPlayWeb.Error.Session\",\n                msg: \"create session error\"\n        },\n        CREATE_OFFER_ERROR: {\n                code: \"ZegoPublish.Error.CreateOffer\",\n                msg: \"create offer error\"\n        },\n        SERVER_MEDIA_DESC_TIMEOUT: {\n                code: \"ZegoPlayWeb.Timeout.RemoteOffer\",\n                msg: \"wating server mediaDesc timeout\"\n        },\n        SET_REMOTE_DESC_ERROR: {\n                code: \"ZegoPlayWeb.Error.RemoteOffer\",\n                msg: \"other side offer error\"\n        },\n        CREATE_ANSWER_ERROR: {\n                code: \"ZegoPlayWeb.Error.CreateAnswer\",\n                msg: \"create offer error\"\n        },\n        SET_LOCAL_DESC_ERROR: {\n                code: \"ZegoPlayWeb.Error.LocalDesc\",\n                msg: \"setLocalDescription error\"\n        },\n        SEND_MEDIA_DESC_TIMEOUT: {\n                code: \"ZegoPlayWeb.Timeout.Desc\",\n                msg: \"send mediaDesc timeout\"\n        },\n        SEND_CANDIDATE_ERROR: {\n                code: \"ZegoPlayWeb.Error.Candidate\",\n                msg: \"send candidate error\"\n        },\n        SEND_CANDIDATE_TIMEOUT: {\n                code: \"ZegoPlayWeb.Timeout.Candidate\",\n                msg: \"send candidate timeout\"\n        },\n        SERVER_CANDIDATE_TIMEOUT: {\n                code: \"ZegoPlayWeb.Timeout.ServerCandidate\",\n                msg: \"waiting candidate timeout\"\n        },\n        SERVER_CANDIDATE_ERROR: {\n                code: \"ZegoPlayWeb.Error.ServerCandidate\",\n                msg: \"recv candidate error\"\n        },\n        MEDIA_CONNECTION_FAILED: {\n                code: \"ZegoPlayWeb.Error.ConnectionFailed\",\n                msg: \"ice Connection state failed\"\n        },\n        MEDIA_CONNECTION_CLOSED: {\n                code: \"ZegoPlayWeb.Error.ConnectionClosed\",\n                msg: \"ice connection state closed\"\n        },\n        SESSION_CLOSED: {\n                code: \"ZegoPlayWeb.Error.SessionClosed\",\n                msg: \"server session closed\"\n        },\n        WEBSOCKET_ERROR: {\n                code: \"ZegoPlayWeb.Error.SocketError\",\n                msg: \"network error\"\n        }\n};\n\nexport let publishErrorList = {\n        DISPATCH_ERROR: {\n                code: \"ZegoPublish.Error.Dispatch\",\n                msg: \"dispatch request error\"\n        },\n        DISPATCH_TIMEOUT: {\n                code: \"ZegoPublish.Timeout.Dispatch\",\n                msg: \"dispatch request timeout\"\n        },\n        TOKEN_ERROR: {\n                code: \"ZegoPublish.Error.Token\",\n                msg: \"login token error\"\n        },\n        SEND_SESSION_TIMEOUT: {\n                code: \"ZegoPublish.Timeout.Session\",\n                msg: \"send session request timeout\"\n        },\n        CREATE_SESSION_ERROR: {\n                code: \"ZegoPublish.Error.Session\",\n                msg: \"create session error\"\n        },\n        CREATE_OFFER_ERROR: {\n                code: \"ZegoPublish.Error.CreateOffer\",\n                msg: \"create offer error\"\n        },\n        SET_LOCAL_DESC_ERROR: {\n                code: \"ZegoPublish.Error.LocalDesc\",\n                msg: \"setLocalDescription error\"\n        },\n        SEND_MEDIA_DESC_TIMEOUT: {\n                code: \"ZegoPublish.Timeout.Desc\",\n                msg: \"send mediaDesc timeout\"\n        },\n        SERVER_MEDIA_DESC_TIMEOUT: {\n                code: \"ZegoPublish.Timeout.ServerAnswer\",\n                msg: \"waiting server mediaDesc timeout\"\n        },\n        SERVER_MEDIA_DESC_ERROR: {\n                code: \"ZegoPublish.Error.ServerAnswer\",\n                msg: \"server mediaDesc type error\"\n        },\n        SET_REMOTE_DESC_ERROR: {\n                code: \"ZegoPublish.Error.RemoteDesc\",\n                msg: \"other side offer error\"\n        },\n        SEND_CANDIDATE_TIMEOUT: {\n                code: \"ZegoPublish.Timeout.Candidate\",\n                msg: \"sendIceCandidate error\"\n        },\n        SERVER_CANDIDATE_TIMEOUT: {\n                code: \"ZegoPublish.Timeout.ServerCandidate\",\n                msg: \"waiting candidate timeout\"\n        },\n        SERVER_CANDIDATE_ERROR: {\n                code: \"ZegoPublish.Error.ServerCandidate\",\n                msg: \"recv candidate error\"\n        },\n        SESSION_CLOSED: {\n                code: \"ZegoPublish.Error.SessionClosed\",\n                msg: \"server session closed\"\n        },\n        MEDIA_CONNECTION_FAILED: {\n                code: \"ZegoPublish.Error.IConnectionFailed\",\n                msg: \"Iice Connection state failed\"\n        },\n        MEDIA_CONNECTION_CLOSED: {\n                code: \"ZegoPublish.Error.ConnectionClosed\",\n                msg: \"ice connection state closed\"\n        },\n        WEBSOCKET_ERROR: {\n                code: \"ZegoPublish.Error.SocketError\",\n                msg: \"network error\"\n        }\n};\n\nexport let ENUM_PUBLISH_STATE_UPDATE = {\n        start: 0,\n        error: 1,\n        retry: 2\n};\n\nexport let ENUM_PLAY_STATE_UPDATE = {\n        start: 0,\n        error: 1,\n        retry: 2,\n        stop: 3\n};\n\nexport let ENUM_RETRY_STATE = {\n        didNotStart: 0,\n        retrying: 1,\n        finished: 2\n};\n\nexport let getSeq = (function () {\n        let seq = 1;\n\n        return function () {\n                return seq++;\n        };\n})();","import {SocketCenter} from \"./socketCenter\";\nimport {StateCenter} from \"./stateCenter\";\nimport {\n        ENUM_PUSH_SIGNAL_SUB_CMD,\n        ENUM_SIGNAL_SUB_CMD,\n        ERRO\n} from \"../zego.entity\";\nimport {Logger} from \"../zego.logger\";\n\nexport class LiveHandler {\n        \n        private logger: Logger;\n        private socketCenter: SocketCenter;\n        private stateCenter: StateCenter;\n        \n        constructor (logger: Logger, stateCenter: StateCenter, socketCenter: SocketCenter) {\n                this.logger = logger;\n                this.socketCenter = socketCenter;\n                this.stateCenter = stateCenter;\n                \n        }\n        \n        /*\n        *    \"zb.lh.rjl\": \"ZegoClient.base.LiveHandler.requestJoinLive\",\n         */\n        requestJoinLive (destIdName: string, success: (seq: number) => void, error: (err: ERRO, seq: number) => void,\n                         resultCallback: (result: boolean, fromUserId: string, fromUserName: string) => void): boolean {\n                this.logger.debug (\"zb.lh.rjl call\");\n                let requestId = this.stateCenter.getRequestId ();\n                let signalCmd = this.stateCenter.getSignalCmdContent (requestId, destIdName);\n                if (resultCallback == undefined) {\n                        return false;\n                }\n                \n                this.stateCenter.joinLiveCallbackMap[requestId] = resultCallback;\n                this.sendSignalCmd (ENUM_SIGNAL_SUB_CMD.joinLiveRequest, signalCmd, destIdName, success, error);\n                return true;\n        }\n        \n        \n        \n        /*\n       *    \"zb.lh.ijl\": \"ZegoClient.base.LiveHandler.inviteJoinLive\",\n        */\n        inviteJoinLive (destIdName: string, success: (seq: number) => void, error: (err: ERRO, seq: number) => void,\n                        resultCallback: (result: boolean, fromUserId: string, fromUserName: string) => void): boolean {\n                this.logger.debug (\"zb.lh.ijl call\");\n                let requestId = this.stateCenter.getRequestId ();\n                let signalCmd = this.stateCenter.getSignalCmdContent (requestId, destIdName);\n                if (resultCallback == undefined) {\n                        return false;\n                }\n                \n                this.stateCenter.joinLiveCallbackMap[requestId] = resultCallback;\n                this.sendSignalCmd (ENUM_SIGNAL_SUB_CMD.joinLiveInvite, signalCmd, destIdName, success, error);\n                \n                return true;\n        }\n        \n        \n        \n        \n        /*\n      *    \"zb.lh.ejl\": \"ZegoClient.base.LiveHandler.endJoinLive\",\n       */\n        endJoinLive (destIdName: string, success: (seq: number) => void, error: (err: ERRO, seq: number) => void): boolean {\n                \n                this.logger.debug (\"zb.lh.ejl call\");\n                \n                let requestId = this.stateCenter.getRequestId ();\n                \n                let signalCmd = this.stateCenter.getSignalCmdContent (requestId, destIdName);\n                \n                this.sendSignalCmd (ENUM_SIGNAL_SUB_CMD.joinLiveStop, signalCmd, destIdName, success, error);\n                \n                return true;\n        }\n        \n        \n        \n        /*\n      *    \"zb.lh.rpjl\": \"ZegoClient.base.LiveHandler.respondJoinLive\",\n       */\n        respondJoinLive (requestId: string, respondResult: boolean, success?: (seq: number) => void, error?: (err: ERRO, seq: number) => void): boolean {\n                \n                this.logger.debug (\"zb.lh.rpjl call\");\n                \n                let dest_id_name = this.stateCenter.joinLiveRequestMap[requestId];\n                if (!dest_id_name) {\n                        this.logger.info (\"zb.lh.rpjl no dest id name\");\n                        return false;\n                }\n                \n                let result = 0;\n                if (respondResult === true)\n                        result = 1;\n                \n                let signalCmd = this.stateCenter.getSignalCmdContent (requestId, dest_id_name, result);\n                \n                this.sendSignalCmd (ENUM_SIGNAL_SUB_CMD.joinLiveResult, signalCmd, dest_id_name, success, error);\n                \n                delete this.stateCenter.joinLiveRequestMap[requestId];\n                \n                return true;\n        }\n        \n        \n        \n        \n        /*\n        *    \"zb.lh.ssc\": \"ZegoClient.base.LiveHandler.sendSignalCmd\",\n       */\n        //连麦信令\n        sendSignalCmd (cmd: number, signalMsg: string, dest_id_name: string, success, error) {\n                \n                this.logger.debug (\"zb.lh.ssc call\");\n                \n                if (!this.stateCenter.isLogin ()) {\n                        this.logger.error (\"zb.lh.ssc state error\");\n                        return;\n                }\n                \n                this.logger.debug (\"zb.lh.ssc send signal cmd \" + cmd);\n                \n                const bodyData = {\n                        \"sub_cmd\": cmd,\n                        \"signal_msg\": signalMsg,\n                        \"dest_id_name\": [dest_id_name]\n                };\n                \n                this.socketCenter.sendMessage (\"signal\", bodyData, success, error);\n                this.logger.info (\"zb.lh.ssc call success\");\n        }\n        \n        \n        \n        \n        \n        /*\n       *    \"zb.lh.hpsm\": \"ZegoClient.base.LiveHandler.handlePushSignalMsg\",\n       */\n        // 连麦信令push\n        handlePushSignalMsg (msg) {\n                if (!this.stateCenter.isLogin ()) {\n                        this.logger.warn (\"zb.lh.hpsm not login\");\n                        return;\n                }\n                \n                let signalMsg = JSON.parse (msg.body.signal_msg);\n                \n                this.logger.debug (\"zb.lh.hpcm hpsm= \", signalMsg);\n                \n                switch (msg.body.sub_cmd) {\n                        case ENUM_PUSH_SIGNAL_SUB_CMD.pushJoinLiveRequest:\n                                this.handlePushJoinLiveRequestMsg (signalMsg);\n                                break;\n                        case ENUM_PUSH_SIGNAL_SUB_CMD.pushJoinLiveResult:\n                                this.handlePushJoinLiveResultMsg (signalMsg);\n                                break;\n                        case ENUM_PUSH_SIGNAL_SUB_CMD.pushJoinLiveInvite:\n                                this.handlePushJoinLiveInviteMsg (signalMsg);\n                                break;\n                        case ENUM_PUSH_SIGNAL_SUB_CMD.pushJoinLiveStop:\n                                this.handlePushJoinLiveStopMsg (signalMsg);\n                }\n                \n                this.logger.debug (\"zb.lh.hpsm call end\");\n        }\n        \n      \n        /*\n        *    \"zb.lh.hpjlrm\": \"ZegoClient.base.LiveHandler.handlePushJoinLiveRequestMsg\",\n       */\n        //请求连麦push\n        private handlePushJoinLiveRequestMsg (signalMsg) {\n                \n                let requestId = signalMsg.request_id;\n                \n                if (typeof requestId !== \"string\") {\n                        this.logger.error (\"zb.lh.hpjlrm no requestId\");\n                        return;\n                }\n                \n                let dest_id_name = signalMsg.from_userid;\n                \n                if (typeof dest_id_name !== \"string\") {\n                        this.logger.error (\"zb.lh.hpjlrm no from user\");\n                        return;\n                }\n                this.stateCenter.joinLiveRequestMap[requestId] = dest_id_name;\n                \n                this.logger.info (\"zb.lh.hpjlrm onRecvJoinLiveRequest \" + dest_id_name);\n                \n                this.onRecvJoinLiveRequest (requestId, signalMsg.from_userid, signalMsg.from_username, signalMsg.room_id);\n        }\n        \n        onRecvJoinLiveRequest (requestId: string, from_userid: string, from_username: string, roomid: string) {\n        }\n        \n        \n        \n        /*\n        *    \"zb.lh.hpjlim\": \"ZegoClient.base.LiveHandler.handlePushJoinLiveInviteMsg\",\n        */\n        private handlePushJoinLiveInviteMsg (signalMsg) {\n                \n                let requestId = signalMsg.request_id;\n                \n                if (typeof requestId !== \"string\") {\n                        this.logger.error (\"zb.lh.hpjlim no requestId\");\n                        return;\n                }\n                \n                let dest_id_name = signalMsg.from_userid;\n                \n                if (typeof dest_id_name !== \"string\") {\n                        this.logger.error (\"zb.lh.hpjlim no from user\");\n                        return;\n                }\n                \n                this.stateCenter.joinLiveRequestMap[requestId] = dest_id_name;\n                \n                this.logger.info (\"zb.lh.hpjlim onRecvInviteJoinLiveRequest \" + dest_id_name);\n                \n                this.onRecvInviteJoinLiveRequest (requestId, signalMsg.from_userid, signalMsg.from_username, signalMsg.room_id);\n        }\n        \n        onRecvInviteJoinLiveRequest (requestId: string, from_userid: string, from_username: string, roomid: string) {\n        }\n        \n        \n        \n        /*\n        *    \"zb.lh.hpjlim\": \"ZegoClient.base.LiveHandler.handlePushJoinLiveResultMsg\",\n        */\n        private handlePushJoinLiveResultMsg (signalMsg) {\n                \n                let requestId = signalMsg.request_id;\n                if (typeof requestId !== \"string\") {\n                        this.logger.error (\"zb.lh.hpjlrm no requestId\");\n                        return;\n                }\n                \n                let result = signalMsg.result;\n                if (result == undefined) {\n                        this.logger.info (\"zb.lh.hpjlrm no result\");\n                        return;\n                }\n                \n                let respondResult = result == 1 ? true : false;\n                if (this.stateCenter.joinLiveCallbackMap[requestId]) {\n                        let result_callback = this.stateCenter.joinLiveCallbackMap[requestId];\n                        if (!result_callback) {\n                                this.logger.info (\"hpjlrm.o no callback\");\n                                return;\n                        }\n                        \n                        this.logger.info (\"zb.lh.hpjlrm joinLiveRequest/invite result \" + respondResult);\n                        \n                        delete this.stateCenter.joinLiveCallbackMap[requestId];\n                        \n                        result_callback (respondResult, signalMsg.from_userid, signalMsg.from_username);\n                }\n        }\n        \n        \n        \n        \n        /*\n        *    \"zb.lh.hpjlsm\": \"ZegoClient.base.LiveHandler.handlePushJoinLiveStopMsg\",\n        */\n        private handlePushJoinLiveStopMsg (signalMsg) {\n                let requestId = signalMsg.request_id;\n                if (typeof requestId !== \"string\") {\n                        this.logger.error (\"zb.lh.hpjlsm no requestId\");\n                        return;\n                }\n                \n                this.logger.info (\"zb.lh.hpjlsm onRecvEndJoinLiveCommand \" + signalMsg.from_userid);\n                this.onRecvEndJoinLiveCommand (requestId, signalMsg.from_userid, signalMsg.from_username, signalMsg.room_id);\n        }\n        \n        onRecvEndJoinLiveCommand (requestId: string, from_userid: string, from_username: string, roomid: string) {\n        }\n        \n        \n        \n}\n","import {SocketCenter} from \"./socketCenter\";\nimport {StateCenter} from \"./stateCenter\";\nimport {\n        ChatInfo,\n         ERRO, MessageInfo, sdkErrorList\n} from \"../zego.entity\";\nimport {ClientUtil} from \"../client-util\";\nimport {Logger} from \"../zego.logger\";\n\nexport class MessageHandler {\n        \n        private logger: Logger;\n        private socketCenter: SocketCenter;\n        private stateCenter: StateCenter;\n        \n        constructor (logger: Logger, stateCenter: StateCenter, socketCenter: SocketCenter) {\n                this.logger = logger;\n                this.socketCenter = socketCenter;\n                this.stateCenter = stateCenter;\n                \n        }\n        \n        /*\n        *    \"zb.mh.scc\": \"ZegoClient.base.MessageHandler.sendCustomCommand\",\n        */\n        sendCustomCommand (dstMembers: string[], customContent: string | Object, success: (seq: number, customContent: string) => void, error: (err: ERRO, seq: number, customContent: string) => void) {\n                this.logger.debug (\"zb.mh.scc call\");\n                \n                if (!this.stateCenter.isLogin ()) {\n                        this.logger.error (\"zb.mh.scc state error\");\n                        return false;\n                }\n                \n                if (!dstMembers || dstMembers.length == 0) {\n                        this.logger.error (\"zb.mh.scc dstMembers error\");\n                        return false;\n                }\n                const customContent_send = {\n                        from_userid: this.stateCenter.idName,\n                        from_username: this.stateCenter.nickName,\n                        custom_content: customContent || ''\n                };\n                \n                const bodyData = {\n                        \"dest_id_name\": dstMembers,\n                        \"custom_msg\": JSON.stringify (customContent_send)\n                };\n                \n                if (!ClientUtil.checkCustomCommandParam (bodyData)) {\n                        this.logger.info (\"zb.mh.scc param error\");\n                        return false;\n                }\n                \n                // 发送消息\n                this.socketCenter.registerRouter ('custommsg', msg => {\n                        this.handleSendCustomMsgRsp (msg);\n                });\n                this.socketCenter.sendCustomMessage ('custommsg', bodyData, success, error);\n                this.logger.info (\"zb.mh.scc call success\");\n                return true;\n        }\n        \n        \n        \n        /*\n        *    \"zb.mh.hscmrcall\": \"ZegoClient.base.MessageHandler.handleSendCustomMsgRsp\",\n        */\n        private handleSendCustomMsgRsp (msg: any) {\n                this.logger.debug (\"zb.mh.hscmrcall\");\n                const sendDataNode = this.stateCenter.sendDataMap[msg.header.seq];\n                let sendData;\n                if (sendDataNode != null) {\n                        sendData = sendDataNode._data;\n                        if (sendData.data.header.cmd != \"custommsg\") {\n                                this.logger.error (\"zb.mh.hscmrcmd wrong\" + sendData.data.header.cmd);\n                        } else {\n                                if (msg.body.err_code === 0) {\n                                        if (sendData.success != null) {\n                                                sendData.success (msg.header.seq, sendData.data.body.custom_msg);\n                                        }\n                                } else {\n                                        if (sendData.error != null) {\n                                                sendData.error (ClientUtil.getServerError (msg.body.err_code), msg.header.seq, sendData.data.body.custom_msg);\n                                        }\n                                }\n                        }\n                        \n                        delete this.stateCenter.sendDataMap[msg.header.seq];\n                        this.stateCenter.sendDataList.remove (sendDataNode);\n                } else {\n                        this.logger.error ('zb.mh.hscmrno found seq=' + msg.header.seq);\n                }\n                this.logger.debug (\"zb.mh.hscmr  call success\");\n        }\n        \n        \n        \n        \n        /*\n       *    \"zb.mh.hpcm\": \"ZegoClient.base.MessageHandler.handlePushCustomMsg\",\n       */\n        handlePushCustomMsg (msg) {\n                const submsg = JSON.parse (msg.body.custommsg);\n                this.logger.debug (\"zb.mh.hpcm submsg=\", submsg);\n                this.onRecvCustomCommand (submsg.from_userid, submsg.from_username, submsg.custom_content);\n        }\n        \n        onRecvCustomCommand (from_userid: string, from_idname: string, custom_content: string) {\n        }\n        \n        \n        /*\n        *    \"zb.mh.srm\": \"ZegoClient.base.MessageHandler.sendRoomMsg\",\n        */\n        sendRoomMsg (msg_category, msg_type, msg_content, success, error) {\n                \n                this.logger.debug (\"zb.mh.srm call\");\n                \n                // 不是处于登录状态\n                if (!this.stateCenter.isLogin ()) {\n                        this.logger.error (\"zb.mh.srm state error\");\n                        return;\n                }\n                \n                let timestamp = Date.parse (new Date () + '');\n                if (this.stateCenter.sendRoomMsgTime > 0 && this.stateCenter.sendRoomMsgTime + this.stateCenter.SendRoomMsgInterval > timestamp) {\n                        this.logger.info (\"zb.mh.srm freq error\");\n                        if (error) {\n                                error (sdkErrorList.FREQ_LIMITED, 0, msg_category, msg_type, msg_content);\n                        }\n                        return;\n                }\n                \n                \n                this.stateCenter.sendRoomMsgTime = timestamp;\n                this.logger.debug (\"zb.mh.srm send fetch request\");\n                let bodyData = {\n                        \"msg_category\": msg_category,\n                        \"msg_type\": msg_type,\n                        \"msg_content\": msg_content,\n                };\n                \n                // 发送消息\n                this.socketCenter.registerRouter ('im_chat', msg => {\n                        this.handleSendRoomMsgRsp (msg)\n                });\n                this.socketCenter.sendCustomMessage ('im_chat', bodyData, success, error);\n                this.logger.info (\"zb.mh.srm call success\");\n        }\n        \n        \n        \n        /*\n       *    \"zb.mh.hsrmr\": \"ZegoClient.base.MessageHandler.handleSendRoomMsgRsp\",\n       */\n        handleSendRoomMsgRsp (msg) {\n                this.logger.debug (\"zb.mh.hsrmr call\");\n                const sendDataNode = this.stateCenter.sendDataMap[msg.header.seq];\n                let sendData;\n                \n                if (sendDataNode != null) {\n                        sendData = sendDataNode._data;\n                        \n                        if (sendData.data.header.cmd != \"im_chat\") {\n                                this.logger.error (\"zb.mh.hsrmr cmd wrong\" + sendData.data.header.cmd);\n                        } else {\n                                if (msg.body.err_code === 0) {\n                                        if (sendData.success) {\n                                                sendData.success (msg.header.seq, msg.body.msg_id, sendData.data.body.msg_category, sendData.data.body.msg_type, sendData.data.body.msg_content);\n                                        }\n                                } else {\n                                        if (sendData.error) {\n                                                sendData.error (ClientUtil.getServerError (msg.body.err_code), msg.header.seq, sendData.data.body.msg_category, sendData.data.body.msg_type, sendData.data.body.msg_content);\n                                        }\n                                }\n                        }\n                        \n                        delete this.stateCenter.sendDataMap[msg.header.seq];\n                        this.stateCenter.sendDataList.remove (sendDataNode);\n                } else {\n                        this.logger.error ('hzb.mh.hsrmr no found seq=' + msg.header.seq);\n                }\n                this.logger.info (\"zb.mh.hsrmr call success\");\n        }\n        \n        \n        onRecvRoomMsg (chat_data: ChatInfo[], server_msg_id: number, ret_msg_id: number) {\n        }\n        \n        \n        /*\n      *    \"zb.mh.srirm\": \"ZegoClient.base.MessageHandler.sendReliableMessage\",\n      */\n        sendReliableMessage (type: string, data: string, success: (seq: number) => void, error: (err: ERRO, seq: number) => void) {\n                \n                this.logger.debug (\"zb.mh.srirm call\");\n                \n                if (this.stateCenter.transSeqMap[type]) {\n                        delete this.stateCenter.transSeqMap[type];\n                }\n                \n                this.stateCenter.transSeqMap[type] = {\n                        seq: 0\n                };\n                \n                const body = {\n                        \"trans_type\": type,\n                        \"trans_data\": data\n                };\n                \n                this.socketCenter.sendMessage (\"trans\", body, success, error);\n        }\n        \n        /*\n        *    \"zb.mh.sbim\": \"ZegoClient.base.MessageHandler.sendBigRoomMessage\",\n       */\n        sendBigRoomMessage (type: 1 | 2, category: 1 | 2 | 3, content: string, success: (seq: number, messageId: string) => void, error: (err: ERRO, seq: number) => void) {\n                this.logger.debug (\"zb.mh.sbim call\");\n                \n                const timeWindow = this.stateCenter.bigimTimeWindow;\n                const offset = this.stateCenter.serverTimeOffset;\n                const serverTime = (new Date ()).getTime () + offset;\n                \n                const clientId = (++this.stateCenter.cmdSeq).toString ();\n                \n                if (success == undefined) {\n                        success = null;\n                }\n                if (error == undefined) {\n                        error = null;\n                }\n                \n                this.stateCenter.bigImCallbackMap[clientId] = {\n                        success: success,\n                        error: error\n                };\n                \n                if (timeWindow == 0) {\n                        const bodyData = {\n                                \"msg_category\": category,\n                                \"msg_type\": type,\n                                \"msg_content\": content,\n                                \"bigmsg_client_id\": clientId\n                        };\n                        \n                        this.logger.debug (\"zb.mh.sbim no time window\");\n                        \n                        this.sendBigRoomMessageInternal ([bodyData], msg => {\n                                this.handleBigImMsgRsp (msg);\n                        }, error);\n                }\n                else {\n                        const currentIndex = Math.floor (serverTime / timeWindow);\n                        this.logger.debug (\"currentIndex \" + currentIndex + \" lastTimeIndex \" + this.stateCenter.bigImLastTimeIndex);\n                        \n                        if (this.stateCenter.bigImLastTimeIndex < currentIndex && this.stateCenter.bigImMessageList.length == 0) {\n                                this.stateCenter.bigImLastTimeIndex = currentIndex;\n                                \n                                const oneData = {\n                                        \"msg_category\": category,\n                                        \"msg_type\": type,\n                                        \"msg_content\": content,\n                                        \"bigmsg_client_id\": clientId\n                                };\n                                \n                                this.sendBigRoomMessageInternal ([oneData], msg => {\n                                        this.handleBigImMsgRsp (msg);\n                                }, error);\n                        }\n                        else {\n                                this.stateCenter.bigImMessageList.push ({\n                                        msg_category: category,\n                                        msg_type: type,\n                                        msg_content: content,\n                                        bigmsg_client_id: clientId\n                                });\n                                \n                                if (this.stateCenter.bigImMessageList.length == 1) {\n                                        this.setBigImTimer (offset, timeWindow);\n                                }\n                        }\n                }\n        }\n        \n        \n       \n        \n        /*\n        *    \"zb.mh.hpmmnot\": \"ZegoClient.base.MessageHandler.handlePushMergeMsg\",\n        */\n        handlePushMergeMsg (msg) {\n                if (!this.stateCenter.isLogin ()) {\n                        this.logger.error (\"zb.mh.hpmmnot login\");\n                        return;\n                }\n                \n                for (let i = 0; i < msg.body.messages.length; i++) {\n                        if (msg.body.messages[i].sub_cmd === 14001) {\n                                this.handlePushBigRooMsg (msg.body.messages[i].msg_body);\n                        }\n                }\n                \n                this.logger.debug (\"zb.mh.hpmm call success\");\n        }\n        \n        \n        /*\n        *    \"zb.mh.hpbrm\": \"ZegoClient.base.MessageHandler.handlePushBigRooMsg\",\n        */\n        handlePushBigRooMsg (bodyString) {\n                let messageBody;\n                //messageBody json\n                try {\n                        messageBody = JSON.parse (bodyString);\n                } catch (e) {\n                        this.logger.warn (\"zb.mh.hpbrm parse json error\");\n                        return;\n                }\n                \n                if (!messageBody) {\n                        this.logger.warn (\"zb.mh.hpbrm cann't find message body\");\n                        return;\n                }\n                \n                const roomId = messageBody.room_id;\n                const pushData = [];\n                for (let i = 0; i < messageBody.msg_data.length; i++) {\n                        const message = messageBody.msg_data[i];\n                        const idName = message.id_name;\n                        if (idName == this.stateCenter.idName) {\n                                this.logger.debug (\"zb.mh.hpbrm self message\");\n                                continue;\n                        }\n                        pushData.push ({\n                                idName: message.id_name,\n                                nickName: message.nick_name,\n                                messageId: message.bigmsg_id,\n                                category: message.msg_category,\n                                type: message.msg_type,\n                                content: message.msg_content,\n                                time: message.send_time\n                        });\n                }\n                \n                if (pushData.length == 0) {\n                        this.logger.debug (\"zb.mh.hpbrm no other pushData except self\");\n                } else {\n                        this.onRecvBigRoomMessage (pushData, roomId);\n                }\n                \n                this.logger.debug (\"zb.mh.hpbrm call success\");\n        }\n        \n        \n        onRecvBigRoomMessage (messageList: MessageInfo[], roomId: string) {\n        }\n        \n    \n        \n        /*\n       *    \"zb.mh.sbim\": \"ZegoClient.base.MessageHandler.sendBigRoomMessageInternal\",\n       */\n        sendBigRoomMessageInternal (msgs, success, error) {\n                this.logger.debug (\"zb.mh.sbim call\");\n                \n                const bodyData = {\n                        \"msgs\": msgs\n                };\n                \n                this.socketCenter.sendMessage (\"bigim_chat\", bodyData, success, error);\n        }\n        \n        \n      \n        \n        /*\n         *    \"zb.mh.hbmr\": \"ZegoClient.base.MessageHandler.handleBigImMsgRsp\",\n         */\n        handleBigImMsgRsp (msg) {\n                if (!this.stateCenter.isLogin ()) {\n                        this.logger.info (\"zb.mh.hbmr not login\");\n                        return;\n                }\n                \n                if (this.stateCenter.bigimTimeWindow != msg.body.bigim_time_window) {\n                        this.stateCenter.bigimTimeWindow = msg.body.bigim_time_window;\n                }\n                \n                for (let i = 0; i < msg.body.msgs.length; i++) {\n                        const clientId = msg.body.msgs[i].bigmsg_client_id;\n                        const msgId = msg.body.msgs[i].bigmsg_id;\n                        if (this.stateCenter.bigImCallbackMap[clientId]) {\n                                const success = this.stateCenter.bigImCallbackMap[clientId].success;\n                                if (success != null) {\n                                        success (msg.header.seq, msgId);\n                                }\n                                \n                                delete this.stateCenter.bigImCallbackMap[clientId];\n                        }\n                }\n        }\n        \n        \n        \n        /*\n         *    \"zb.mh.sbt\": \"ZegoClient.base.MessageHandler.setBigImTimer\",\n         */\n        setBigImTimer (offset: number, timeWindow: number) {\n                const serverTimestamp = (new Date ()).getTime () + offset;\n                const residue = timeWindow - (serverTimestamp % timeWindow);\n                const interval = ClientUtil.generateRandumNumber (timeWindow) + residue;\n                \n                this.logger.info (\"zb.mh.sbt setTimer \" + interval);\n                \n                this.stateCenter.bigImTimer = setTimeout (() => {\n                        this.onBigImTimer ();\n                }, interval);\n        }\n        \n        \n       \n        onBigImTimer () {\n                const serverTimestamp = (new Date ()).getTime () + this.stateCenter.serverTimeOffset;\n                this.stateCenter.bigImLastTimeIndex = Math.floor (serverTimestamp / this.stateCenter.bigimTimeWindow);\n                \n                const bodyData = [];\n                const requestList = [];\n                for (let i = 0; i < this.stateCenter.bigImMessageList.length; i++) {\n                        if (i >= 20) {\n                                break;\n                        }\n                        \n                        const info = this.stateCenter.bigImMessageList[i];\n                        bodyData.push ({\n                                \"msg_category\": info.msg_category,\n                                \"msg_type\": info.msg_type,\n                                \"msg_content\": info.msg_content,\n                                \"bigmsg_client_id\": info.bigmsg_client_id\n                        });\n                        \n                        requestList.push (info.bigmsg_client_id);\n                }\n                \n                if (this.stateCenter.bigImMessageList.length > 20) {\n                        this.stateCenter.bigImMessageList.splice (0, 20);\n                } else {\n                        this.stateCenter.bigImMessageList = [];\n                }\n                \n                this.sendBigRoomMessageInternal (bodyData, msg => {\n                        this.handleBigImMsgRsp (msg)\n                }, (err: Error, seq: number) => {\n                        for (let i = 0; i < requestList.length; i++) {\n                                const clientId = requestList[i];\n                                const callbackInfo = this.stateCenter.bigImCallbackMap[clientId];\n                                if (callbackInfo) {\n                                        if (callbackInfo.error != null) {\n                                                callbackInfo.error (err, seq);\n                                        }\n                                        \n                                        delete this.stateCenter.bigImCallbackMap[clientId];\n                                }\n                        }\n                });\n                \n                clearTimeout (this.stateCenter.bigImTimer);\n                this.stateCenter.bigImTimer = null;\n                \n                if (this.stateCenter.bigImMessageList.length > 0) {\n                        this.setBigImTimer (this.stateCenter.serverTimeOffset, this.stateCenter.bigimTimeWindow);\n                }\n        }\n        \n        \n        \n        /*\n        *    \"zb.mh.srlm\": \"ZegoClient.base.MessageHandler.sendRelayMessage\",\n        */\n        sendRelayMessage (type: string, data: string, success: (seq: number) => void, error: (err: ERRO, seq: number) => void) {\n                \n                this.logger.debug (\"zb.mh.srm call\");\n                \n                const timeWindow = this.stateCenter.datiTimeWindow;\n                const offset = this.stateCenter.serverTimeOffset;\n                if (timeWindow > 0) {\n                        this.stateCenter.realyMessageList.push ({\n                                type: type,\n                                data: data,\n                                success: success,\n                                error: error\n                        });\n                        if (this.stateCenter.realyMessageList.length == 1) {\n                                this.setRelayTimer (offset, timeWindow);\n                        }\n                } else {\n                        this.sendRelayMessageInternal (type, data, success, error);\n                }\n        }\n        \n        \n        \n        \n        /*\n       *    \"zb.mh.srlmi\": \"ZegoClient.base.MessageHandler.sendRelayMessageInternal\",\n       */\n        sendRelayMessageInternal (type, data, success, error) {\n                this.logger.debug (\"zb.mh.srmi call\");\n                \n                const bodyData = {\n                        \"relay_type\": type,\n                        \"relay_data\": data\n                };\n                \n                this.socketCenter.sendMessage (\"relay\", bodyData, success, error);\n        }\n        \n        \n        \n        \n        /*\n      *    \"zb.mh.srt\": \"ZegoClient.base.MessageHandler.setRelayTimer\",\n      */\n        setRelayTimer (offset: number, timeWindow: number) {\n                const serverTimestamp = (new Date ()).getTime () + offset;\n                const residue = timeWindow * 2 - (serverTimestamp % timeWindow);\n                const interval = ClientUtil.generateRandumNumber (residue);\n                \n                this.logger.info (\"zb.mh.srt setTimer \" + interval);\n                \n                this.stateCenter.relayTimer = setTimeout (() => {\n                        this.onRelayTimer ();\n                }, interval);\n        }\n        \n        \n        \n        /*\n        *    \"zb.mh.ort\": \"ZegoClient.base.MessageHandler.onRelayTimer\",\n        */\n        onRelayTimer () {\n                if (this.stateCenter.realyMessageList.length == 0) {\n                        this.logger.info (\"zb.mh.ort no relay data\");\n                        return;\n                }\n                \n                const relayInfo = this.stateCenter.realyMessageList[0];\n                this.sendRelayMessageInternal (relayInfo.type, relayInfo.data, relayInfo.success, relayInfo.error);\n                \n                clearTimeout (this.stateCenter.relayTimer);\n                this.stateCenter.relayTimer = null;\n                \n                this.stateCenter.realyMessageList.splice (0, 1);\n                if (this.stateCenter.realyMessageList.length > 0) {\n                        this.setRelayTimer (this.stateCenter.serverTimeOffset, this.stateCenter.datiTimeWindow);\n                }\n        }\n        \n        \n        \n        /*\n       *    \"zb.mh.hptr\": \"ZegoClient.base.MessageHandler.handlePushTransMsg\",\n       */\n        handlePushTransMsg (msg) {\n                if (!this.stateCenter.isLogin ()) {\n                        this.logger.error (\"zb.mh.hptr not login\");\n                        return;\n                }\n                \n                const type = msg.body.trans_type;\n                const seq = msg.body.trans_seq;\n                if (!this.stateCenter.transSeqMap[type]) {\n                        this.stateCenter.transSeqMap[type] = {\n                                seq: seq\n                        };\n                } else {\n                        this.stateCenter.transSeqMap[type].seq = seq;\n                }\n                \n                if (msg.body.trans_user_idname != this.stateCenter.idName) {\n                        this.onRecvReliableMessage (type, seq, msg.body.trans_data);\n                } else {\n                        this.logger.debug (\"zb.mh.hptr receive self trans message\");\n                }\n                this.logger.info (\"zb.mh.hptr trans \" + type + \" seq \" + seq);\n        }\n        \n        onRecvReliableMessage (type: string, seq: number, data: String) {\n        }\n        \n        \n}\n","import {SocketCenter} from \"./socketCenter\";\nimport {\n        ENUM_PUBLISH_STREAM_STATE,\n        ENUM_STREAM_SUB_CMD, LinkedList,\n        MINIUM_HEARTBEAT_INTERVAL,\n        sdkErrorList\n} from \"../zego.entity\";\nimport {ClientUtil} from \"../client-util\";\nimport {StateCenter} from \"./stateCenter\";\nimport {Logger} from \"../zego.logger\";\n\nconst MAX_TRY_HEARTBEAT_COUNT = 3; //最大心跳尝试次数\n\nexport class HeartBeatHandler {\n        \n        private logger: Logger;\n        private socketCenter: SocketCenter;\n        private stateCenter: StateCenter;\n        \n        \n        constructor (logger: Logger, stateCenter: StateCenter, socketCenter: SocketCenter) {\n                this.logger = logger;\n                this.socketCenter = socketCenter;\n                this.stateCenter = stateCenter;\n                \n        }\n        \n        \n        resetHeartbeat () {\n                this.logger.debug (\"zb.hb.rht call\");\n                clearTimeout (this.stateCenter.heartbeatTimer);\n                this.stateCenter.heartbeatTimer = null;\n                this.stateCenter.tryHeartbeatCount = 0;\n                this.logger.debug (\"zb.hb.rht call success\");\n        }\n        \n        \n        //空实现 ，logincenter覆盖\n        hbLogout (err: { code: string, msg: string }) {\n        \n        }\n        \n        start (heartbeatInterval: number) {\n                \n                this.logger.debug (\"zb.hb.sht call\");\n                \n                // 若当前不是处于login登录状态，则返回不做心跳\n                if (!this.stateCenter.isLogin ()) {\n                        this.logger.error (\"zb.hb.sht state error\");\n                        return;\n                }\n                \n                // 若尝试心跳次数大于最大尝试次数，则置为登出状态，清除状态数据\n                if (++this.stateCenter.tryHeartbeatCount > MAX_TRY_HEARTBEAT_COUNT) {\n                        this.logger.error (\"zb.hb.sht come to try limit\");\n                        this.hbLogout (sdkErrorList.HEARTBEAT_TIMEOUT);\n                        return;\n                }\n                \n                // 发送消息\n                this.logger.debug (\"zb.hb.sht send packet\");\n                let bodyData = {\n                        \"reserve\": 0\n                };\n                this.socketCenter.registerRouter ('hb', (msg) => {\n                        this.handleHeartbeatRsp (msg)\n                });\n                this.socketCenter.sendMessage ('hb', bodyData);\n                \n                \n                this.logger.debug (\"zb.hb.sht call success\");\n                \n                this.stateCenter.heartbeatInterval = heartbeatInterval;\n                \n                // heartbeatInterval后再发\n                this.stateCenter.heartbeatTimer = setTimeout (() => {\n                        this.start (this.stateCenter.heartbeatInterval);\n                }, this.stateCenter.heartbeatInterval);\n        }\n        \n        \n        /*\n        *    \"hhbr.0\": \"ZegoClient.handleHeartbeatRsp\",\n        */\n        private handleHeartbeatRsp (msg) {\n                \n                this.logger.debug (\"zb.hb.hhbr call\");\n                \n                if (msg.body.err_code !== 0) {\n                        this.logger.error (\"zb.hb.hhbr call disconnect, server error=\", msg.body.err_code);\n                        this.hbLogout (ClientUtil.getServerError (msg.body.err_code));\n                        return;\n                }\n                \n                //reset heartbeat fail count\n                this.stateCenter.tryHeartbeatCount = 0;\n                this.stateCenter.heartbeatInterval = msg.body.hearbeat_interval;\n                if (this.stateCenter.heartbeatInterval < MINIUM_HEARTBEAT_INTERVAL) {\n                        this.stateCenter.heartbeatInterval = MINIUM_HEARTBEAT_INTERVAL;\n                }\n                \n                //update timewindow\n                if (msg.body.bigim_time_window && typeof msg.body.bigim_time_window == \"number\") {\n                        this.stateCenter.bigimTimeWindow = msg.body.bigim_time_window;\n                }\n                if (msg.body.dati_time_window && typeof msg.body.dati_time_window == \"number\") {\n                        this.stateCenter.datiTimeWindow = msg.body.dati_time_window;\n                }\n                \n                \n                this.ReliableMessageHandler (msg);\n                \n                //update stream if diff/\n                this.fetchStreamList(msg);\n                \n                //update user if diff\n                if (msg.body.server_user_seq !== this.stateCenter.userSeq && this.stateCenter.userStateUpdate) {\n                        this.logger.info (\"zb.hb.hhbr call update user \" + msg.body.server_user_seq, this.stateCenter.userSeq);\n                        this.fetchUserList ();\n                }\n                \n                //try updating stream info again\n                for (let streamid in this.stateCenter.publishStreamList) {\n                        if (this.stateCenter.publishStreamList[streamid].state == ENUM_PUBLISH_STREAM_STATE.update_info) {\n                                this.logger.info (\"zb.hb.hhbr try to update stream info\");\n                                this.updateStreamInfo (streamid, ENUM_STREAM_SUB_CMD.liveBegin, this.stateCenter.publishStreamList[streamid].extra_info);\n                        }\n                }\n                \n                //get online count\n                if (msg.body.online_count != undefined && msg.body.online_count != 0) {\n                        this.onUpdateOnlineCount (this.stateCenter.roomid, msg.body.online_count);\n                }\n                \n                this.logger.debug (\"zb.hb.hhbr call success\");\n        }\n        \n        \n        ReliableMessageHandler (msg: any) {\n                //check trans seq\n                if (msg.body.trans_seqs) {\n                        \n                        for (let i = 0; i < msg.body.trans_seqs.length; i++) {\n                                let type = msg.body.trans_seqs[i].trans_type;\n                                let seq = msg.body.trans_seqs[i].trans_seq;\n                                if (!this.stateCenter.transSeqMap[type] || this.stateCenter.transSeqMap[type].seq !== seq) {\n                                        //fetch trans\n                                        let oldSeq = 0;\n                                        if (!this.stateCenter.transSeqMap[type]) {\n                                                oldSeq = 0;\n                                                this.logger.debug (\"zb.hb.rmh type \" + type + \" server seq \" + seq);\n                                        } else {\n                                                oldSeq = this.stateCenter.transSeqMap[type].seq;\n                                                this.logger.debug (\"zb.hb.rmh type \" + type + \" old seq \" + this.stateCenter.transSeqMap[type].seq + \" server seq \" + seq);\n                                        }\n                                        \n                                        this.fetchReliableMessage (type, oldSeq);\n                                }\n                        }\n                        \n                }\n        }\n        \n        /*\n         *    \"frm.0\": \"ZegoClient.fetchReliableMessage\",拉取可靠业务广播\n         */\n        private fetchReliableMessage (type: string, localSeq: number) {\n                this.logger.debug (\"zb.hb.frm call\");\n                \n                let data = {\n                        \"trans_type\": type,\n                        \"trans_local_seq\": localSeq\n                };\n                this.socketCenter.registerRouter ('trans_fetch', msg => {\n                        this.handleFetchTransRsp (msg)\n                });\n                this.socketCenter.sendMessage (\"trans_fetch\", data);\n                this.logger.debug (\"zb.hb.frm call success\");\n        }\n        \n        \n        //fetch trans 回包\n        private handleFetchTransRsp (msg: any) {\n                \n                if (!this.stateCenter.isLogin ()) {\n                        this.logger.error (\"zb.hb.hftr not login\");\n                        return;\n                }\n                \n                if (msg.body.err_code != 0) {\n                        this.logger.error (\"zb.hb.hftr trans send error \" + msg.body.err_code);\n                        return;\n                }\n                \n                let type = msg.body.trans_type;\n                let seq = msg.body.trans_seq;\n                \n                this.stateCenter.transSeqMap[type] = {\n                        seq: seq\n                };\n                \n                if (msg.body.trans_user_idname != this.stateCenter.idName) {\n                        this.onRecvReliableMessage (type, seq, msg.body.trans_data);\n                }\n                \n                this.logger.debug (\"zb.hb.hftr trans \" + type + \" seq \" + seq);\n        }\n        \n        \n        /*\n         *    \"fsl.0\": \"ZegoClient.fetchStreamList\",拉取服务端流信息\n         */\n        private fetchStreamList (msg) {\n                //update stream if diff/\n                if (msg.body.stream_seq === this.stateCenter.streamSeq) return;\n                \n                this.logger.debug (\"zb.hb.fsl current seq \" + this.stateCenter.streamSeq + \" server Seq \" + msg.body.stream_seq);\n                \n                \n                this.logger.debug (\"zb.hb.fsl call\");\n                \n                // 不是处于登录状态，不让拉流\n                if (!this.stateCenter.isLogin ()) {\n                        this.logger.error (\"zb.hb.fsl state error\");\n                        return;\n                }\n                \n                // 是否正处于拉流状态 false 为完成， true为正在拉流\n                if (this.stateCenter.streamQuerying) {\n                        this.logger.warn (\"zb.hb.fsl already doing\");\n                        return;\n                }\n                this.stateCenter.streamQuerying = true;\n                this.logger.debug (\"zb.hb.fsl send fetch request\");\n                // 发送消息\n                this.socketCenter.registerRouter ('stream_info', msg => {\n                        this.handleFetchStreamListRsp (msg)\n                })\n                this.socketCenter.sendMessage ('stream_info', {\n                        \"reserve\": 0\n                });\n                this.logger.debug (\"zb.hb.fsl call success\");\n        }\n        \n        //空实现 被覆盖\n        handleFetchStreamListRsp (msg: any) {\n        \n        }\n        \n        //空实现 被覆盖\n        fetchUserList () {\n        \n        }\n        \n        //流更新信令  退出上次推的自己的流\n        updateStreamInfo (streamid: string, cmd: string | number, stream_extra_info: string = '', error?: Function) {\n        }\n        \n        //空实现 被sdk覆盖\n        onUpdateOnlineCount (roomId: string, userCount: number) {\n        }\n        \n        //空实现 被sdk覆盖了\n        onRecvReliableMessage (type: string, seq: number, data: String) {\n        \n        }\n        \n        \n        \n        resetCheckMessage () {\n                this.logger.debug (\"zb.hb.rcm call\");\n                \n                clearTimeout (this.stateCenter.sendDataCheckTimer);\n                this.stateCenter.sendDataCheckTimer = null;\n                \n                this.checkSendMessageList (this.stateCenter.sendDataList);\n                this.checkSendMessageList (this.stateCenter.sendCommandList);\n                \n                this.stateCenter.sendDataMap = {};\n                this.stateCenter.sendCommandMap = {};\n                \n                this.logger.debug (\"zb.hb.rcm call success\");\n        }\n        \n        \n        private checkSendMessageList (messageList: LinkedList) {\n                let head = messageList.getFirst ();\n                while (head != null) {\n                        messageList.remove (head);\n                        if (head._data.error) {\n                                if (head._data.data.body.custom_msg) {\n                                        head._data.error (sdkErrorList.SEND_MSG_TIMEOUT,\n                                                    head._data.data.header.seq,\n                                                    head._data.data.body.custom_msg);\n                                } else {\n                                        head._data.error (sdkErrorList.SEND_MSG_TIMEOUT,\n                                                    head._data.data.header.seq);\n                                }\n                        }\n                        head = messageList.getFirst ();\n                }\n        }\n        \n        protected checkMessageListTimeout (messageList: LinkedList, messageMap: { [index: number]: any }) {\n                let head = messageList.getFirst ();\n                let timestamp = Date.parse (new Date () + '');\n                let checkCount = 0;\n                let timeoutMsgCount = 0;\n                let dropMsgCount = 0;\n                \n                while (head != null) {\n                        if ((head._data.time + this.stateCenter.sendDataTimeout) > timestamp) {\n                                break;\n                        }\n                        \n                        delete messageMap[head._data.data.header.seq];\n                        messageList.remove (head);\n                        ++timeoutMsgCount;\n                        \n                        if (head._data.error == null || (this.stateCenter.sendDataDropTimeout > 0 && (head._data.time + this.stateCenter.sendDataDropTimeout) < timestamp)) {\n                                ++dropMsgCount;\n                        } else {\n                                if (head._data.data.body.custom_msg) {\n                                        head._data.error (sdkErrorList.SEND_MSG_TIMEOUT,\n                                                    head._data.data.header.seq,\n                                                    head._data.data.body.custom_msg);\n                                } else {\n                                        head._data.error (sdkErrorList.SEND_MSG_TIMEOUT,\n                                                    head._data.data.header.seq);\n                                }\n                        }\n                        \n                        ++checkCount;\n                        if (checkCount >= this.stateCenter.sendDataCheckOnceCount) {\n                                break;\n                        }\n                        head = messageList.getFirst ();\n                }\n                \n                if (timeoutMsgCount != 0 || dropMsgCount != 0) {\n                        this.logger.debug (\"zb.hb.cmt call success, stat: timeout=\", timeoutMsgCount, \"drop=\", dropMsgCount);\n                }\n        }\n        \n        /*\n         *    \"scmt.0\": \"ZegoClient.startCheckMessageTimeout\",\n         */\n        \n        //检查custommsg发送包是否超时\n        startCheckMessageTimeout () {\n                //this.logger.debug(\"scmt.0 call\");\n                if (!this.stateCenter.isLogin ()) {\n                        this.logger.error (\"zb.hb.scmt state error\");\n                        return;\n                }\n                \n                this.checkMessageListTimeout (this.stateCenter.sendDataList, this.stateCenter.sendDataMap);\n                this.checkMessageListTimeout (this.stateCenter.sendCommandList, this.stateCenter.sendCommandMap);\n                \n                this.stateCenter.sendDataCheckTimer = setTimeout (() => {\n                        this.startCheckMessageTimeout ();\n                }, this.stateCenter.sendDataCheckInterval);\n                \n        }\n}\n","import {SocketCenter} from \"./socketCenter\";\nimport {StateCenter} from \"./stateCenter\";\nimport {\n        ENUM_PUBLISH_STREAM_STATE,\n        ENUM_RUN_STATE,\n        ENUM_STREAM_SUB_CMD,\n        ENUM_STREAM_UPDATE_CMD,\n        ENUM_STREAM_UPDATE_TYPE, MIXSTREAM_ERROR_CODE, PROTO_VERSION\n} from \"../zego.entity\";\nimport {ClientUtil} from \"../client-util\";\nimport {Logger} from \"../zego.logger\";\n\nexport class StreamHandler {\n        \n        private logger: Logger;\n        private socketCenter: SocketCenter;\n        private stateCenter: StateCenter;\n        \n        constructor (logger: Logger, stateCenter: StateCenter, socketCenter: SocketCenter) {\n                this.logger = logger;\n                this.socketCenter = socketCenter;\n                this.stateCenter = stateCenter;\n                \n        }\n        \n        \n        //空实现 被sdk覆盖\n        setCDNInfo (streamInfo: { urls_flv: string, urls_hls: string, urls_rtmp: string },\n                    streamItem: { urls_flv: string, urls_m3u8: string, urls_rtmp: string }) {\n        }\n        \n        //空实现 被sdk覆盖\n        onStreamUpdated (type: number, streamList: any[]) {\n        }\n        \n        //空实现 被sdk覆盖\n        onStreamExtraInfoUpdated (streamList: any[]) {\n        }\n        \n        /*\n        *    \"zb.sh.hss\": \"ZegoClient.base.StreamHandler.handleStreamStart\",\n         */\n        handleStreamStart (lastRunState: number, msg: any) {\n                \n                this.stateCenter.streamQuerying = false;\n                this.socketCenter.registerRouter ('stream', msg => {\n                        this.handleStreamUpdateRsp (msg)\n                });\n                this.socketCenter.registerRouter ('push_stream_update', msg => {\n                        this.handlePushStreamUpdateMsg (msg)\n                });\n                \n                if (lastRunState == ENUM_RUN_STATE.login) {\n                        this.logger.info (\"zb.sh.hss recover from disconnect so call streamupdate\");\n                        //relogin and stream update callback\n                        this.handleFullUpdateStream (msg.body.stream_seq, msg.body.stream_info || []);\n                        \n                } else {\n                        this.logger.info (\"zb.sh.hss success callback user\");\n                        //login and callback\n                        this.stateCenter.streamList = (msg.body.stream_info || []);\n                        this.stateCenter.streamSeq = msg.body.stream_seq;\n                        \n                        for (let i = 0; i < this.stateCenter.streamList.length; i++) {\n                                //check whether stream contain self\n                                if (this.stateCenter.streamList[i].anchor_id_name == this.stateCenter.idName) {\n                                        //delete this stream\n                                        \n                                        this.updateStreamInfo (this.stateCenter.streamList[i].stream_id, ENUM_STREAM_SUB_CMD.liveEnd);\n                                        this.stateCenter.streamList.splice (i, 1);\n                                }\n                        }\n                        \n                        let callbackStreamList = this.makeCallbackStreamList (this.stateCenter.streamList);\n                        ClientUtil.actionSuccessCallback ('login', this.stateCenter.callbackList) (callbackStreamList);\n                        \n                }\n        }\n        \n        //空实现 被sdk覆盖\n        onPublishStateUpdate (type: number, streamId: string, error: { code: string, msg: string } | number) {\n        }\n        \n        /*\n       *    \"zb.sh.usi\": \"ZegoClient.base.StreamHandler.updateStreamInfo\",\n       */\n        //流更新信令  退出上次推的自己的流\n        updateStreamInfo (streamid: string, cmd: string | number, stream_extra_info: string = '', error?: Function) {\n                this.logger.debug (\"zb.sh.usi call\");\n                \n                let extra_info = stream_extra_info;\n                \n                \n                let data = {\n                        \"stream_id\": streamid,\n                        \"extra_info\": extra_info\n                };\n                \n                let stream_msg = JSON.stringify (data);\n                let bodyData = {\n                        \"sub_cmd\": cmd,\n                        \"stream_msg\": stream_msg\n                };\n                this.socketCenter.registerRouter ('stream', msg => {\n                        this.handleStreamUpdateRsp (msg)\n                });\n                this.socketCenter.sendMessage (\"stream\", bodyData, undefined, error);\n                this.logger.info (\"zb.sh.usi call success cmd \" + cmd);\n        }\n        \n        /*\n       *    \"zb.sh.hsur\": \"ZegoClient.base.StreamHandler.handleStreamUpdateRsp\",\n       */\n        //流更新回包\n        handleStreamUpdateRsp (msg) {\n                if (!this.stateCenter.isLogin ()) {\n                        this.logger.error (\"zb.sh.hsur not login\");\n                        return;\n                }\n                \n                if (msg.body.err_code != 0) {\n                        this.logger.error (\"zb.sh.hsur stream update error \" + msg.body.err_code);\n                        return;\n                }\n                \n                this.logger.debug (\"zb.sh.hsur stream seq \" + this.stateCenter.streamSeq + \" server seq \" + msg.body.stream_seq);\n                this.stateCenter.streamSeq = msg.body.stream_seq;\n                \n                //流删除时，publishStreamList已经删除了\n                for (let i = 0; i < msg.body.stream_info.length; i++) {\n                        let streamid = msg.body.stream_info[i].stream_id;\n                        if (!this.stateCenter.publishStreamList[streamid]) {\n                                this.logger.info (\"hsur.0 stream is not exist\");\n                                return;\n                        }\n                        \n                        if (this.stateCenter.publishStreamList[streamid].state == ENUM_PUBLISH_STREAM_STATE.update_info) {\n                                this.stateCenter.publishStreamList[streamid].state = ENUM_PUBLISH_STREAM_STATE.publishing;\n                                this.onPublishStateUpdate (0, streamid, 0);\n                        }\n                }\n                \n        }\n        \n        \n        \n        /*\n       *    \"zb.sh.hfslr\": \"ZegoClient.base.StreamHandler.handleFetchStreamListRsp\",\n       */\n        \n        handleFetchStreamListRsp (msg: any) {\n                this.logger.debug (\"zb.sh.hfslr call\");\n                this.stateCenter.streamQuerying = false;\n                if (msg.body.err_code !== 0) {\n                        this.logger.info (\"zb.sh.hfslr server error=\", msg.body.err_code);\n                        return;\n                }\n                \n                if (this.stateCenter.streamSeq === msg.body.stream_seq) {\n                        this.logger.info (\"zb.sh.hfslr same seq\");\n                        return;\n                }\n                \n                this.handleFullUpdateStream (msg.body.stream_seq, msg.body.stream_info);\n                this.logger.debug (\"zb.sh.hfslr call success\");\n        }\n        \n        \n        /*\n        *    \"zb.sh.hfus\": \"ZegoClient.base.StreamHandler.handleFullUpdateStream\",\n       */\n        private handleFullUpdateStream (serverStreamSeq: number, serverStreamList: any[]) {\n                this.logger.debug (\"zb.sh.hfus call\");\n                this.stateCenter.streamSeq = serverStreamSeq;\n                this.logger.debug (\"zb.sh.hfus server seq \" + this.stateCenter.streamSeq);\n                \n                ClientUtil.mergeStreamList (this.logger, this.stateCenter.idName, this.stateCenter.streamList, serverStreamList, (addStreamList, delStreamList, updateStreamList: any[]) => {\n                        if (addStreamList.length !== 0) {\n                                this.logger.debug (\"zb.sh.hfus callback addstream\");\n                                this.onStreamUpdated (ENUM_STREAM_UPDATE_TYPE.added, this.makeCallbackStreamList (addStreamList));\n                        }\n                        if (delStreamList.length !== 0) {\n                                this.logger.debug (\"zb.sh.hfus callback delstream\");\n                                this.onStreamUpdated (ENUM_STREAM_UPDATE_TYPE.deleted, this.makeCallbackStreamList (delStreamList));\n                        }\n                        if (updateStreamList.length !== 0) {\n                                this.logger.debug (\"zb.sh.hfus callback updatestream\");\n                                this.onStreamExtraInfoUpdated (this.makeCallbackStreamList (updateStreamList));\n                        }\n                });\n                \n                this.logger.info (\"zb.sh.hfus call success\");\n        }\n        \n        \n        \n        /*\n        *    \"zb.sh.hpsum\": \"ZegoClient.base.StreamHandler.handlePushStreamUpdateMsg\",\n        */\n        handlePushStreamUpdateMsg (msg: any) {\n                this.logger.debug (\"zb.sh.hpsum call\");\n                if (!msg.body.stream_info || msg.body.stream_info.length === 0) {\n                        this.logger.info (\"zb.sh.hpsum, emtpy list\");\n                        return;\n                }\n                \n                if (msg.body.stream_info.length + this.stateCenter.streamSeq !== msg.body.stream_seq) {\n                        this.logger.info (\"zb.sh.hpsum call updatestream\");\n                        this.fetchStreamList ();\n                        return;\n                }\n                \n                this.stateCenter.streamSeq = msg.body.stream_seq;\n                switch (msg.body.stream_cmd) {\n                        case ENUM_STREAM_UPDATE_CMD.added:\n                                this.handleAddedStreamList (msg.body.stream_info);\n                                break;\n                        case ENUM_STREAM_UPDATE_CMD.deleted:\n                                this.handleDeletedStreamList (msg.body.stream_info);\n                                break;\n                        case ENUM_STREAM_UPDATE_CMD.updated:\n                                this.handleUpdatedStreamList (msg.body.stream_info);\n                                break;\n                }\n                this.logger.info (\"zb.sh.hpsum call success\");\n        }\n        \n        \n        /*\n       *    \"zb.sh.hasl\": \"ZegoClient.base.StreamHandler.handleAddedStreamList\",\n       */\n        private handleAddedStreamList (streamList: any[]) {\n                this.logger.debug (\"zb.sh.hasl call\");\n                let addStreamList = [];\n                let flag;\n                for (let i = 0; i < streamList.length; i++) {\n                        if (streamList[i].anchor_id_name == this.stateCenter.idName) {\n                                this.logger.debug (\"hdsl.0 have self stream added\");\n                                continue;\n                        }\n                        \n                        flag = false;\n                        for (let j = 0; j < this.stateCenter.streamList.length; j++) {\n                                if (streamList[i].stream_id === this.stateCenter.streamList[j].stream_id) {\n                                        flag = true;\n                                        break;\n                                }\n                        }\n                        if (!flag) {\n                                addStreamList.push (streamList[i]);\n                        }\n                }\n                \n                if (addStreamList.length !== 0) {\n                        this.logger.debug (\"zb.sh.hasl callback addstream\");\n                        // this.stateCenter.streamList.concat(addStreamList);\n                        for (let k = 0; k < addStreamList.length; k++) {\n                                this.stateCenter.streamList.push (addStreamList[k]);\n                        }\n                        this.onStreamUpdated (ENUM_STREAM_UPDATE_TYPE.added, this.makeCallbackStreamList (addStreamList));\n                }\n                this.logger.info (\"zb.sh.hasl call success\");\n        }\n        \n        \n        \n        /*\n         *    \"zb.sh.hdsl\": \"ZegoClient.base.StreamHandler.handleDeletedStreamList\",\n        */\n        private handleDeletedStreamList (streamList: any[]) {\n                this.logger.debug (\"zb.sh.hdsl call\");\n                let delStreamList = [];\n                for (let i = 0; i < streamList.length; i++) {\n                        if (streamList[i].anchor_id_name == this.stateCenter.idName) {\n                                this.logger.debug (\"zb.sh.hdsl have self stream deleted\");\n                                continue;\n                        }\n                        for (let j = this.stateCenter.streamList.length - 1; j >= 0; j--) {\n                                if (streamList[i].stream_id === this.stateCenter.streamList[j].stream_id) {\n                                        this.stateCenter.streamList.splice (j, 1);\n                                        delStreamList.push (streamList[i]);\n                                        break;\n                                }\n                        }\n                }\n                \n                if (delStreamList.length !== 0) {\n                        this.logger.debug (\"zb.sh.hdsl callback delstream\");\n                        this.onStreamUpdated (ENUM_STREAM_UPDATE_TYPE.deleted, this.makeCallbackStreamList (delStreamList));\n                }\n                this.logger.info (\"zb.sh.hdsl call\");\n        }\n        \n      \n        \n        /*\n         *    \"zb.sh.husl\": \"ZegoClient.base.StreamHandler.handleUpdatedStreamList\",\n        */\n        private handleUpdatedStreamList (streamList: any[]) {\n                this.logger.debug (\"zb.sh.husl call\");\n                let updateStreamList = [];\n                for (let i = 0; i < streamList.length; i++) {\n                        if (streamList[i].anchor_id_name == this.stateCenter.idName) {\n                                this.logger.debug (\"hsul.0 have self stream updated\");\n                                continue;\n                        }\n                        for (let j = 0; j < this.stateCenter.streamList.length; j++) {\n                                if (streamList[i].stream_id === this.stateCenter.streamList[j].stream_id) {\n                                        if (streamList[i].extra_info !== this.stateCenter.streamList[j].extra_info) {\n                                                this.stateCenter.streamList[j] = streamList[i];\n                                                updateStreamList.push (streamList[i]);\n                                        }\n                                        break;\n                                }\n                        }\n                }\n                \n                if (updateStreamList.length !== 0) {\n                        this.logger.debug (\"zb.sh.husl callback updatestream\");\n                        this.onStreamExtraInfoUpdated (this.makeCallbackStreamList (updateStreamList));\n                }\n                this.logger.info (\"zb.sh.husl call success\");\n        }\n        \n        \n        \n        /*\n         *    \"zb.sh.fsl\": \"ZegoClient.base.StreamHandler.fetchStreamList\",\n        */\n        // 拉取服务端流信息\n        private fetchStreamList () {\n                this.logger.debug (\"zb.sh.fsl call\");\n                // 不是处于登录状态，不让拉流\n                if (this.stateCenter.isLogin ()) {\n                        this.logger.info (\"zb.sh.fsl state error\");\n                        return;\n                }\n                \n                // 是否正处于拉流状态 false 为完成， true为正在拉流\n                if (this.stateCenter.streamQuerying) {\n                        this.logger.info (\"zb.sh.fsl already doing\");\n                        return;\n                }\n                this.stateCenter.streamQuerying = true;\n                this.logger.debug (\"zb.sh.fsl send fetch request\");\n                let bodyData = {\n                        \"reserve\": 0\n                };\n                \n                // 发送消息\n                this.socketCenter.registerRouter ('stream_info', this.handleFetchStreamListRsp);\n                this.socketCenter.sendMessage ('stream_info', bodyData);\n                this.logger.debug (\"zb.sh.fsl call success\");\n        }\n        \n        \n        makeCallbackStreamList (streamList: any[]) {\n                let callbackStreamList = [];\n                if (streamList && streamList.length > 0) {\n                        for (let i = 0; i < streamList.length; i++) {\n                                const streamInfo = {\n                                        anchor_id_name: streamList[i].anchor_id_name,\n                                        stream_gid: streamList[i].stream_gid,\n                                        anchor_nick_name: streamList[i].anchor_nick_name,\n                                        extra_info: streamList[i].extra_info,\n                                        stream_id: streamList[i].stream_id,\n                                        urls_flv: '',\n                                        urls_rtmp: '',\n                                        urls_hls: '',\n                                };\n                                \n                                this.setCDNInfo (streamInfo, streamList[i]);\n                                \n                                callbackStreamList.push (streamInfo);\n                                \n                        }\n                }\n                \n                return callbackStreamList;\n        }\n        \n        \n        \n        \n        \n        \n        /*\n         *    \"zb.sh.ums\": \"ZegoClient.base.StreamHandler.updateMixStream\",\n        */\n        updateMixStream (mixStreamConfig, successCallback, errorCallback): boolean {\n                this.logger.debug (\"zb.sh.ums call\");\n                \n                if (mixStreamConfig.outputStreamId == undefined && mixStreamConfig.outputUrl == undefined) {\n                        this.logger.error (\"zb.sh.ums no mix stream info\");\n                        return false;\n                }\n                \n                if (mixStreamConfig.streamList.length == 0) {\n                        this.logger.error (\"zb.sh.ums no input stream\");\n                        return false;\n                }\n                \n                let req_body = {\n                        \"id_name\": this.stateCenter.idName,\n                        \"live_channel\": this.stateCenter.roomid,\n                        \"appid\": this.stateCenter.appid,\n                        \"version\": PROTO_VERSION\n                };\n                \n                if (typeof mixStreamConfig.userData == \"string\" && mixStreamConfig.userData.length <= 10000) {\n                        req_body[\"UserData\"] = mixStreamConfig.userData;\n                }\n                \n                let mixInput = [];\n                for (let i = 0; i < mixStreamConfig.streamList.length; i++) {\n                        const streamInfo = mixStreamConfig.streamList[i];\n                        let totalStreamId = streamInfo.streamId;\n                        if (this.stateCenter.testEnvironment) {\n                                totalStreamId = \"zegotest-\" + this.stateCenter.appid + \"-\" + streamInfo.streamId;\n                        }\n                        \n                        mixInput.push ({\n                                stream_id: totalStreamId,\n                                rect: {\n                                        layer: i,\n                                        top: streamInfo.top,\n                                        left: streamInfo.left,\n                                        bottom: streamInfo.bottom,\n                                        right: streamInfo.right\n                                }\n                        });\n                }\n                \n                req_body[\"MixInput\"] = mixInput;\n                \n                let mixOutput = {};\n                if (mixStreamConfig.outputStreamId != undefined) {\n                        if (this.stateCenter.testEnvironment) {\n                                mixOutput[\"stream_id\"] = \"zegotest-\" + this.stateCenter.appid + \"-\" + mixStreamConfig.outputStreamId;\n                        }\n                        else {\n                                mixOutput[\"stream_id\"] = mixStreamConfig.outputStreamId;\n                        }\n                }\n                else if (mixStreamConfig.outputUrl != undefined) {\n                        mixOutput[\"mixurl\"] = mixStreamConfig.outputUrl;\n                }\n                \n                if (mixStreamConfig.outputBitrate) {\n                        mixOutput[\"bitrate\"] = mixStreamConfig.outputBitrate;\n                }\n                else {\n                        this.logger.error (\"zb.sh.ums no bitrate param\");\n                        return false;\n                }\n                \n                if (mixStreamConfig.outputFps) {\n                        mixOutput[\"fps\"] = mixStreamConfig.outputFps;\n                }\n                else {\n                        this.logger.error (\"zb.sh.ums no fps param\");\n                        return false;\n                }\n                \n                if (mixStreamConfig.outputWidth) {\n                        mixOutput[\"width\"] = mixStreamConfig.outputWidth;\n                }\n                else {\n                        this.logger.error (\"zb.sh.ums no width param\");\n                        return false;\n                }\n                \n                if (mixStreamConfig.outputHeight) {\n                        mixOutput[\"height\"] = mixStreamConfig.outputHeight;\n                }\n                else {\n                        this.logger.error (\"zb.sh.ums no height param\");\n                        return false;\n                }\n                \n                if (mixStreamConfig.outputAudioConfig) {\n                        mixOutput[\"audio_enc_id\"] = mixStreamConfig.outputAudioConfig;\n                }\n                if (mixStreamConfig.outputAudioBitrate) {\n                        mixOutput[\"audio_bitrate\"] = mixStreamConfig.outputAudioBitrate;\n                }\n                if (mixStreamConfig.outputAudioChannels) {\n                        mixOutput[\"audio_channel_cnt\"] = mixStreamConfig.outputAudioChannels;\n                }\n                if (mixStreamConfig.outputBgColor) {\n                        mixOutput[\"output_bg_color\"] = mixStreamConfig.outputBgColor;\n                }\n                if (mixStreamConfig.outputBgImage) {\n                        mixOutput[\"output_bg_image\"] = mixStreamConfig.outputBgImage;\n                }\n                \n                if (this.stateCenter.testEnvironment) {\n                        mixOutput[\"testenv\"] = 1;\n                }\n                else {\n                        mixOutput[\"testenv\"] = 0;\n                }\n                \n                req_body[\"MixOutput\"] = [mixOutput];\n                \n                const body = {\n                        channel: \"zeus\",\n                        cmd: \"start_mix\",\n                        req_body: JSON.stringify (req_body)\n                };\n                \n                this.logger.debug (\"zb.sh.ums send command\");\n                \n                this.socketCenter.sendMessage (\"biz_channel\", body, (seq, cmd, rspBody) => {\n                        this.logger.debug (\"zb.sh.ums receive message\");\n                        const prefix = \"zegotest-\" + this.stateCenter.appid + \"-\";\n                        if (rspBody.length == 0) {\n                                if (errorCallback) {\n                                        errorCallback (ClientUtil.getServerError (MIXSTREAM_ERROR_CODE + 1));\n                                }\n                                return;\n                        }\n                        \n                        const data = JSON.parse (rspBody);\n                        \n                        for (let i = 0; i < data.play.length; i++) {\n                                let mixPlayInfo = {};\n                                let streamId = data.play[i].stream_alias;\n                                if (this.stateCenter.testEnvironment && streamId.startsWith (prefix)) {\n                                        streamId = streamId.slice (prefix.length);\n                                }\n                                \n                                if (data.play[i].rtmp_url.length > 0) {\n                                        mixPlayInfo[\"rtmpUrls\"] = [data.play[i].rtmp_url];\n                                }\n                                if (data.play[i].hls_url.length > 0) {\n                                        mixPlayInfo[\"hlsUrls\"] = [data.play[i].hls_url];\n                                }\n                                if (data.play[i].hdl_url.length > 0) {\n                                        mixPlayInfo[\"flvUrls\"] = [data.play[i].hdl_url];\n                                }\n                                \n                                if (successCallback) {\n                                        successCallback (streamId, mixPlayInfo);\n                                }\n                        }\n                }, (error, seq, rspBody) => {\n                        \n                        if (typeof error == \"number\") {\n                                \n                                this.logger.debug (\"zb.sh.ums error: \" + error);\n                                \n                                const nonExistsStreamId = [];\n                                if (error == 1000000150 && rspBody.length != 0) {\n                                        //no stream list\n                                        const data = JSON.parse (rspBody);\n                                        const prefix = \"zegotest-\" + this.stateCenter.appid + \"-\";\n                                        \n                                        for (let i = 0; i < data.non_exist_streams.length; i++) {\n                                                const totalStreamId = data.non_exist_streams[i];\n                                                if (this.stateCenter.testEnvironment && totalStreamId.startsWith (prefix)) {\n                                                        nonExistsStreamId.push (totalStreamId.slice (prefix.length));\n                                                }\n                                                else {\n                                                        nonExistsStreamId.push (totalStreamId);\n                                                }\n                                        }\n                                }\n                                \n                                if (errorCallback) {\n                                        errorCallback (ClientUtil.getServerError (MIXSTREAM_ERROR_CODE + error), nonExistsStreamId);\n                                }\n                        }\n                        else {\n                                this.logger.debug (\"zb.sh.ums error code \" + error.code);\n                                \n                                if (errorCallback) {\n                                        errorCallback (error);\n                                }\n                        }\n                        \n                });\n                \n                return true;\n        };\n        \n        \n        \n        /*\n        *    \"zb.sh.sms\": \"ZegoClient.base.StreamHandler.stopMixStream\",\n       */\n        //停止混流信令\n        stopMixStream (mixStreamConfig, successCallback, errorCallback) {\n                this.logger.debug (\"zb.sh.sms call\");\n                \n                if (mixStreamConfig.outputStreamId == undefined && mixStreamConfig.outputUrl == undefined) {\n                        this.logger.error (\"zb.sh.sms no mix stream info\");\n                        return false;\n                }\n                \n                const req_body = {\n                        \"id_name\": this.stateCenter.idName,\n                        \"live_channel\": this.stateCenter.roomid,\n                        \"appid\": this.stateCenter.appid,\n                        \"version\": PROTO_VERSION\n                };\n                \n                if (mixStreamConfig.outputStreamId != undefined) {\n                        if (this.stateCenter.testEnvironment) {\n                                req_body[\"stream_id\"] = \"zegotest-\" + this.stateCenter.appid + \"-\" + mixStreamConfig.outputStreamId;\n                        }\n                        else {\n                                req_body[\"stream_id\"] = mixStreamConfig.outputStreamId;\n                        }\n                }\n                else if (mixStreamConfig.outputUrl != undefined) {\n                        req_body[\"mixurl\"] = mixStreamConfig.outputUrl;\n                }\n                \n                const body = {\n                        channel: \"zeus\",\n                        cmd: \"stop_mix\",\n                        req_body: JSON.stringify (req_body)\n                };\n                \n                this.socketCenter.sendMessage (\"biz_channel\", body, (seq, data) => {\n                        if (successCallback) {\n                                successCallback ();\n                        }\n                }, (error, seq) => {\n                        if (typeof error == \"number\") {\n                                if (errorCallback) {\n                                        errorCallback (ClientUtil.getServerError (MIXSTREAM_ERROR_CODE + error));\n                                }\n                        }\n                        else {\n                                if (errorCallback) {\n                                        errorCallback (error);\n                                }\n                        }\n                        \n                });\n                \n                return true;\n        };\n        \n        \n        \n        /*\n        *    \"zb.sh.usei\": \"ZegoClient.base.StreamHandler.updateStreamExtraInfo\",\n       */\n        updateStreamExtraInfo (streamid: string, extraInfo: string): boolean {\n                \n                this.logger.debug (\"zb.sh.usei call\");\n                \n                if (!streamid) {\n                        this.logger.error (\"zb.sh.usei param error\");\n                        return false;\n                }\n                \n                if (typeof extraInfo != \"string\") {\n                        return false;\n                }\n                \n                if (this.stateCenter.publishStreamList[streamid]) {\n                        this.stateCenter.publishStreamList[streamid].extra_info = extraInfo;\n                        if (this.stateCenter.publishStreamList[streamid].state >= ENUM_PUBLISH_STREAM_STATE.update_info) {\n                                this.updateStreamInfo (streamid, ENUM_STREAM_SUB_CMD.liveUpdate, extraInfo);\n                        }\n                }\n                \n                return true;\n        }\n        \n        \n        \n}\n","import {ENUM_RUN_STATE, LinkedList} from \"../zego.entity\";\nimport {getSeq} from \"../zego.extern\";\n\nexport class StateCenter {\n        \n        testEnvironment = false;\n        \n        configOK = false;\n        appid: number;\n        userid: string;\n        sessionid: string;\n        roomid: string;\n        token: string;\n        role: 1 | 2;\n        server: string;\n        idName: string;\n        nickName: string;\n        userStateUpdate: boolean;\n        roomCreateFlag: number = 1;\n        runState: ENUM_RUN_STATE = ENUM_RUN_STATE.logout;\n        lastRunState: ENUM_RUN_STATE = ENUM_RUN_STATE.logout;\n        \n        callbackList: { [index: string]: Function } = {};\n        \n        \n        streamQuerying: boolean;\n        streamSeq: number;\n        streamList = [];\n        publishStreamList = {};\n        \n        //用户相关\n        userQuerying = false;\n        userTempList = [];\n        userSeq: number = 0;\n        \n        \n        //command check timout\n        sendCommandMap = {};\n        sendCommandList = new LinkedList ();\n        sendDataMap = {};\n        sendDataList = new LinkedList ();\n        \n        joinLiveCallbackMap = {};\n        joinLiveRequestMap = {};\n        streamUrlMap = {};\n        cmdCallback = {};\n        \n        customUrl: string;\n        \n        //x消息相关\n        transSeqMap = {};\n        realyMessageList = [];\n        relayTimer = null;\n        bigImLastTimeIndex = 0;\n        bigIMmessageList = [];\n        bigImCallbackMap = {};\n        bigImTimer = null;\n        \n        serverTimeOffset = 0;\n        datiTimeWindow = 0;\n        bigimTimeWindow = 0;\n        \n        bigImMessageList = [];\n        \n        \n        screenShotStream: MediaStream;\n        \n        \n        tryLoginCount = 0;\n        tryLoginTimer = null;\n        \n        \n        tryHeartbeatCount: number;\n        \n        heartbeatInterval: number;\n        heartbeatTimer = null;\n        \n        \n        sendDataCheckTimer = null;\n        \n        sendDataCheckInterval = 2000; //检查发送消息间隔\n        \n        sendDataTimeout = 5 * 1000; //发送消息超时\n        sendDataDropTimeout = 10 * 1000; //丢弃过期消息的超时时间\n        sendDataCheckOnceCount = 100; //每次处理最大的超时包\n        \n        \n        sendRoomMsgTime = 0; //上一次发送房间消息时间\n        SendRoomMsgInterval = 500; //发送房间消息最多500毫秒发送一次\n        \n        cmdSeq = 0;\n        \n        constructor () {\n        \n        }\n        \n        //是否登录\n        isLogin () {\n                return this.runState === ENUM_RUN_STATE.login;\n        }\n        \n        //requestId\n        getRequestId (): string {\n                return this.idName + \"-\" + getSeq ();\n        }\n        \n        getSignalCmdContent (requestId: string, dest_id_name: string, result?: number): string {\n                var data = {\n                        \"request_id\": requestId,\n                        \"room_id\": this.roomid,\n                        \"from_userid\": this.idName,\n                        \"from_username\": this.nickName,\n                        \"to_userid\": dest_id_name\n                };\n                \n                if (result != undefined) {\n                        data[\"result\"] = result;\n                }\n                return JSON.stringify (data);\n        }\n}\n","\nimport {\n        ENUM_PUBLISH_STREAM_STATE,\n        ENUM_RUN_STATE, ENUM_STREAM_SUB_CMD, ENUM_STREAM_UPDATE_TYPE,\n        ERRO,\n        MAX_TRY_LOGIN_COUNT, MINIUM_HEARTBEAT_INTERVAL,\n        PROTO_VERSION,\n        sdkErrorList,\n        StreamInfo,\n        TRY_LOGIN_INTERVAL, UserInfo\n} from \"../zego.entity\";\nimport {ClientUtil} from \"../client-util\";\nimport {SocketCenter} from \"./socketCenter\";\nimport {StateCenter} from \"./stateCenter\";\nimport {Logger} from \"../zego.logger\";\n\nexport class RoomHandler {\n        \n        \n        private socketCenter: SocketCenter;\n        private logger: Logger;\n        private stateCenter: StateCenter;\n        \n        \n        constructor (logger: Logger, stateCenter: StateCenter, socketCenter: SocketCenter) {\n                this.logger = logger;\n                this.socketCenter = socketCenter;\n                this.stateCenter = stateCenter;\n        }\n        \n        /*\n       *    \"zb.rh.srs\": \"ZegoClient.base.RoomHandler.setRunState\",\n       */\n        setRunState (newRunState: ENUM_RUN_STATE) {\n                this.logger.debug (\"zb.rh.srs old=\" + this.stateCenter.runState + \", new=\" + newRunState);\n                this.stateCenter.lastRunState = this.stateCenter.runState;\n                this.stateCenter.runState = newRunState;\n        }\n        \n        /*\n      *    \"zb.rh.rtl\": \"ZegoClient.base.RoomHandler.resetTryLogin\",\n      */\n        private resetTryLogin () {\n                this.logger.debug (\"zb.rh.rtl call\");\n                clearTimeout (this.stateCenter.tryLoginTimer);\n                this.stateCenter.tryLoginTimer = null;\n                this.stateCenter.tryLoginCount = 0;\n                this.logger.debug (\"zb.rh.rtl call success\");\n        }\n        \n        \n     \n        private resetBigRoomInfo () {\n                //清除trans信令信息\n                this.stateCenter.transSeqMap = {};\n                \n                //清除relay信令信息\n                this.stateCenter.realyMessageList = [];\n                if (this.stateCenter.relayTimer) {\n                        clearTimeout (this.stateCenter.relayTimer);\n                        this.stateCenter.relayTimer = null;\n                }\n                \n                //清除大房间消息\n                this.stateCenter.bigImLastTimeIndex = 0;\n                this.stateCenter.bigIMmessageList = [];\n                this.stateCenter.bigImCallbackMap = {};\n                if (this.stateCenter.bigImTimer) {\n                        clearTimeout (this.stateCenter.bigImTimer);\n                        this.stateCenter.bigImTimer = null;\n                }\n                \n                this.stateCenter.serverTimeOffset = 0;\n                this.stateCenter.datiTimeWindow = 0;\n                this.stateCenter.bigimTimeWindow = 0;\n        }\n        \n         /*\n          *    \"zb.rh.rr\": \"ZegoClient.base.RoomHandler.resetRoom\",\n          */\n        resetRoom () {\n                \n                this.logger.debug ('zb.rh.rr call');\n                // 清除尝试登录计时器对象\n                this.resetTryLogin ();\n                \n               this.resetRoomCallBack();\n                \n                // 清除流列表\n                this.stateCenter.streamList = [];\n                this.stateCenter.streamQuerying = false;\n                this.stateCenter.publishStreamList = {};\n                \n                \n                // 清除连麦信令\n                this.stateCenter.joinLiveCallbackMap = {};\n                this.stateCenter.joinLiveRequestMap = {};\n                \n                // 清除请求url信息\n                this.stateCenter.streamUrlMap = {};\n                \n                //清除大房间消息\n                this.resetBigRoomInfo ();\n                \n                this.stateCenter.cmdCallback = {};\n                \n                // 防止多次重置时，发送多次消息\n                this.logger.debug ('zb.rh.rr call send logout=', this.stateCenter.sessionid);\n                if (this.stateCenter.sessionid !== '0') {\n                        let bodyData = {\n                                \"reserve\": 0\n                        };\n                        this.socketCenter.registerRouter ('logout', msg => {\n                                this.handleLogoutRsp (msg)\n                        });\n                        this.socketCenter.sendMessage ('logout', bodyData);\n                }\n                \n                this.socketCenter.closeSocket ();\n                \n                this.stateCenter.userid = '';\n                this.stateCenter.sessionid = '';\n                this.logger.setSessionInfo (this.stateCenter.appid, this.stateCenter.roomid, this.stateCenter.userid, this.stateCenter.idName, this.stateCenter.sessionid, PROTO_VERSION);\n                this.logger.debug ('zb.rh.rr call success');\n        }\n        \n        //空接口，被覆盖\n        resetRoomCallBack(){\n        \n        }\n        \n        onDisconnect (err: ERRO) {\n        }\n        \n        //空实现，被覆盖\n        loginSuccessCallBack(lastRunState:number,msg:any){\n        \n        }\n        \n        \n        \n        \n        \n        //空实现 被sdk覆盖\n        onGetTotalUserList (roomId: string, userList: any[]) {\n        }\n        \n        \n        /*\n          *    \"zb.rh.lg\": \"ZegoClient.base.RoomHandler.login\",\n          */\n        //登录房间\n        login (roomid: string, role: 1 | 2, token: string, success: (list: StreamInfo[]) => void, error: (err: ERRO) => void): void {\n                this.logger.setSessionInfo (this.stateCenter.appid, roomid, \"\", this.stateCenter.idName, \"\", PROTO_VERSION);\n                this.logger.info (\"zb.rh.lg call:\", roomid, token);\n               \n                if (!this.stateCenter.configOK || !ClientUtil.checkLoginParam (roomid, token)) {\n                        this.logger.error (\"zb.rh.lg param error\");\n                        error ({code: '', msg: 'param error'});\n                        return;\n                }\n        \n        \n                if (this.stateCenter.runState !== ENUM_RUN_STATE.logout) {\n                        this.logger.debug (\"zb.rh.lg reset\");\n                        this.setRunState (ENUM_RUN_STATE.logout);\n                        this.resetRoom ();\n                }\n        \n                this.logger.debug (\"zb.rh.lg begin\");\n                this.setRunState (ENUM_RUN_STATE.trylogin);\n        \n                this.stateCenter.roomid = roomid;\n                this.stateCenter.token = token;\n                this.stateCenter.role = role;\n                \n                ClientUtil.registerCallback ('login', {\n                        success: success,\n                        error: error\n                }, this.stateCenter.callbackList);\n                \n                this.resetTryLogin ();\n                this.tryLogin ();\n                this.logger.info (\"zb.rh.lg call success\");\n        }\n        \n        \n        \n        //登录请求数据包\n        private loginBodyData () {\n                return {\n                        \"id_name\": this.stateCenter.idName,\n                        \"nick_name\": this.stateCenter.nickName,\n                        \"role\": this.stateCenter.role,\n                        \"token\": this.stateCenter.token,\n                        \"version\": PROTO_VERSION,\n                        \"user_state_flag\": this.stateCenter.userStateUpdate ? 1 : 0,\n                        \"room_create_flag\": this.stateCenter.roomCreateFlag\n                };\n        }\n        \n        \n        /*\n          *    \"zb.rh.tl\": \"ZegoClient.base.RoomHandler.tryLogin\",\n          */\n        private tryLogin (): void {\n                \n                this.logger.debug ('zb.rh.tl call');\n                \n                if (this.stateCenter.runState !== ENUM_RUN_STATE.trylogin) {\n                        this.logger.error ('zb.rh.tl state error');\n                        return;\n                }\n                \n                // 如果尝试登录次数大于最大可尝试次数，则直接置为logout登出状态\n                if (++this.stateCenter.tryLoginCount > MAX_TRY_LOGIN_COUNT) {\n                        this.logger.error ('zb.rh.tl fail times limit');\n                        let lastRunState = this.stateCenter.lastRunState;\n                        this.setRunState (ENUM_RUN_STATE.logout);\n                        this.resetRoom ();\n                        \n                        if (lastRunState == ENUM_RUN_STATE.login) {\n                                //relogin fail, not by user\n                                this.logger.error ('zb.rh.tl fail and disconnect');\n                                this.onDisconnect (sdkErrorList.LOGIN_DISCONNECT);\n                        } else {\n                                //trylogin fail, call by user\n                                this.logger.info ('zb.rh.tl fail and callback user');\n                                ClientUtil.actionErrorCallback ('login', this.stateCenter.callbackList) (sdkErrorList.LOGIN_TIMEOUT);\n                        }\n                        \n                        return;\n                }\n                \n                \n                // 如果websocket还未初始化或者还不是处于连接状态\n                if (this.socketCenter.isDisConnect ()) {\n                        this.logger.debug ('zb.rh.tl need new websocket');\n                        \n                        try {\n                                // 若已经初始化，但是还不是连接状态，先清除置为null\n                                this.socketCenter.closeSocket ();\n                                \n                                // 建立websocket连接\n                                this.logger.debug ('zb.rh.tl new websocket');\n                                \n                                this.socketCenter.createSocket (this.stateCenter.server);\n                                \n                                this.socketCenter.registerRouter ('login', (msg, seq) => {\n                                        this.handleLoginRsp (msg, seq)\n                                });\n                                this.socketCenter.closeHandler ((err) => {\n                                        this.closeHandler (err);\n                                });\n                                this.socketCenter.openHandler (() => {\n                                        this.openHandler ();\n                                });\n                        } catch (e) {\n                                this.logger.error (\"zb.rh.tl websocket err:\" + e);\n                        }\n                        \n                } else { // websocket已建立成功\n                        let bodyData = this.loginBodyData ();\n                        this.logger.info ('zb.rh.tl use current websocket and sent login');\n                        this.socketCenter.sendMessage ('login', bodyData);\n                }\n                \n                //settimeout\n                this.stateCenter.tryLoginTimer = setTimeout (() => {\n                        this.tryLogin ();\n                }, TRY_LOGIN_INTERVAL[this.stateCenter.tryLoginCount % MAX_TRY_LOGIN_COUNT]);\n                \n                this.logger.info ('zb.rh.tl call success');\n        }\n        \n        /*\n         *    \"zb.rh.hlr\": \"ZegoClient.base.RoomHandler.handleLoginRsp\",\n         */\n        private handleLoginRsp (msg: any, cmdSeq: number): void {\n                this.logger.debug (\"zb.rh.hlr call\");\n                if (this.stateCenter.runState !== ENUM_RUN_STATE.trylogin) {\n                        this.logger.error (\"zb.rh.hlr state error\");\n                        return;\n                } else if (msg.header.seq !== cmdSeq) {\n                        this.logger.error (\"zb.rh.hlr in wrong seq, local=\", cmdSeq, \",recv=\", msg.header.seq);\n                        return;\n                } else if (msg.body.err_code !== 0) {\n                        this.handleLoginFail (msg);\n                        this.logger.error (\"zb.rh.hlr server error=\", msg.body.err_code);\n                        return;\n                } else {\n                        this.handleLoginSuccess (msg);\n                        this.logger.info (\"zb.rh.hlr call success.\");\n                }\n        }\n        \n        /*\n         *    \"zb.rh.hlf\": \"ZegoClient.base.RoomHandler.handleLoginFail\",\n         */\n        //登录失败回调\n        private handleLoginFail (msg: any) {\n                this.logger.debug (\"zb.rh.hlf call\");\n                if (ClientUtil.isKeepTryLogin (msg.body.err_code)) {\n                        this.logger.warn (\"zb.rh.hlf KeepTry true\");\n                        return;\n                }\n                \n                //stop\n                const lastRunState = this.stateCenter.lastRunState;\n                this.setRunState (ENUM_RUN_STATE.logout);\n                this.resetRoom ();\n                \n                let err = ClientUtil.getServerError (msg.body.err_code);\n                if (lastRunState === ENUM_RUN_STATE.login) {\n                        //relogin fail, not by user\n                        this.logger.info ('zb.rh.hlf callback disconnect');\n                        this.onDisconnect (err);\n                } else {\n                        //trylogin fail, call by user\n                        this.logger.info ('zb.rh.hlf callback error');\n                        ClientUtil.actionErrorCallback ('login', this.stateCenter.callbackList) (err);\n                }\n                \n                this.logger.debug (\"zb.rh.hlf call success\");\n        }\n        \n        \n        /*\n         *    \"zb.rh.hls\": \"ZegoClient.base.RoomHandler.handleLoginSuccess\",\n         */\n         //登录成功回调\n        private handleLoginSuccess (msg: any) {\n                \n                this.logger.info (\"zb.rh.hls call\");\n                \n                //enter login\n                let lastRunState = this.stateCenter.lastRunState;\n                this.setRunState (ENUM_RUN_STATE.login);\n                this.stateCenter.userid = msg.body.user_id;\n                this.stateCenter.sessionid = msg.body.session_id;\n                \n                //set log\n                this.logger.setSessionInfo (this.stateCenter.appid, this.stateCenter.roomid, this.stateCenter.userid, this.stateCenter.idName, this.stateCenter.sessionid, PROTO_VERSION);\n                if (msg.body.config_info) {\n                        this.logger.setRemoteLogLevel (msg.body.config_info.log_level);\n                        if (msg.body.config_info.log_url != \"\") this.logger.openLogServer (msg.body.config_info.log_url);\n                }\n                \n                //get time stamp & window\n                if (msg.body.ret_timestamp != undefined && typeof msg.body.ret_timestamp == \"string\") {\n                        let serverTime = parseFloat (msg.body.ret_timestamp);\n                        if (serverTime == 0) {\n                                this.stateCenter.serverTimeOffset = 0;\n                        } else {\n                                this.stateCenter.serverTimeOffset = msg.body.ret_timestamp - (new Date ()).getTime ();\n                        }\n                }\n                if (msg.body.bigim_time_window && typeof msg.body.bigim_time_window == \"number\") {\n                        this.stateCenter.bigimTimeWindow = msg.body.bigim_time_window;\n                }\n                if (msg.body.dati_time_window && typeof msg.body.dati_time_window == \"number\") {\n                        this.stateCenter.datiTimeWindow = msg.body.dati_time_window;\n                }\n                \n                //stop trylogin\n                this.resetTryLogin ();\n                \n                this.loginSuccessCallBack(lastRunState,msg);\n        }\n        \n        /*\n        *    \"zb.rh.oh\": \"ZegoClient.base.RoomHandler.openHandler\",\n        */\n        private openHandler () {\n                // websocket连接已经打开\n                // 注册onmessage函数，处理服务的发过来的消息，该函数只调用一次\n                this.logger.info ('zb.rh.oh websocket.onpen call');\n                \n                this.socketCenter.responseHandler ();\n                \n                // 发送消息\n                let bodyData = this.loginBodyData ();\n                this.logger.info ('zb.rh.oh websocket.onpen send login');\n                this.socketCenter.sendMessage ('login', bodyData);\n                this.logger.debug ('zb.rh.oh websocket.onpen call success');\n                \n        }\n        \n        /*\n        *    \"zb.rh.oc\": \"ZegoClient.base.RoomHandler.closeHandler\",\n       */\n        private closeHandler (e) {\n                this.logger.info (\"zb.rh.ws.oc msg=\" + JSON.stringify (e));\n                if (this.stateCenter.runState !== ENUM_RUN_STATE.logout) {\n                        if (this.stateCenter.runState === ENUM_RUN_STATE.trylogin && this.stateCenter.tryLoginCount <= MAX_TRY_LOGIN_COUNT) {\n                                //trylogin --> trylogin\n                                this.logger.info (\"zb.rh.ws.oc is called because of try login\");\n                        } else if (this.stateCenter.runState === ENUM_RUN_STATE.login) {\n                                //login --> trylogin\n                                this.logger.info (\"zb.rh.ws.oc is called because of network broken, try again\");\n                                this.setRunState (ENUM_RUN_STATE.trylogin);\n                                this.resetTryLogin ();\n                                this.tryLogin ();\n                        } else {\n                                //unknown\n                                this.logger.error (\"zb.rh.ws.oc out of think!!!\");\n                                this.setRunState (ENUM_RUN_STATE.logout);\n                                this.resetRoom ();\n                                this.onDisconnect (sdkErrorList.UNKNOWN);\n                        }\n                        \n                } else {\n                        //* --> logout\n                        this.logger.info (\"zb.rh.ws.oc onclose logout flow call websocket.close\");\n                }\n        }\n        \n        \n        /*\n       *    \"zb.rh.lo\": \"ZegoClient.base.RoomHandler.logout\",\n      */\n        logout (): boolean {\n                this.logger.debug (\"zb.rh.lo call\");\n                \n                if (this.stateCenter.runState === ENUM_RUN_STATE.logout) {\n                        this.logger.warn (\"zb.rh.lo at logout\");\n                        return false;\n                }\n                \n                this.setRunState (ENUM_RUN_STATE.logout);\n                this.resetRoom ();\n                this.logger.info (\"zb.rh.lo call success\");\n                return true;\n        }\n        \n        \n        /*\n      *    \"zb.rh.su\": \"ZegoClient.base.RoomHandler.setUserStateUpdate\",\n     */\n        setUserStateUpdate (update: boolean) {\n                this.logger.debug (\"zb.rh.su call\");\n                \n                if (typeof update !== \"boolean\") {\n                        this.logger.info (\"zb.rh.su param error\");\n                        return false;\n                }\n                \n                this.stateCenter.userStateUpdate = update;\n                this.logger.info (\"zb.rh.su call success \" + update);\n                return true;\n        }\n        \n        \n        /*\n        *    \"zb.rh.ful\": \"ZegoClient.base.RoomHandler.fetchUserList\",\n       */\n        // 拉取服务端user信息\n        fetchUserList () {\n                this.logger.debug (\"zb.rh.ful call\");\n                if (this.stateCenter.userQuerying) {\n                        this.logger.warn (\"zb.rh.ful is already querying\");\n                        return;\n                }\n                \n                this.stateCenter.userQuerying = true;\n                this.stateCenter.userTempList = [];\n                this.fetchUserListWithPage (0);\n                this.logger.info (\"zb.rh.ful the first time call\");\n        }\n        \n        \n        /*\n        *    \"zb.rh.fulwp\": \"ZegoClient.base.RoomHandler.fetchUserListWithPage\",\n       */\n        //分页拉取user list\n        private fetchUserListWithPage (userIndex: number) {\n                this.logger.debug (\"zb.rh.fulwp call\");\n                \n                this.socketCenter.registerRouter ('user_list', msg => {\n                        this.handleFetchUserListRsp (msg)\n                });\n                \n                // 发送消息\n                this.socketCenter.sendMessage ('user_list', {\n                        \"user_index\": userIndex,\n                        \"sort_type\": 0\n                });\n                \n                this.logger.info (\"zb.rh.fulwp call success\");\n        }\n        \n        \n        \n        /*\n        *    \"zb.rh.hfulr\": \"ZegoClient.base.RoomHandler.handleFetchUserListRsp\",\n       */\n        private handleFetchUserListRsp (msg: any) {\n                this.logger.debug (\"zb.rh.hfulr call\");\n                if (msg.body.err_code != 0) {\n                        this.stateCenter.userQuerying = false;\n                        this.logger.info (\"zb.rh.hfulr fetch error \" + msg.body.err_code);\n                        return;\n                }\n                \n                //set userseq\n                if (!this.stateCenter.userStateUpdate) {\n                        return;\n                }\n                \n                this.stateCenter.userTempList= [...this.stateCenter.userTempList, ...msg.body.user_baseinfos];\n                \n                // this.logger.debug(\"zb.rh.hfulr server user_list \" + msg.body.user_baseinfos);\n                \n                let currentIndex = msg.body.ret_user_index;\n                let serverIndex = msg.body.server_user_index;\n                if (currentIndex != serverIndex) {\n                        this.logger.warn (\"zb.rh.hfulr fetch another page\");\n                        this.fetchUserListWithPage (currentIndex + 1);\n                        return;\n                }\n                \n                this.stateCenter.userSeq = msg.body.server_user_seq;\n                this.logger.info (\"zb.rh.hfulr set user Seq \" + this.stateCenter.userSeq);\n                \n                let user_list = [];\n                for (let i = 0; i < this.stateCenter.userTempList.length; i++) {\n                        let user_info = {\n                                \"idName\": this.stateCenter.userTempList[i].id_name,\n                                \"nickName\": this.stateCenter.userTempList[i].nick_name,\n                                \"role\": this.stateCenter.userTempList[i].role\n                        };\n                        \n                        user_list.push (user_info);\n                }\n                \n                this.stateCenter.userQuerying = false;\n                this.onGetTotalUserList (this.stateCenter.roomid, user_list);\n                this.stateCenter.userTempList = [];\n                \n                this.logger.info (\"zb.rh.hfulr call success user_list \" + user_list + \" count \" + user_list.length);\n        }\n        \n     \n        \n        /*\n        *    \"zb.rh.hlor\": \"ZegoClient.base.RoomHandler.handleLogoutRsp\",\n         */\n        private handleLogoutRsp (msg: any) {\n                this.logger.debug (\"zb.rh.hlor result=\", msg.body.err_code);\n        }\n        \n        \n        /*\n       *    \"zb.rh.hpus\": \"ZegoClient.base.RoomHandler.handlePushUserStateUpdateMsg\",\n        */\n        handlePushUserStateUpdateMsg (msg) {\n                \n                this.logger.debug (\"zb.rh.hpus call\");\n                \n                if (!this.stateCenter.isLogin ()) {\n                        this.logger.error (\"zb.rh.hpus not login\");\n                        return;\n                }\n                \n                if (!this.stateCenter.userStateUpdate) {\n                        this.logger.error (\"zb.rh.hpus no userStateUpdate flag\");\n                        return;\n                }\n                \n                if (this.stateCenter.userSeq + msg.body.user_actions.length !== msg.body.user_list_seq) {\n                        this.logger.warn (\"zb.rh.hpus fetch new userlist \" + this.stateCenter.userSeq, +\" server \" + msg.body.user_list_seq);\n                        this.fetchUserList ();\n                        return;\n                }\n                \n                this.stateCenter.userSeq = msg.body.user_list_seq;\n                this.logger.debug (\"zb.rh.hpus push userSeq \" + this.stateCenter.userSeq);\n                \n                const user_list = [];\n                for (let i = 0; i < msg.body.user_actions.length; i++) {\n                        const user_info = {\n                                \"action\": msg.body.user_actions[i].Action,\n                                \"idName\": msg.body.user_actions[i].IdName,\n                                \"nickName\": msg.body.user_actions[i].NickName,\n                                \"role\": msg.body.user_actions[i].Role,\n                                \"loginTime\": msg.body.user_actions[i].LoginTime\n                        };\n                        \n                        user_list.push (user_info);\n                }\n                \n                this.onUserStateUpdate (msg.body.room_id, user_list);\n                this.logger.info (\"zb.rh.hpus call success\");\n        }\n        \n        \n        onUserStateUpdate (roomId: string, userList: UserInfo[]) {\n        }\n}\n","\nimport {ENUM_RUN_STATE, ENUM_STREAM_UPDATE_CMD, LinkedList, sdkErrorList} from \"../zego.entity\";\nimport {ClientUtil} from \"../client-util\";\nimport {StateCenter} from \"./stateCenter\";\nimport {ZegoWebSocket} from \"../../wechatMini/zego.webSocket\";\nimport {Logger} from \"../zego.logger\";\n\nexport class SocketCenter {\n        \n        private websocket: WebSocket|ZegoWebSocket;\n        private logger: Logger;\n        private stateCenter: StateCenter;\n        \n        private cmdSeq = 0;\n        \n        \n        private responseRouters: { [index: string]: any } = {};\n        \n        constructor (logger: Logger, stateCenter: StateCenter) {\n                this.logger = logger;\n                this.stateCenter = stateCenter;\n                this.responseRouters = {\n                        'push_kickout': msg=>{this.handlePushKickout(msg)},\n                        'push_custommsg': msg=>{this.handlePushCustomMsg(msg)},\n                        'push_im_chat': msg=>{this.handlePushRoomMsg(msg)},\n                        'push_userlist_update': msg=>{this.handlePushUserStateUpdateMsg(msg)},\n                        'push_merge_message': msg=>{this.handlePushMergeMsg(msg)},\n                        'trans': msg=>{this.handleTransRsp(msg)},\n                        'push_trans': msg=>{this.handlePushTransMsg(msg)}\n                }\n                \n        }\n        \n        \n        /*\n         *    \"hpk.0\": \"ZegoClient.handlePushKickout\",\n         */\n        handlePushKickout (msg) {\n        }\n        \n        handlePushCustomMsg (msg) {\n        }\n        \n        handlePushRoomMsg (msg) {\n        }\n        \n        handlePushUserStateUpdateMsg (msg) {\n        }\n        \n        handlePushMergeMsg (msg) {\n        }\n        \n        handlePushTransMsg (msg) {\n        }\n        \n        handleBigImMsgRsp(msg){}\n        \n        /*\n         *    \"zb.sc.htr\": \"ZegoClient.base.SocketCenter.handleTransRsp\",\n         *\n         */\n        //trans回包\n        handleTransRsp (msg) {\n                if (!this.stateCenter.isLogin ()) {\n                        this.logger.error (\"zb.sc.htr not login\");\n                        return;\n                }\n                \n                if (msg.body.err_code != 0) {\n                        this.logger.error (\"zb.sc.htr trans send error \" + msg.body.err_code);\n                        return;\n                }\n                \n                var type = msg.body.trans_type;\n                if (!this.stateCenter.transSeqMap[type]) {\n                        this.logger.error (\"zb.sc.htr cannot match send info\");\n                        return;\n                }\n                \n                //update seq\n                this.stateCenter.transSeqMap[type].seq = msg.body.trans_seq;\n                this.logger.debug (\"zb.sc.htr trans \" + type + \" seq \" + msg.body.trans_seq);\n        }\n        \n        handleBizChannelRspCallback (msg, sendData) {\n                if (msg.body.err_code === 0) {\n                        if (sendData.success != null) {\n                                sendData.success (msg.header.seq, msg.body.cmd, msg.body.rsp_body);\n                        }\n                }\n                else {\n                        if (sendData.error != null) {\n                                sendData.error (msg.body.err_code, msg.header.seq, msg.body.rsp_body);\n                        }\n                }\n        }\n        \n        //注册cmd回调事件\n        registerRouter (name: string, callBack: Function) {\n                this.responseRouters[name] = callBack;\n        }\n        \n        getSocket (server: string): ZegoWebSocket | WebSocket {\n                return null;\n        }\n        \n        // 获取全局参数对象header\n        private getHeader (cmd: string) {\n                return {\n                        'Protocol': 'req',\n                        'cmd': cmd,\n                        'appid': this.stateCenter.appid,\n                        'seq': ++this.cmdSeq,\n                        'user_id': this.stateCenter.userid,\n                        'session_id': this.stateCenter.sessionid || '',\n                        'room_id': this.stateCenter.roomid || '',\n                };\n        }\n        \n        /*\n         *    \"zb.sc.sm\": \"ZegoClient.base.SocketCenter.sendMessage\",\n         *\n         */\n        sendMessage (cmd: string, body: { [index: string]: string | number | any[] }, success?: Function, error?: Function): number {\n                this.logger.debug (\"zb.sc.sm call \" + cmd);\n                \n                if (this.isDisConnect ()) {\n                        this.logger.error (\"zb.sc.sm error  \" + cmd);\n                        return -1;\n                }\n                \n                const header = this.getHeader (cmd);\n                const data = {\n                        \"header\": header,\n                        \"body\": body\n                };\n                \n                success == undefined && (success = null);\n                error == undefined && (error = null);\n                \n                if (success != null || error != null) {\n                        const cmdData = {\n                                data: data,\n                                seq: header.seq,\n                                deleted: false,\n                                time: Date.parse (new Date () + ''),\n                                success: success,\n                                error: error,\n                        };\n                        const cmdDataNode = this.stateCenter.sendCommandList.push (cmdData);\n                        this.stateCenter.sendCommandMap[cmdData.seq] = cmdDataNode;\n                }\n                \n                this.websocket.send (JSON.stringify (data));\n                this.logger.debug (\"zb.sc.sm success\");\n                \n                return header.seq;\n        }\n        \n        \n        /*\n         *    \"zb.sc.scm\": \"ZegoClient.base.SocketCenter.sendCustomMessage\"\n         */\n        //发送带回调消息\n        sendCustomMessage (cmd: string, body: { [index: string]: string | number | any[] }, success?: Function, error?: Function): boolean {\n                this.logger.debug (\"zb.sc.scm call\");\n                if (this.isDisConnect ()) {\n                        this.logger.error (\"zb.sc.scm error\");\n                        return false;\n                }\n                \n                const header = this.getHeader (cmd);\n                const data = {\n                        \"header\": header,\n                        \"body\": body,\n                };\n                \n                const dataBuffer = JSON.stringify (data);\n                \n                if (success == undefined) success = null;\n                if (error == undefined) error = null;\n                \n                const cmdData = {\n                        data: data,\n                        seq: header.seq,\n                        deleted: false,\n                        time: Date.parse (new Date () + ''),\n                        success: success,\n                        error: error,\n                };\n                const cmdDataNode = this.stateCenter.sendDataList.push (cmdData);\n                this.stateCenter.sendDataMap[cmdData.seq] = cmdDataNode;\n                this.websocket.send (dataBuffer);\n                this.logger.debug (\"zb.sc.scm success seq: \", header.seq);\n                return true;\n        }\n        \n        \n        isDisConnect () {\n                return !this.websocket || this.websocket.readyState !== 1\n        }\n        \n        /*\n        *    \"zb.sc.cs\": \"ZegoClient.base.SocketCenter.closeSocket\"\n        */\n        closeSocket () {\n                if (this.websocket) {\n                        this.logger.info ('zb.sc.cs close websocket');\n                        this.websocket.onclose = null;\n                        this.websocket.onerror = null;\n                        this.websocket.close ();\n                        this.websocket = null;\n                }\n        }\n        \n        createSocket (server: string) {\n                this.websocket = this.getSocket (server);\n        }\n        \n        openHandler (hander: any) {\n                this.websocket.onopen = hander;\n        }\n        \n        /*\n        *    \"zb.sc.ch\": \"ZegoClient.base.SocketCenter.closeHandler\"\n        */\n        closeHandler (hander: any) {\n                this.websocket.onclose = hander;\n        }\n        \n        /*\n        *    \"zb.sc.ws.oe\": \"ZegoClient.base.SocketCenter.errorHandler\"\n        */\n        errorHandler () {\n                this.websocket.onerror = e => {\n                        this.logger.error (\"zb.sc.oe msg=\" + JSON.stringify (e));\n                }\n        }\n        \n        /*\n        *    \"zb.sc.crp\": \"ZegoClient.base.SocketCenter.checkResponse\"\n        */\n        // 被logincenter 覆盖\n        checkResponse (msg: any) {\n                if (msg.header.appid !== this.stateCenter.appid ||\n                            msg.header.session_id !== this.stateCenter.sessionid ||\n                            msg.header.user_id !== this.stateCenter.userid ||\n                            msg.header.room_id !== this.stateCenter.roomid ||\n                            this.stateCenter.runState !== ENUM_RUN_STATE.login) {\n                        this.logger.error (\"zb.sc.crp check session fail.\");\n                        return true;\n                } else {\n                        return false;\n                }\n        }\n        \n        /*\n        *    \"zb.sc.ws.rph: \"ZegoClient.base.SocketCenter.responseHandler\"\n        */\n        responseHandler () {\n                this.websocket.onmessage = e => {\n                        \n                        let msg = JSON.parse (e.data);\n                        this.logger.debug (\"zb.sc.ws.rph jsonmsg= \", msg.header.cmd);\n                        \n                        if (msg.header.cmd === 'login') {\n                                this.responseRouters['login'] (msg, this.cmdSeq);\n                                return;\n                        }\n                        \n                        \n                        if (this.checkResponse (msg)) {\n                                this.logger.error (\"zb.sc.ws.rph check session fail.\");\n                                return;\n                        }\n                        \n                        //检查消息回包\n                        this.handleSendCommandMsgRsp (msg);\n                        \n                        this.logger.info (`zb.sc.ws.rph cmd=${msg.header.cmd},function=${!!this.responseRouters[msg.header.cmd]}`)\n                        this.responseRouters[msg.header.cmd] && this.responseRouters[msg.header.cmd] (msg);\n                        \n                        \n                        // switch (msg.header.cmd) {\n                        //   case 'hb':\n                        //     this.handleHeartbeatRsp(msg);\n                        //     break;\n                        //   case 'logout':\n                        //     this.handleLogoutRsp(msg);\n                        //     break;\n                        //   case 'custommsg':\n                        //     this.handleSendCustomMsgRsp(msg);\n                        //     break;\n                        //   case 'stream_info':\n                        //     this.handleFetchStreamListRsp(msg);\n                        //     break;\n                        //   case 'push_custommsg':\n                        //     this.handlePushCustomMsg(msg);\n                        //     break;\n                        //   case 'push_stream_update':\n                        //     this.handlePushStreamUpdateMsg(msg);\n                        //     break;\n                        //   case 'push_kickout':\n                        //     this.handlePushKickout(msg);\n                        //     break;\n                        //   case 'stream_url':?-wx\n                        //     this.handleFetchStreamUrlRsp(msg);\n                        //     break;\n                        //   case 'stream_publish':?-wx\n                        //     this.handleFetchStreamPublishUrlRsp(msg);\n                        //     break;\n                        //   case 'webrtc_url':\n                        //     this.handleFetchWebRtcUrlRsp(msg);\n                        //     break;\n                        //   case 'im_chat':\n                        //     this.handleSendRoomMsgRsp(msg);\n                        //     break;\n                        //   case 'push_im_chat':\n                        //     this.handlePushRoomMsg(msg);\n                        //     break;\n                        //   case 'push_userlist_update':\n                        //     this.handlePushUserStateUpdateMsg(msg);\n                        //     break;\n                        //   case 'user_list':\n                        //     this.handleFetchUserListRsp(msg);\n                        //     break;\n                        //   case 'push_signal':\n                        //     this.handlePushSignalMsg(msg);\n                        //     break;\n                        //   case 'stream':\n                        //     this.handleStreamUpdateRsp(msg);\n                        //     break;\n                        //   case 'trans':\n                        //     this.handleTransRsp(msg);\n                        //     break;\n                        //   case 'trans_fetch':\n                        //     this.handleFetchTransRsp(msg);\n                        //     break;\n                        //   case 'push_trans':\n                        //     this.handlePushTransMsg(msg);\n                        //     break;\n                        //   case 'push_merge_message':\n                        //     this.handlePushMergeMsg(msg);\n                        //     break;\n                        // }\n                };\n        }\n        \n        \n        /*\n       *    \"zb.sc.hscmr: \"ZegoClient.base.SocketCenter.handleSendCommandMsgRsp\"\n       */\n        private handleSendCommandMsgRsp (msg) {\n                this.logger.debug (\"zb.sc.hscmr call\");\n                let sendDataNode = this.stateCenter.sendCommandMap[msg.header.seq];\n                let sendData;\n                if (sendDataNode != null) {\n                        sendData = sendDataNode._data;\n        \n                        if (sendData.data.header.cmd == \"login\") {\n                                this.logger.debug (\"zb.sc.hscmr don't check \" + sendData.data.header.cmd);\n                        } else if (sendData.data.header.cmd == \"relay\") {\n                                this.handleRelayRspCallback(msg, sendData);\n                        } else if (sendData.data.header.cmd == \"bigim_chat\") {\n                                this.handleBigImRspCallback(msg, sendData);\n                        } else if (sendData.data.header.cmd == \"biz_channel\") {\n                                this.handleBizChannelRspCallback (msg, sendData);\n                        } else if (msg.body.err_code === 0) {\n                                sendData.success != null && sendData.success (msg.header.seq);\n                        } else {\n                                sendData.error != null && sendData.error (ClientUtil.getServerError (msg.body.err_code), msg.header.seq);\n                        }\n                \n                        \n                        delete this.stateCenter.sendCommandMap[msg.header.seq];\n                        this.stateCenter.sendCommandList.remove (sendDataNode);\n                }\n                \n                this.logger.debug (\"zb.sc.hscmr call success\");\n        }\n        \n          handleRelayRspCallback( msg, sendData) {\n                if (msg.body.err_code === 0) {\n                        if (sendData.success != null) {\n                                sendData.success(msg.header.seq, msg.body.relay_result);\n                        }\n                } else {\n                        if (sendData.error != null) {\n                                sendData.error(ClientUtil.getServerError(msg.body.err_code), msg.header.seq);\n                        }\n                }\n        }\n        \n          handleBigImRspCallback( msg, sendData) {\n                if (msg.body.err_code === 0) {\n                        if (sendData.success != null) {\n                                //should be sendData.success callback\n                                this.handleBigImMsgRsp(msg);\n                        }\n                }\n                else {\n                        if (sendData.error != null) {\n                                sendData.error(ClientUtil.getServerError(msg.body.err_code), msg.header.seq);\n                        }\n                }\n        }\n        \n       \n        \n}\n","import {\n        ENUM_PUBLISH_STREAM_STATE,\n        ENUM_STREAM_SUB_CMD, MessageInfo, StreamInfo,\n        StreamQuality, UserInfo\n} from \"../zego.entity\";\nimport {SocketCenter} from \"./socketCenter\";\nimport {StateCenter} from \"./stateCenter\";\nimport {RoomHandler} from \"./roomHandler\";\nimport {StreamHandler} from \"./streamHandler\";\nimport {HeartBeatHandler} from \"./heartBeatHandler\";\nimport {MessageHandler} from \"./messageHandler\";\nimport {LiveHandler} from \"./liveHandler\";\nimport {Logger} from \"../zego.logger\";\nimport {ZegoStreamCenter} from \"../ZegoStreamCenter\";\nimport {ZegoWebSocket} from \"../../wechatMini/zego.webSocket\";\n\nexport abstract class Common {\n        \n        logger: Logger;\n        \n        streamCenter: ZegoStreamCenter;\n        \n        socketCenter: SocketCenter;\n        \n        roomHandler: RoomHandler;\n        \n        heartBeatHandler:HeartBeatHandler;\n        \n        \n        streamHandler: StreamHandler;\n        \n        messageHandler:MessageHandler;\n        \n        liveHandler:LiveHandler;\n        \n        stateCenter: StateCenter;\n        \n        \n        \n        \n        \n        abstract getSocket (server: string): ZegoWebSocket | WebSocket;\n        \n        \n        //空实现 web独有\n        abstract  setCDNInfo (streamInfo: { urls_flv: string, urls_hls: string, urls_rtmp: string },\n                                       streamItem: { urls_flv: string, urls_m3u8: string, urls_rtmp: string });\n        \n        //空实现，被子类覆盖\n        abstract WebrtcOnPublishStateUpdateHandle (type: 0 | 1 | 2, streamid: string, error: { code: string, msg: string });\n        \n        \n        abstract stopPlayingStream (streamID: string);\n        \n        abstract onPlayStateUpdate (type: 0 | 1 | 2, streamid: string, error: { code: string, msg: string });\n        \n        \n        abstract onPublishStateUpdate (type: 0 | 1 | 2, streamid: string, error: { code: string, msg: string });\n        \n        abstract stopPublishingStream (streamId: string);\n        \n        \n        abstract onPublishQualityUpdate (streamid: string, streamQuality: StreamQuality);\n        \n        \n        abstract onRecvJoinLiveRequest (requestId: string, from_userid: string, from_username: string, roomid: string);\n        \n        abstract onRecvInviteJoinLiveRequest (requestId: string, from_userid: string, from_username: string, roomid: string);\n        \n        abstract onRecvEndJoinLiveCommand (requestId: string, from_userid: string, from_username: string, roomid: string);\n        \n        abstract  onRecvCustomCommand (from_userid: string, from_idname: string, custom_content: string);\n        \n        abstract onUserStateUpdate (roomId: string, userList: UserInfo[]);\n        \n        abstract onRecvBigRoomMessage (messageList: MessageInfo[], roomId: string);\n        \n        abstract onRecvReliableMessage (type: string, seq: number, data: String);\n        \n        abstract  onStreamUpdated (type: number, streamList: StreamInfo[]);\n        \n        abstract  onStreamExtraInfoUpdated (streamList: StreamInfo[]);\n        \n        \n        abstract startPublishingStream (streamid, localVideo, extraInfo)\n        \n       \n        abstract startPlayingStream (streamid: string, remoteVideo: HTMLElement, audioOutput?: string);\n        \n      \n      \n        //播放拉流状态变化回掉\n         onPlayStateUpdateHandle (type: 0 | 1 | 2, streamid: string, error: { code: string, msg: string }) {\n                if (type == 1) {\n                        this.stopPlayingStream (streamid);\n                }\n                this.onPlayStateUpdate (type, streamid, error);\n        };\n        \n        \n        //type: { start: 0, stop: 1}\n        onPublishStateUpdateHandle (type: 0 | 1 | 2, streamid: string, error: { code: string, msg: string }) {\n                if (type == 0) {\n                        //start publish\n                        if (this.stateCenter.publishStreamList[streamid]) {\n                                if (this.stateCenter.publishStreamList[streamid].state == ENUM_PUBLISH_STREAM_STATE.tryPublish) {\n                                        \n                                        this.stateCenter.publishStreamList[streamid].state = ENUM_PUBLISH_STREAM_STATE.update_info;\n                                        \n                                        this.streamHandler.updateStreamInfo (streamid, ENUM_STREAM_SUB_CMD.liveBegin, this.stateCenter.publishStreamList[streamid].extra_info, (err) => {\n                                                if (this.stateCenter.publishStreamList[streamid] && this.stateCenter.publishStreamList[streamid].state == ENUM_PUBLISH_STREAM_STATE.update_info) {\n                                                        this.stateCenter.publishStreamList[streamid].state = ENUM_PUBLISH_STREAM_STATE.stop;\n                                                        this.onPublishStateUpdate (1, streamid, err);\n                                                        this.streamCenter.stopPlayingStream (streamid);\n                                                }\n                                        });\n                                        \n                                } else {\n                                        this.WebrtcOnPublishStateUpdateHandle (type, streamid, error);\n                                }\n                                //当前状态为publishing时，如果小程序继续回调相同的开始推流状态码，不应该再返回推流成功的回调\n                                // else if (this.stateCenter.publishStreamList[streamid].state == ENUM_PUBLISH_STREAM_STATE.publishing) {\n                                //     this.onPublishStateUpdate(type, streamid, error);\n                                // }\n                        }\n                } else {\n                        this.onPublishStateUpdate (type, streamid, error);\n                        \n                        if (type == 1) {\n                                this.stopPublishingStream (streamid);\n                        }\n                }\n                \n        };\n        \n        \n        //重置流\n        resetStreamCenter () {\n                this.stateCenter.customUrl && (this.stateCenter.customUrl = null);\n                this.streamCenter.reset ();\n                if (!this.socketCenter.isDisConnect ()) {\n                        //send stream delete info\n                        for (let streamid in this.stateCenter.publishStreamList) {\n                                if (this.stateCenter.publishStreamList[streamid].state == ENUM_PUBLISH_STREAM_STATE.publishing) {\n                                        this.streamHandler.updateStreamInfo (streamid, ENUM_STREAM_SUB_CMD.liveEnd, this.stateCenter.publishStreamList[streamid].extra_info);\n                                }\n                        }\n                }\n                \n        }\n        \n        /*\n        *    \"zb.cm.hfwur\": \"ZegoClient.base.Common.handleFetchWebRtcUrlRsp\",\n        */\n        protected handleFetchWebRtcUrlRsp (msg: any) {\n                let streamId = msg.body.stream_id;\n                \n                if (msg.body.ptype === \"push\") {\n                        if (this.stateCenter.publishStreamList[streamId]) {\n                                this.streamCenter.startPublishingStream (streamId, msg.body.urls);\n                        } else {\n                                this.logger.error (\"cb.cm.hfwur no streamid to publish\");\n                        }\n                } else if (msg.body.ptype == \"pull\") {\n                        //check streamid exist\n                        let found = false;\n                        for (let i = 0; i < this.stateCenter.streamList.length; i++) {\n                                if (this.stateCenter.streamList[i].stream_id === streamId) {\n                                        // 根据传入的流id判断当前的流列表中是否存在该流\n                                        found = true;\n                                        break;\n                                }\n                        }\n                        \n                        if (found == false) {\n                                this.logger.warn (\"cb.cm.hfwur cannot find stream, continue to play\");\n                               // return;\n                        }\n                        this.streamCenter.startPlayingStream (streamId, msg.body.urls);\n                }\n        }\n        \n        \n      \n        \n      \n        \n       \n        \n       \n      \n     \n      \n        \n      \n        \n      \n        \n      \n      \n        \n        \n}\n","import {Common} from \"./common\";\nimport {ZegoStreamCenter} from \"../zegoStreamCenter\";\nimport {\n        ChatInfo,\n        Config,\n        ENUM_RUN_STATE,\n        ERRO, MessageInfo, MINIUM_HEARTBEAT_INTERVAL,\n        PROTO_VERSION,\n        sdkErrorList,\n        StreamInfo,\n        StreamQuality, UserInfo\n} from \"../zego.entity\";\nimport {ClientUtil} from \"../client-util\";\nimport {SocketCenter} from \"./socketCenter\";\nimport {RoomHandler} from \"./roomHandler\";\nimport {StateCenter} from \"./stateCenter\";\nimport {StreamHandler} from \"./streamHandler\";\nimport {Logger} from \"../zego.logger\";\nimport {HeartBeatHandler} from \"./heartBeatHandler\";\nimport {MessageHandler} from \"./messageHandler\";\nimport {LiveHandler} from \"./liveHandler\";\n\n// 对外开发接口，与文档保持一致；调度中心\nexport abstract class BaseCenter extends Common {\n        \n        \n        constructor (logger: Logger, streamCenter: ZegoStreamCenter) {\n                super ();\n                this.logger = logger;\n                this.stateCenter = new StateCenter ();\n                this.streamCenter = streamCenter;\n               \n                this.bindSocketHandler();\n                \n                this.bindStreamHandler();\n                \n                this.bindHeatBeatHandler();\n              \n                \n                this.bindRoomHandler();\n                \n                this.bindMessageHandler();\n                \n                this.bindLiveHandler();\n                \n                this.bindStreamCenterHandler();\n                \n        }\n        \n        \n        \n        /*\n       *    \"zb.cm.bsh.0\": \"ZegoClient.base.bindSocketHandler\",\n       */\n        bindSocketHandler(){\n                this.socketCenter = new SocketCenter (this.logger, this.stateCenter);\n                this.socketCenter.registerRouter ('push_signal', msg => {\n                        this.liveHandler.handlePushSignalMsg (msg);\n                });\n                this.socketCenter.getSocket = server => {\n                        return this.getSocket (server);\n                };\n                this.socketCenter.handlePushKickout = msg => {\n                        this.logger.info (\"zb.cm.bsh.0  call hpk\");\n                        this.roomHandler.setRunState (ENUM_RUN_STATE.logout);\n                        this.roomHandler.resetRoom ();\n                        this.onKickOut ({\n                                \"code\": sdkErrorList.KICK_OUT.code,\n                                \"msg\": sdkErrorList.KICK_OUT.msg + msg.body.reason\n                        });\n                        this.logger.debug (\"zb.cm.bsh.0  call hpk success\");\n                };\n                this.socketCenter.handlePushCustomMsg = msg => {\n                        this.messageHandler.handlePushCustomMsg (msg);\n                };\n                this.socketCenter.handlePushUserStateUpdateMsg = msg => {\n                        this.roomHandler.handlePushUserStateUpdateMsg (msg);\n                };\n        \n                this.socketCenter.handlePushRoomMsg = msg => {\n                        this.onRecvRoomMsg (msg.body.chat_data, msg.body.server_msg_id, msg.body.ret_msg_id);\n                };\n                this.socketCenter.handlePushMergeMsg = msg => {\n                        this.messageHandler.handlePushMergeMsg (msg);\n                };\n                this.socketCenter.handlePushTransMsg = msg => {\n                        this.messageHandler.handlePushTransMsg (msg);\n                };\n                this.socketCenter.handleBigImMsgRsp = msg=>{\n                        this.messageHandler.handleBigImMsgRsp(msg);\n                };\n        }\n        \n        bindStreamHandler(){\n                this.streamHandler = new StreamHandler (this.logger, this.stateCenter, this.socketCenter);\n                this.streamHandler.onStreamUpdated = (type: number, streamList: any[]) => {\n                        this.onStreamUpdated (type, streamList);\n                };\n                this.streamHandler.onPublishStateUpdate = (type: 0 | 1 | 2, streamid: string, error: ERRO)=>{\n                        this.onPublishStateUpdate(type,streamid,error);\n                };\n                this.streamHandler.onStreamExtraInfoUpdated = (streamList: any[]) => {\n                        this.onStreamExtraInfoUpdated (streamList);\n                };\n                this.streamHandler.setCDNInfo = (streamInfo: { urls_flv: string, urls_hls: string, urls_rtmp: string },\n                                                streamItem: { urls_flv: string, urls_m3u8: string, urls_rtmp: string })=>{\n                        this.setCDNInfo(streamInfo , streamItem );\n                }\n        }\n        \n        bindHeatBeatHandler(){\n                this.heartBeatHandler = new HeartBeatHandler (this.logger, this.stateCenter, this.socketCenter);\n                this.heartBeatHandler.onRecvReliableMessage = (type: string, seq: number, data: String) => {\n                        this.onRecvReliableMessage (type, seq, data);\n                };\n                this.heartBeatHandler.handleFetchStreamListRsp = (msg) => {\n                        this.streamHandler.handleFetchStreamListRsp (msg);\n                };\n                this.heartBeatHandler.fetchUserList = () => {\n                        this.roomHandler.fetchUserList ();\n                };\n                this.heartBeatHandler.onUpdateOnlineCount = (roomId: string, userCount: number) => {\n                        this.onUpdateOnlineCount (roomId, userCount);\n                };\n                this.heartBeatHandler.updateStreamInfo = (streamid: string, cmd: string | number, stream_extra_info: string = '', error?: Function) => {\n                        this.streamHandler.updateStreamInfo (streamid, cmd, stream_extra_info, error);\n                };\n        }\n        \n        /*\n       *    \"zb.cm.brh\": \"ZegoClient.base.bindRoomHandler\",\n       */\n        bindRoomHandler(){\n                this.roomHandler = new RoomHandler (this.logger, this.stateCenter, this.socketCenter);\n                this.roomHandler.loginSuccessCallBack = (lastRunState: number, msg: any) => {\n                        //处理心跳\n                        const heartbeatInterval = msg.body.hearbeat_interval < MINIUM_HEARTBEAT_INTERVAL ? MINIUM_HEARTBEAT_INTERVAL : msg.body.hearbeat_interval;\n                        setTimeout (() => {\n                                this.heartBeatHandler.start (heartbeatInterval);\n                        }, heartbeatInterval);\n                \n                \n                        //消息检查\n                        this.heartBeatHandler.resetCheckMessage ();\n                        this.heartBeatHandler.startCheckMessageTimeout ();\n        \n                        \n                        this.streamCenter.setSessionInfo(this.stateCenter.appid, this.stateCenter.idName, this.stateCenter.token, this.stateCenter.testEnvironment);\n                       \n                        //房间成员变化\n                        //handle anchor info\n                        if (msg.body.anchor_info) {\n                                this.onGetAnchorInfo (msg.body.anchor_info.anchor_id_name, msg.body.anchor_info.anchor_nick_name);\n                        }\n                \n                        if (msg.body.online_count) {\n                                this.onUpdateOnlineCount (this.stateCenter.roomid, msg.body.online_count);\n                        }\n                \n                        //handle userStateUpdate\n                        this.logger.info (\"zb.cm.brh hls userStateUpdate \" + this.stateCenter.userStateUpdate);\n                \n                        if (this.stateCenter.userStateUpdate) {\n                                this.logger.info (\"zb.cm.brh hls fetch all new userlist\");\n                                this.roomHandler.fetchUserList ();\n                        }\n                \n                \n                        //流处理理\n                        this.streamHandler.handleStreamStart (lastRunState, msg);\n                \n                \n                };\n                this.roomHandler.onGetTotalUserList = (roomId: string, userList: any[]) => {\n                        this.onGetTotalUserList (roomId, userList);\n                };\n                this.roomHandler.resetRoomCallBack = () => {\n                        // 清除心跳计时器对象\n                        this.heartBeatHandler.resetHeartbeat ();\n                \n                        // 清除检查消息循环\n                        this.heartBeatHandler.resetCheckMessage ();\n                \n                        //清除推拉流状态\n                        this.resetStreamCenter ();\n                };\n                this.roomHandler.onUserStateUpdate = (roomId: string, userList: UserInfo[]) => {\n                        this.onUserStateUpdate (roomId, userList);\n                };\n        }\n        \n    \n        bindMessageHandler(){\n                this.messageHandler = new MessageHandler (this.logger, this.stateCenter, this.socketCenter);\n                this.messageHandler.onRecvCustomCommand = (from_userid: string, from_idname: string, custom_content: string) => {\n                        this.onRecvCustomCommand (from_userid, from_idname, custom_content);\n                };\n                this.messageHandler.onRecvBigRoomMessage = (messageList: MessageInfo[], roomId: string)=>{\n                        this.onRecvBigRoomMessage(messageList, roomId);\n                };\n                this.messageHandler.onRecvReliableMessage = (type: string, seq: number, data: String) => {\n                        this.onRecvReliableMessage (type, seq, data);\n                };\n        }\n        \n        bindLiveHandler(){\n                this.liveHandler = new LiveHandler (this.logger, this.stateCenter, this.socketCenter);\n                this.liveHandler.onRecvEndJoinLiveCommand = (requestId: string, from_userid: string, from_username: string, roomid: string)=>{\n                        this.onRecvEndJoinLiveCommand(requestId, from_userid, from_username, roomid);\n                };\n                this.liveHandler.onRecvInviteJoinLiveRequest = (requestId: string, from_userid: string, from_username: string, roomid: string)=>{\n                        this.onRecvInviteJoinLiveRequest(requestId, from_userid, from_username, roomid);\n                };\n                this.liveHandler.onRecvJoinLiveRequest =  (requestId: string, from_userid: string, from_username: string, roomid: string)=>{\n                        this.onRecvJoinLiveRequest(requestId, from_userid, from_username, roomid);\n                };\n        \n        }\n        \n        bindStreamCenterHandler(){\n                this.streamCenter.onPlayStateUpdate = (type: 0 | 1 | 2, streamid: string, error: ERRO) => {\n                        this.onPlayStateUpdateHandle (type, streamid, error);\n                };\n                this.streamCenter.onPlayQualityUpdate = (streamId: string, streamQuality: StreamQuality) => {\n                        this.onPlayQualityUpdate (streamId, streamQuality);\n                };\n                this.streamCenter.onPublishStateUpdate = (type: 0 | 1 | 2, streamid: string, error: ERRO) => {\n                        this.onPublishStateUpdateHandle (type, streamid, error);\n                };\n                this.streamCenter.onPublishQualityUpdate = (streamId: string, streamQuality: StreamQuality) => {\n                        this.onPublishQualityUpdate (streamId, streamQuality);\n                };\n                this.streamCenter.onPlayerStreamUrlUpdate = (streamid: string, url: string, type: string) => {\n                        this.onStreamUrlUpdate (streamid, url, type);\n                };\n                this.streamCenter.onVideoSizeChanged = (streamId: string, videoWidth: number, videoHeight: number) => {\n                        this.onVideoSizeChanged (streamId, videoWidth, videoHeight);\n                };\n                \n        }\n        \n        \n        /*********\n         *\n         * 下面的方法微信和web端实现一样，共用\n         *\n         *\n         * ****/\n        /*\n        *    \"zb.cm.cf\": \"ZegoClient.base.config\",\n        */\n        // 配置client\n        config (option: Config): boolean {\n                this.logger.debug (\"zb.cm.cf call\");\n                if (!ClientUtil.checkConfigParam (option, this.logger)) {\n                        this.logger.error (\"zb.cm.cf param error\");\n                        return false;\n                }\n                \n                \n                this.stateCenter.appid = option.appid;\n                this.stateCenter.server = option.server;\n                this.stateCenter.idName = option.idName;\n                this.stateCenter.nickName = option.nickName;\n                \n                this.logger.setLogLevel (option.logLevel);\n                if (option.audienceCreateRoom === false) {\n                        this.stateCenter.roomCreateFlag = 0;\n                }\n                \n                if (!option.remoteLogLevel) {\n                        this.logger.setRemoteLogLevel (option.remoteLogLevel);\n                } else {\n                        this.logger.setRemoteLogLevel (0);\n                }\n                this.logger.setSessionInfo (option.appid, \"\", \"\", option.idName, \"\", PROTO_VERSION);\n                \n                if (option.logUrl) {\n                        this.logger.openLogServer (option.logUrl);\n                }\n                \n                \n                if (this.stateCenter.server.indexOf (\"test2-wsliveroom-api.zego.im\") != -1) {\n                        this.stateCenter.testEnvironment = true;\n                }\n                \n                this.stateCenter.configOK = true;\n                this.logger.debug (\"zb.cm.cf call success\");\n                return true;\n                \n        }\n        \n        \n        //房间相关---登录，房间人员变化\n        login (roomid: string, role: 1 | 2, token: string, success: (list: StreamInfo[]) => void, error: (err: ERRO) => void): void {\n                this.roomHandler.login (roomid, role, token, success, error);\n        };\n        \n        logout (): boolean {\n                return this.roomHandler.logout ();\n        };\n        \n        setUserStateUpdate (update: boolean) {\n                this.roomHandler.setUserStateUpdate (update);\n        }\n        \n        onUserStateUpdate (roomId: string, userList: UserInfo[]) {\n        }\n        \n        onGetTotalUserList (roomId: string, userList: { idName: string, nickName: string, role: 1 | 2 }[]) {\n        }\n        \n        onUpdateOnlineCount (roomId: string, userCount: number) {\n        }\n        \n        onGetAnchorInfo (anchor_userid: string, anchro_username: string) {\n        }\n        \n        /*\n        *    \"zc.p.r\": \"ZegoClient.release\"\n        */\n        // 释放房间和播放器\n        release () {\n                this.logger.debug (\"zb.cm.rl call\");\n                this.roomHandler.setRunState (ENUM_RUN_STATE.logout);\n                this.roomHandler.resetRoom ();\n                \n                this.logger.stopLogServer ();\n                this.logger.debug (\"zb.cm.rl call success\");\n        }\n        \n        \n        sendCustomCommand (dstMembers: string[], customContent: string | Object, success: (seq: number, customContent: string) => void, error: (err: ERRO, seq: number, customContent: string) => void): boolean {\n                return this.messageHandler.sendCustomCommand (dstMembers, customContent, success, error);\n        }\n        \n        onRecvCustomCommand (from_userid: string, from_idname: string, custom_content: string) {\n        }\n        \n        \n        sendRoomMsg (msg_category: 1 | 2 | 3, msg_type: 1 | 2, msg_content: string, success: Function, error: Function) {\n                this.messageHandler.sendRoomMsg (msg_category, msg_type, msg_content, success, error)\n        }\n        \n        onRecvRoomMsg (chat_data: ChatInfo[], server_msg_id: number, ret_msg_id: number) {\n        }\n        \n        \n        sendReliableMessage (type: string, data: string, success: (seq: number) => void, error: (err: ERRO, seq: number) => void) {\n                this.messageHandler.sendReliableMessage (type, data, success, error)\n        }\n        \n        onRecvReliableMessage (type: string, seq: number, data: String) {\n        }\n        \n        \n        sendBigRoomMessage (type: 1 | 2, category: 1 | 2 | 3, content: string, success: (seq: number, messageId: string) => void, error: (err: ERRO, seq: number) => void) {\n                this.messageHandler.sendBigRoomMessage (type, category, content, success, error);\n        }\n        \n        onRecvBigRoomMessage (messageList: MessageInfo[], roomId: string) {\n        }\n        \n        \n        sendRelayMessage (type: string, data: string, success: (seq: number) => void, error: (err: ERRO, seq: number) => void) {\n                \n                this.messageHandler.sendRelayMessage (type, data, success, error);\n        }\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        requestJoinLive (destIdName: string, success: (seq: number) => void, error: (err: ERRO, seq: number) => void,\n                         resultCallback: (result: boolean, fromUserId: string, fromUserName: string) => void): boolean {\n                return this.liveHandler.requestJoinLive(destIdName,success,error,resultCallback);\n        }\n        \n        onRecvJoinLiveRequest (requestId: string, from_userid: string, from_username: string, roomid: string) {\n        }\n        \n        \n        inviteJoinLive (destIdName: string, success: (seq: number) => void, error: (err: ERRO, seq: number) => void,\n                        resultCallback: (result: boolean, fromUserId: string, fromUserName: string) => void): boolean {\n                 \n                return this.liveHandler.inviteJoinLive(destIdName,success,error,resultCallback);\n        }\n        \n        onRecvInviteJoinLiveRequest (requestId: string, from_userid: string, from_username: string, roomid: string) {\n        }\n        \n        \n        \n        endJoinLive (destIdName: string, success: (seq: number) => void, error: (err: ERRO, seq: number) => void): boolean {\n                return this.liveHandler.endJoinLive(destIdName,success,error);\n        }\n        \n        onRecvEndJoinLiveCommand (requestId: string, from_userid: string, from_username: string, roomid: string) {\n        }\n        \n        \n        \n        respondJoinLive (requestId: string, respondResult: boolean, success?: (seq: number) => void, error?: (err: ERRO, seq: number) => void): boolean {\n                  return  this.liveHandler.respondJoinLive(requestId,respondResult,success,error);\n        }\n        \n        \n        \n        \n         /*\n          *    \"zc.p.ums\": \"ZegoClient.updateMixStream\",//更新混流信令\n          */\n        updateMixStream (mixStreamConfig, successCallback, errorCallback): boolean {\n                return this.streamHandler.updateMixStream(mixStreamConfig, successCallback, errorCallback);\n        };\n        \n        /*\n         *    \"zc.p.sms\": \"ZegoClient.stopMixStream\", //停止混流信令\n         */\n        stopMixStream (mixStreamConfig, successCallback, errorCallback) {\n                return this.streamHandler.stopMixStream(mixStreamConfig, successCallback, errorCallback);\n        };\n        \n        \n        \n        updateStreamExtraInfo (streamid: string, extraInfo: string): boolean {\n                return this.streamHandler.updateStreamExtraInfo(streamid,extraInfo);\n        }\n        \n        \n        \n        \n        onStreamUrlUpdate (streamid: string, url: string, type: string){\n        \n        };\n        \n        onStreamUpdated (type: number, streamList: StreamInfo[]) {\n        }\n        \n        onStreamExtraInfoUpdated (streamList: StreamInfo[]) {\n        }\n        \n        \n        \n        onPlayStateUpdate (type: number, streamid: string, error: ERRO|number) {\n        }\n        \n        onVideoSizeChanged (streamId: string, videoWidth: number, videoHeight: number) {\n        \n        }\n        \n        onPlayQualityUpdate (streamId: string, streamQuality: StreamQuality) {\n        }\n        \n        onPublishStateUpdate (type: number, streamid: string, error: ERRO|number) {\n        }\n        \n        onPublishQualityUpdate (streamId: string, streamQuality: StreamQuality) {\n        }\n        \n        \n        \n        \n        \n        \n        \n        /********\n         *\n         *\n         *  下面的方法都需要被覆盖，这里只是空实现\n         *\n         *\n         *\n         *\n         *\n         *\n         *\n         *\n         *\n         *\n         * *******/\n        \n        onDisconnect (err: ERRO) {\n        }\n        \n        onKickOut (err: ERRO) {\n        }\n        \n}\n","import {Logger} from \"./zego.logger\";\nimport {ERRO, StreamQuality} from \"./zego.entity\";\n\nexport abstract class ZegoStreamCenter {\n        \n        constructor (log: Logger) {\n        \n        }\n        \n        abstract stopPlayingStream (streamId: string);\n        \n        abstract reset ();\n        \n        abstract startPlayingStream (streamid: string, serverUrls: string[], currentPlaySourceType?: number): boolean;\n        \n        abstract startPublishingStream (streamid: string, serverUrls: string[], preferPublishSourceType?: number);\n        \n        abstract onPlayStateUpdate (type: 0 | 1 | 2, streamid: string, error: ERRO);\n        \n        abstract onPlayQualityUpdate (streamId: string, streamQuality: StreamQuality);\n        \n        abstract onPublishStateUpdate (type: 0 | 1 | 2, streamid: string, error: ERRO);\n        \n        abstract onPublishQualityUpdate (streamId: string, streamQuality: StreamQuality) ;\n        \n        abstract onPlayerStreamUrlUpdate (streamid: string, url: string, type: string);\n        \n        abstract onVideoSizeChanged (streamId: string, videoWidth: number, videoHeight: number);\n        \n        \n        \n        setSessionInfo (appid: number, userid: string, token: string, testEnvironment: boolean) {\n        };\n}\n\n\n","import {ENUM_PLAY_STATE, ENUM_RETRY_STATE, PlayOption} from \"../common/zego.entity\";\nimport {ZegoDataReport} from \"../common/zego.datareport\";\nimport {ZegoSignal} from \"../common/zego.signal\";\nimport {ENUM_PLAY_STATE_UPDATE, getSeq, playErrorList, publishErrorList} from \"../common/zego.extern\";\nimport {Logger} from \"../common/zego.logger\";\n\nexport class ZegoPlayWeb {\n        logger: Logger;\n        signal: ZegoSignal;\n        state = ENUM_PLAY_STATE.stop;\n        \n       \n       \n        candidateInfo = [];\n        \n        waitICETimer = null;\n        waitingICETimeInterval = 5000;\n        \n        waitingOfferTimer = null;\n        waitingOfferTimeInterval = 5000;\n        \n        waitingServerTimer = null;\n        waitingServerTimerInterval = 3000;\n        \n        // waitingAnswerTimer: number;\n        // waitingAnswerTimeInterval = 0;\n        \n        qualityTimer = null;\n        qualityTimeInterval: number;\n        \n        \n        playQualityList = [];\n        maxQualityListCount = 10;\n        lastPlayStats = {\n                time: 0,\n                audioBytesReceived: 0,\n                videoBytesReceived: 0,\n                framesDecoded: 0,\n                framesReceived: 0,\n                framesDropped: 0\n        };\n        \n        dataReport: ZegoDataReport;\n        reportSeq = getSeq ();\n        \n        videoSizeCallback = false;\n        \n        qualityUpload = false;\n        qualityUploadInterval = 30 * 1000;\n        qualityUploadLastTime = 0;\n        \n        //retry\n        maxRetryCount = 3;\n        currentRetryCount = 0;\n        retryState = ENUM_RETRY_STATE.didNotStart;\n       \n        \n        \n        remoteVideo: any;\n        streamId: string;\n        audioOutput: any;\n        sessionId: number;\n        sessionSeq: number;\n        answerSeq: number;\n        audioOputput: any;\n        \n        peerConnection: RTCPeerConnection | any;\n       \n        \n        playOption:{\n                 playType:'audio'|'video'|'all'\n         };\n        closeSessionSignal = false;\n        \n        constructor (log: Logger, signal: ZegoSignal, dataReport: ZegoDataReport, qualityTimeInterval: number) {\n                \n                this.logger = log;\n                this.signal = signal;\n                this.dataReport = dataReport;\n                this.qualityTimeInterval = qualityTimeInterval;\n                dataReport.newReport (this.reportSeq);\n        }\n        \n        \n        /*\n         *    \"zp.sad.1\": \"ZegoPlayWeb.setAudioDestination\"\n         */\n        setAudioDestination (audioOutput: string) {\n                if (!this.remoteVideo) {\n                        this.logger.info (\"zp.sad.1 no remoteVideo\");\n                        return false;\n                }\n                \n                if (this.remoteVideo.sinkId !== 'undefined') {\n                        this.remoteVideo.setSinkId (audioOutput).then (() => {\n                                this.logger.info (\"zp.sad.1 success device: \" + audioOutput);\n                                // this.audioOutput = audioOutput;\n                        }).catch ( (error)=> {\n                                this.logger.info (\"zp.sad.1 \" + error.name);\n                        });\n                        return true;\n                } else {\n                        this.logger.error (\"zp.sad.1 browser does not suppport\");\n                        return false;\n                }\n        };\n        \n        /*\n         *    \"zp.sp.1\": \"ZegoPlayWeb.startPlay\"\n         */\n        startPlay (streamId: string, remoteVideo: HTMLElement, audioOutput?: string,playOption?:PlayOption) {\n                this.logger.debug (\"zp.sp.1 called \", streamId);\n                \n                if (!streamId) {\n                        this.logger.warn (\"zp.sp.1 streamId is null\");\n                        return;\n                }\n                \n                this.streamId = streamId;\n                this.remoteVideo = remoteVideo;\n                this.audioOutput = audioOutput;\n                this.playOption = playOption;\n                \n                //create session\n                this.sessionSeq = getSeq ();\n                this.dataReport.eventStart (this.reportSeq, \"CreateSession\");\n                this.signal.createSession (this.sessionSeq, 0, streamId, (seq, sessionId, data) => {\n                        this.dataReport.eventEndWithMsg (this.reportSeq, \"CreateSession\", {\n                                sessionId: data.session_id\n                        });\n                        \n                        this.logger.info('zp.sp.1 sessionId:'+data.session_id);\n                        \n                        if (this.sessionSeq != seq) {\n                                this.logger.error (\"zp.sp.1 seq is not match.\");\n                                return;\n                        }\n                        \n                        if (data.result !== 0) {\n                                this.logger.error (\"zp.sp.1 create error\");\n                                this.playStateUpdateError (playErrorList.CREATE_SESSION_ERROR);\n                        } else {\n                                this.sessionId = data.session_id;\n                                this.onCreatePlaySessionSuccess (data);\n                        }\n                        \n                }, (err, seq) => {\n                        this.dataReport.eventEndWithMsg (this.reportSeq, \"CreateSession\", {\n                                error: err\n                        });\n                        \n                        this.playStateUpdateError (playErrorList.SEND_SESSION_TIMEOUT);\n                });\n                \n                this.state = ENUM_PLAY_STATE.waitingSessionRsp;\n                this.logger.debug (\"zp.sp.1 called success\");\n        };\n        \n        \n        //////////////////////////////////////////////////////////////////////////////////////////////\n        // create session result\n        /*\n         *    \"zp.ops.1\": \"ZegoPlayWeb.onCreatePlaySessionSuccess\"\n         */\n        private onCreatePlaySessionSuccess (data) {\n                this.logger.debug (\"zp.ops.1 success\");\n                \n                let urls = [];\n                if (data.turn_server) urls.push (data.turn_server);\n                if (data.stun_server) urls.push (data.stun_server);\n                \n                const configuration = {\n                        iceServers: [{\n                                urls: urls,\n                                username: data.turn_username,\n                                credential: data.turn_auth_key\n                        }]\n                };\n                \n                this.logger.info (\"zp.ops.1 username: \" + data.turn_username);\n                this.logger.info (\"zp.ops.1 credential: \" + data.turn_auth_key);\n                \n                this.peerConnection = new RTCPeerConnection (configuration);\n                this.peerConnection.onicecandidate = (e) => {\n                        this.onIceCandidate (e);\n                };\n                \n                this.peerConnection.onsignalingstatechange = (e:Event) => {\n                        this.onConnectionStateChange (e);\n                };\n                \n                this.peerConnection.oniceconnectionstatechange = (e) => {\n                        this.onIceConnectionStateChange (e);\n                };\n                \n                this.peerConnection.onaddstream = (e) => {\n                        this.onGotRemoteStream (e);\n                };\n                \n                this.remoteVideo.oncanplay = () => {\n                        this.logger.debug (\"zp.ops.1 \" + this.remoteVideo.videoWidth + \" X \" + this.remoteVideo.videoHeight);\n                        if (!this.videoSizeCallback) {\n                                this.logger.debug (\"zp.ops.1 onresize callback\");\n                                \n                                this.onVideoSizeChanged (this.streamId, this.remoteVideo.videoWidth, this.remoteVideo.videoHeight);\n                                this.videoSizeCallback = true;\n                        }\n                };\n        \n         \n                let offerOptions = {\n                        offerToReceiveAudio: 1,\n                        offerToReceiveVideo: 1,\n                };\n                if(this.playOption&&this.playOption.playType === 'audio')offerOptions.offerToReceiveVideo = 0;\n                if(this.playOption&&this.playOption.playType === 'video')offerOptions.offerToReceiveAudio = 0;\n                \n                this.logger.info (\"zp.ops.1 createOffer: \" + offerOptions);\n                //create offer\n                this.dataReport.eventStart (this.reportSeq, \"CreateOffer\");\n                this.peerConnection.createOffer (offerOptions).then (\n                            (desc) => {\n                                    this.dataReport.eventEnd (this.reportSeq, \"CreateOffer\");\n                            \n                                    this.onCreateOfferSuccess (desc);\n                            },\n                            (error) => {\n                                    this.dataReport.eventEndWithMsg (this.reportSeq, \"CreateOffer\", {\n                                            error: error.toString ()\n                                    });\n                            \n                                    this.logger.error (\"zp.ops.0 create offer error \" + error.toString ());\n                                    this.playStateUpdateError (playErrorList.CREATE_OFFER_ERROR);\n                            }\n                );\n                \n                \n                //register callback\n                this.signal.registerPushCallback (\"MediaDescPush\", this.sessionId, (seq: number, sessionId: number, data: any) => {\n                        this.onRecvMediaDesc (seq, sessionId, data);\n                });\n                this.signal.registerPushCallback (\"CandidateInfoPush\", this.sessionId, (seq: number, sessionId: number, data: any) => {\n                        this.onRecvCandidateInfo (seq, sessionId, data);\n                });\n                this.signal.registerPushCallback (\"CloseSessionPush\", this.sessionId, (seq: number, sessionId: number, data: any) => {\n                        this.onRecvCloseSession (seq, sessionId, data);\n                });\n                // this.signal.registerPushCallback(\"WebSocketDisconnect\", this.sessionId, onDisconnect, this);\n                this.signal.registerPushCallback (\"SessionResetPush\", this.sessionId, (seq: number, sessionId: number, data: any) => {\n                        this.onRecvResetSession (seq, sessionId, data);\n                });\n                \n                this.logger.debug (\"zp.ops.1 call success\");\n        }\n        \n        \n        //////////////////////////////////////////////////////////////////////////////////////////////\n        // create offer result\n        /*\n         *    \"zp.oco.1\": \"ZegoPlayWeb.onCreateOfferSuccess\"\n         */\n        onCreateOfferSuccess (desc: { sdp: any }) {\n                this.logger.debug (\"zp.oco.1 localSdp \" , desc.sdp);\n                \n                this.dataReport.eventStart (this.reportSeq, \"SetLocalDescription\");\n                this.peerConnection.setLocalDescription (desc).then (\n                            () => {\n                                    this.dataReport.eventEnd (this.reportSeq, \"SetLocalDescription\");\n                            \n                                    this.onSetLocalDescriptionSuccess (desc);\n                            },\n                            (error) => {\n                                    this.logger.error (\"zp.oca.1 set error \" + error.toString ());\n                                    this.dataReport.eventEnd (this.reportSeq, \"SetLocalDescription\", {\n                                            error: error.toString ()\n                                    });\n                            \n                                    this.playStateUpdateError (playErrorList.SET_LOCAL_DESC_ERROR);\n                            }\n                );\n        }\n        \n        \n        //////////////////////////////////////////////////////////////////////////////////////////////\n        // setLocalDescription result\n        /*\n         *    \"zp.osd.1\": \"ZegoPlayWeb.onSetLocalDescriptionSuccess\"\n         */\n        private onSetLocalDescriptionSuccess (desc) {\n                this.logger.debug (\"zp.osd.1 success\");\n                \n                let mediaDescription = {\n                        sdp: desc.sdp\n                };\n                \n                this.answerSeq = getSeq ();\n                this.dataReport.eventStart (this.reportSeq, \"SendMediaDesc\");\n                this.signal.sendMediaDesc (this.answerSeq, this.sessionId, 0, mediaDescription, (seq, sessionId, data) => {\n                        if (this.answerSeq != seq || this.sessionId != sessionId) {\n                                this.logger.error (\"zp.osd.1 seq or sessionId is not equal \" + this.answerSeq + \" \" + seq, +\" \" + this.sessionId + \" \" + sessionId);\n                                return;\n                        }\n                        \n                        this.logger.debug (\"zp.osd.1 send success\");\n                        \n                        this.dataReport.eventEnd (this.reportSeq, \"SendMediaDesc\");\n                        \n                        this.state = ENUM_PLAY_STATE.waitingServerAnswer;\n                        \n                        //send candidate\n                        this.sendCandidateInfo (this.candidateInfo);\n                        this.candidateInfo = [];\n                        \n                        //setTimer\n                        this.waitingOfferTimer = setTimeout (() => {\n                                if (this.state == ENUM_PLAY_STATE.waitingOffserRsp) {\n                                        this.logger.error (\"zp.osd.1 waiting timeout\");\n                                        this.playStateUpdateError (playErrorList.SERVER_CANDIDATE_TIMEOUT);\n                                }\n                        }, this.waitingOfferTimeInterval);\n                        \n                }, (err, seq) => {\n                        this.logger.error (\"zp.osd.1 failed to send \" + err);\n                        this.dataReport.eventEndWithMsg (this.reportSeq, \"SendMediaDesc\", {\n                                error: err\n                        });\n                        \n                        this.playStateUpdateError (playErrorList.SEND_MEDIA_DESC_TIMEOUT);\n                });\n                \n                this.state = ENUM_PLAY_STATE.waitingOffserRsp;\n        }\n        \n        \n        //////////////////////////////////////////////////////////////////////////////////////////////\n        // server push offer (setRemoteDescription)\n        /*\n         *    \"zp.orm.1\": \"ZegoPlayWeb.onRecvMediaDesc\"\n         */\n        private onRecvMediaDesc (seq: number, sessionId: number, data: any) {\n                this.logger.debug (\"zp.orm.1 received \", data);\n                \n                if (this.state !== ENUM_PLAY_STATE.waitingServerAnswer) {\n                        this.logger.error (\"zp.orm.1 current state \" + this.state + \" not allowed\");\n                        return;\n                }\n                \n                if (this.waitingOfferTimer != null) {\n                        clearTimeout (this.waitingOfferTimer);\n                        this.waitingOfferTimer = null;\n                }\n                \n                this.dataReport.addEvent (this.reportSeq, \"RecvMediaDesc\");\n                \n                this.signal.sendMediaDescAck (seq, this.sessionId, 0);\n                \n                let offerDescription: RTCSessionDescription = {\n                        type: \"answer\",\n                        sdp: data.sdp,\n                        toJSON: () => {\n                        }\n                        \n                };\n                \n                \n                \n                //setRemoteDescritpion\n                this.dataReport.eventStart (this.reportSeq, \"SetRemoteDescription\");\n                this.logger.info (\"zp.orm.1 remoteSdp \", offerDescription.sdp);\n                this.peerConnection.setRemoteDescription (new RTCSessionDescription (offerDescription)).then (() => {\n                        this.dataReport.eventEnd (this.reportSeq, \"SetRemoteDescription\");\n                        this.logger.debug (\"zp.orm.1 set success\");\n                      \n                }, (error) => {\n                        this.logger.error (\"zp.orm.1 set remote error \" + error.toString ());\n                        \n                        this.dataReport.eventEndWithMsg (this.reportSeq, \"SetRemoteDescription\", {\n                                error: error.toString ()\n                        });\n                        \n                        this.playStateUpdateError (playErrorList.SET_REMOTE_DESC_ERROR);\n                });\n        \n                //setTimer\n                this.waitICETimer = setTimeout (() => {\n                        if (this.state == ENUM_PLAY_STATE.waitingServerICE) {\n                                this.logger.error (\"zp.orm.1 waiting server timeout\");\n                                this.playStateUpdateError (playErrorList.SERVER_CANDIDATE_TIMEOUT);\n                        }\n                }, this.waitingICETimeInterval);\n        \n        \n                this.state = ENUM_PLAY_STATE.waitingServerICE;\n                this.logger.debug (\"zp.orm.1 call success\");\n        }\n        \n        \n        \n        //////////////////////////////////////////////////////////////////////////////////////////////\n        // server push ICE (addIceCandidate)\n        /*\n         *    \"zp.orci.1\": \"ZegoPlayWeb.onRecvCandidateInfo\"\n         */\n        private onRecvCandidateInfo (seq: number, sessionId: number, data: any) {\n                \n                this.logger.debug (\"zp.orci.1 received \");\n                \n                if (this.state != ENUM_PLAY_STATE.waitingServerICE) {\n                        this.logger.warn (\"zp.orci.1 current state \" + this.state + \" not allowed\");\n                        return;\n                }\n                \n                if (this.waitICETimer != null) {\n                        clearTimeout (this.waitICETimer);\n                        this.waitICETimer = null;\n                }\n                \n                this.dataReport.addEvent (this.reportSeq, \"RecvIceCandidate\");\n                \n                this.signal.sendCandidateInfoAck (seq, this.sessionId, 0);\n                \n                for (let i = 0; i < data.infos.length; i++) {\n                        const ice = {\n                                sdpMid: data.infos[i].sdpMid,\n                                sdpMLineIndex: data.infos[i].sdpMLineIndex,\n                                candidate: data.infos[i].candidate\n                        };\n                        \n                        this.logger.debug (\"zp.orci.1 candidate \" + ice.candidate);\n                        \n                        this.peerConnection.addIceCandidate (new RTCIceCandidate (ice)).then (() => {\n                                this.logger.debug (\"zp.orci.1 add success\");\n                        }, (error) => {\n                                this.logger.error (\"zp.orci.1 add error \" + error.toString ());\n                                this.playStateUpdateError (playErrorList.SERVER_CANDIDATE_ERROR);\n                        });\n                }\n                \n                this.state = ENUM_PLAY_STATE.connecting;\n                \n                this.logger.debug (\"zp.orci.1 call success\");\n        }\n        \n        //////////////////////////////////////////////////////////////////////////////////////////////\n        // onIceCandidate callback\n        /*\n         *    \"zp.oic.1\": \"ZegoPlayWeb.onIceCandidate\"\n         */\n        private onIceCandidate (event) {\n                this.logger.info (\"zp.oic.1 called\");\n                \n                //send candidate to other peer\n                if (event.candidate == undefined) {\n                        return;\n                }\n                \n                this.logger.debug (\"zp.oic.1 candidate \" + event.candidate.candidate);\n        \n                if (this.state < ENUM_PLAY_STATE.waitingServerICE || this.state == ENUM_PLAY_STATE.stop) {\n                        //save candidate Info\n                        this.logger.debug (\"zp.oic.1 cached\");\n                        \n                        this.candidateInfo.push ({\n                                candidate: event.candidate.candidate,\n                                sdpMid: event.candidate.sdpMid,\n                                sdpMLineIndex: event.candidate.sdpMLineIndex\n                        });\n                } else {\n                        this.logger.debug (\"zp.oic.1 send\");\n                        \n                        const candidate = {\n                                candidate: event.candidate.candidate,\n                                sdpMid: event.candidate.sdpMid,\n                                sdpMLineIndex: event.candidate.sdpMLineIndex\n                        };\n                        \n                        this.sendCandidateInfo ([candidate]);\n                }\n        }\n        \n        //////////////////////////////////////////////////////////////////////////////////////////////\n        // onIceStateChange callback\n        /*\n         *    \"zp.ocs.1\": \"ZegoPlayWeb.onConnectionStateChange\"\n         */\n        private onConnectionStateChange (event) {\n                this.logger.info (\"zp.oisc.1 called \"+event.target.signalingState);\n        }\n        \n        /*\n         *    \"zp.oics.1\": \"ZegoPlayWeb.onIceConnectionStateChange\"\n         */\n        private onIceConnectionStateChange (event) {\n                \n                if (this.state == ENUM_PLAY_STATE.stop || this.peerConnection == null) {\n                        return;\n                }\n                \n                this.logger.info (\"zp.oisc.1  stateChanged \" + this.peerConnection.iceConnectionState);\n                \n                if (this.peerConnection.iceConnectionState === \"connected\") {\n                        this.dataReport.addEvent (this.reportSeq, \"IceConnected\");\n                        \n                        if (this.state != ENUM_PLAY_STATE.playing) {\n                                this.onPlayStateUpdate (ENUM_PLAY_STATE_UPDATE.start, this.streamId);\n                        }\n                        \n                        this.state = ENUM_PLAY_STATE.playing;\n                        if (this.retryState != ENUM_RETRY_STATE.didNotStart) {\n                                this.retryState = ENUM_RETRY_STATE.finished;\n                                this.currentRetryCount = 0;\n                        }\n                        \n                        //play started\n                        this.dataReport.eventStart (this.reportSeq, \"PlayState\");\n                        \n                        //start quality timeInterval\n                        this.setPlayQualityTimer ();\n                } else if (this.peerConnection.iceConnectionState === \"closed\") {\n                        this.dataReport.addEvent (this.reportSeq, \"IceClosed\");\n                        \n                        this.checkPlayConnectionFailedState (this.peerConnection.iceConnectionState);\n                } else if (this.peerConnection.iceConnectionState === \"failed\") {\n                        this.dataReport.addEvent (this.reportSeq, \"IceFailed\");\n                        \n                        this.checkPlayConnectionFailedState (this.peerConnection.iceConnectionState);\n                }\n        }\n        \n        private checkPlayConnectionFailedState (connectionState) {\n                let state = null;\n                if (connectionState == \"failed\") {\n                        state = playErrorList.MEDIA_CONNECTION_FAILED;\n                } else if (connectionState == \"closed\") {\n                        state = playErrorList.MEDIA_CONNECTION_CLOSED;\n                }\n                \n                if (state == null) {\n                        return;\n                }\n                \n                if (this.state != ENUM_PLAY_STATE.playing && this.retryState == ENUM_PLAY_STATE.didNotStart) {\n                        this.logger.info (\"zp.oics.1  state \" + this.state + \" retryState \" + this.retryState + \" connectionState \" + connectionState);\n                        \n                        this.playStateUpdateError (state);\n                }\n                else {\n                        if (this.shouldRetryPlay ()) {\n                                this.onPlayStateUpdate (ENUM_PLAY_STATE_UPDATE.retry, this.streamId);\n                                \n                                this.startRetryPlay ();\n                        }\n                        else {\n                                this.playStateUpdateError (state);\n                        }\n                }\n        }\n        \n        //////////////////////////////////////////////////////////////////////////////////////////////\n        // retry play\n        /*\n         *    \"zp.srp.1.0\": \"ZegoPlayWeb.shouldRetryPlay\"\n         */\n        private shouldRetryPlay () {\n                if (this.retryState == ENUM_RETRY_STATE.didNotStart && this.state != ENUM_PLAY_STATE.playing) {\n                        this.logger.info (\"zp.srp.1.0 connection didn't success\");\n                        return false;\n                }\n                \n                if (this.retryState == ENUM_RETRY_STATE.retrying) {\n                        this.logger.info (\"zp.srp.0.0 already retrying\");\n                        return false;\n                }\n                \n                if (this.currentRetryCount > this.maxRetryCount) {\n                        this.logger.info (\"zp.srp.1.0 beyond max\");\n                        return false;\n                }\n                \n                this.logger.debug (\"zp.srp.1.0 call success\");\n                return true;\n        }\n        \n        /*\n         *    \"zp.srp.1\": \"ZegoPlayWeb.startRetryPlay\"\n         */\n        private startRetryPlay () {\n                this.logger.debug (\"zp.srp.0 call\");\n                \n                var streamId = this.streamId;\n                var remoteVideo = this.remoteVideo;\n                var audioOutput = this.audioOutput;\n                \n                this.resetPlay ();\n                \n                this.tryStartPlay (streamId, remoteVideo, audioOutput);\n        }\n        \n        \n        private clearTryPlayTimer () {\n                if (this.waitingServerTimer != null) {\n                        clearTimeout (this.waitingServerTimer);\n                        this.waitingServerTimer = null;\n                }\n        }\n        \n        /*\n        *    \"zp.tsp.1\": \"ZegoPublish.tryStartPlay\"\n        */\n        private tryStartPlay (streamId, remoteVideo, audioOputput) {\n                \n                this.logger.debug (\"zp.tsp.1 call\");\n                \n                this.clearTryPlayTimer ();\n                \n                this.streamId = streamId;\n                this.remoteVideo = remoteVideo;\n                this.audioOutput = audioOputput;\n                \n                if (this.currentRetryCount > this.maxRetryCount) {\n                        this.logger.error (\"zp.tsp.1 beyond max limit\");\n                        //callback error\n                        this.playStateUpdateError (playErrorList.WEBSOCKET_ERROR);\n                        return;\n                }\n                \n                this.retryState = ENUM_RETRY_STATE.retrying;\n                this.currentRetryCount += 1;\n                \n                if (this.signal.isServerConnected ()) {\n                        this.logger.debug (\"zp.tsp.1 signal connected\");\n                        \n                        this.startPlay (streamId, this.remoteVideo, this.audioOputput);\n                }\n                else {\n                        //setTimer\n                        this.logger.debug (\"zp.tsp.1 signal server not connected\");\n                        \n                        this.waitingServerTimer = setTimeout (() => {\n                                this.tryStartPlay (streamId, this.remoteVideo, this.audioOputput);\n                        }, this.waitingServerTimerInterval);\n                }\n        }\n        \n        private clearPlayQualityTimer () {\n                if (this.qualityTimer != null) {\n                        clearInterval (this.qualityTimer);\n                        this.qualityTimer = null;\n                }\n                \n                this.lastPlayStats = {\n                        time: null,\n                        audioBytesReceived: null,\n                        videoBytesReceived: null,\n                        framesDecoded: null,\n                        framesDropped: null,\n                        framesReceived: null\n                };\n        }\n        \n        //////////////////////////////////////////////////////////////////////////////////////////////\n        // reset function\n        /*\n         *    \"zp.rp.1\": \"ZegoPlayWeb.resetPlay\"\n         */\n        private resetPlay () {\n                this.logger.info (\"zp.rp.1 call\");\n                \n                this.streamId = null;\n                this.state = ENUM_PLAY_STATE.stop;\n                \n                if (this.peerConnection != undefined) {\n                        this.peerConnection.close ();\n                        this.peerConnection = null;\n                }\n                \n                if (this.waitingOfferTimer != null) {\n                        clearTimeout (this.waitingOfferTimer);\n                        this.waitingOfferTimer = null;\n                }\n                \n                if (this.waitICETimer != null) {\n                        clearTimeout (this.waitICETimer);\n                        this.waitICETimer = null;\n                }\n                \n                this.clearPlayQualityTimer ();\n                \n                if (this.remoteVideo) {\n                        this.remoteVideo.srcObject = null;\n                        this.remoteVideo.oncanplay = null;\n                        this.remoteVideo = null;\n                }\n                \n                this.audioOputput = null;\n                \n                if (this.signal) {\n                        this.signal.unregisterPushCallback (\"MediaDescPush\", this.sessionId);\n                        this.signal.unregisterPushCallback (\"CandidateInfoPush\", this.sessionId);\n                        this.signal.unregisterPushCallback (\"CloseSessionPush\", this.sessionId);\n                        // this.signal.unregisterPushCallback('WebSocketDisconnect', this.sessionId);\n                }\n                \n                // this.sessionId = 0;\n                this.sessionSeq = 0;\n                this.answerSeq = 0;\n                \n                \n                this.videoSizeCallback = false;\n                \n                this.currentRetryCount = 0;\n                this.retryState = ENUM_RETRY_STATE.didNotStart;\n                this.clearTryPlayTimer ();\n        }\n        \n\n        \n        //////////////////////////////////////////////////////////////////////////////////////////////\n        // quality timer\n        /*\n         *    \"zp.spq.1\": \"ZegoPlayWeb.setPlayQualityTimer\"\n         */\n        private setPlayQualityTimer () {\n                if (this.qualityTimer != null) {\n                        return;\n                }\n                \n                this.logger.debug (\"zp.spq.1 startTimer\");\n                \n                this.clearPlayQualityTimer ();\n                \n                this.qualityTimer = setInterval (() => {\n                        \n                        if (this.peerConnection) {\n                                this.peerConnection.getStats (null).then ((results) => {\n                                        this.getPlayStats (results);\n                                }, (error) => {\n                                        this.logger.info (\"zp.spq.1 getStats error \" + error.toString ());\n                                });\n                        }\n                        \n                }, this.qualityTimeInterval);\n                \n                this.lastPlayStats = {\n                        time: 0,\n                        audioBytesReceived: 0,\n                        videoBytesReceived: 0,\n                        framesDecoded: 0,\n                        framesReceived: 0,\n                        framesDropped: 0\n                };\n        }\n        \n        \n        /*\n         *    \"zp.gps.1\": \"ZegoPlayWeb.getPlayStats\"\n         */\n        private getPlayStats (results) {\n                if (results == undefined) {\n                        return;\n                }\n                \n                var playData = {\n                        audioFractionLost: 0,\n                        audioPacketsLost:0,\n                        videoBitrate: 0,\n                        videoFPS: 0,\n                        playData: 0,\n                        nackCount: 0,\n                        pliCount: 0,\n                        sliCount: 0,\n                        videoFractionLos: 0,\n                        audioJitter: 0,\n                        videoFractionLost: null,\n                        videoFramesDecoded:0,\n                        frameHeight: 0,\n                        frameWidth: 0,\n                        videoTransferFPS: 0,\n                        videoFramesDropped: 0,\n                        totalRoundTripTime: 0,\n                        currentRoundTripTime: 0,\n                        \n                };\n                var time = this.lastPlayStats.time;\n                results.forEach ((result) => {\n                        if ((result.type == \"inbound-rtp\" || (result.type == \"ssrc\" && result.bytesReceived != undefined)) && (result.mediaType == \"audio\" || result.id.indexOf (\"AudioStream\") >= 0)) {\n                                //audio\n                                if (time != 0) {\n                                        playData['audioBitrate'] = 8 * (result.bytesReceived - this.lastPlayStats['audioBytesReceived']) / (result.timestamp - time);\n                                }\n                                \n                                if (playData['audioBitrate'] < 0) {\n                                        playData['audioBitrate'] = 0;\n                                }\n        \n                                playData.audioJitter = result.jitter;\n                                playData.audioPacketsLost=result.packetsLost;\n                                playData.audioFractionLost = result.fractionLost;\n                                \n                                this.lastPlayStats.audioBytesReceived = result.bytesReceived;\n                                this.lastPlayStats.time = result.timestamp;\n                        }\n                        else if ((result.type == \"inbound-rtp\" || (result.type == \"ssrc\" && result.bytesReceived != undefined)) && (result.mediaType == \"video\" || result.id.indexOf (\"VideoStream\") >= 0)) {\n                                //video\n                                if (time != 0) {\n                                        playData.videoBitrate = 8 * (result.bytesReceived - this.lastPlayStats.videoBytesReceived) / (result.timestamp - time);\n                                        playData.videoFPS = 1000 * (result.framesDecoded - this.lastPlayStats.framesDecoded) / (result.timestamp - time);\n                                }\n                                \n                                if (playData.videoBitrate < 0) {\n                                        playData.videoBitrate = 0;\n                                }\n                                \n                                if (playData.videoFPS < 0) {\n                                        playData.videoFPS = 0;\n                                }\n                                \n                                //playData.jitter = result.jitter;\n                                playData.nackCount = result.nackCount;\n                                playData.pliCount = result.pliCount;\n                                playData.sliCount = result.sliCount;\n                                playData.videoFractionLost = result.fractionLost;\n                                playData.videoFramesDecoded = result.framesDecoded\n                                \n                                this.lastPlayStats.videoBytesReceived = result.bytesReceived;\n                                this.lastPlayStats.framesDecoded = result.framesDecoded;\n                                this.lastPlayStats.time = result.timestamp;\n                        }\n                        else if (result.type == \"track\" && (result.kind == \"video\" || result.id.indexOf (\"video\") >= 0)) {\n                                playData.frameHeight = result.frameHeight;\n                                playData.frameWidth = result.frameWidth;\n                                \n                                if (time != 0) {\n                                        playData.videoTransferFPS = 1000 * (result.framesReceived - this.lastPlayStats.framesReceived) / (result.timestamp - time);\n                                        playData.videoFramesDropped = result.framesDropped - this.lastPlayStats.framesDropped;\n                                }\n                                \n                                if (playData.videoTransferFPS < 0) {\n                                        playData.videoTransferFPS = 0;\n                                }\n                                \n                                if (playData.videoFramesDropped < 0) {\n                                        playData.videoFramesDropped = 0;\n                                }\n                                \n                                this.lastPlayStats.framesReceived = result.framesReceived;\n                                this.lastPlayStats.framesDropped = result.framesDropped;\n                        }\n                        else if (result.type == \"candidate-pair\") {\n                                if (result.totalRoundTripTime != undefined) {\n                                        playData.totalRoundTripTime = result.totalRoundTripTime;\n                                }\n                                \n                                if (result.currentRoundTripTime != undefined) {\n                                        playData.currentRoundTripTime = result.currentRoundTripTime;\n                                }\n                        }\n                });\n                \n                // this.logger.debug(\"zp.gps.1 audio: \" + playData.audioBitrate + \" video: \" + playData.videoBitrate +\n                // \" FPS: \" + playData.videoFPS + \" transfer: \" + playData.videoTransferFPS);\n                \n                this.uploadPlayQuality (playData);\n                \n                if (time != 0) {\n                        this.onPlayQualityUpdate (this.streamId, playData);\n                }\n        }\n        \n        /*\n         *    \"zp.upq.1\": \"ZegoPlayWeb.uploadPlayQuality\"\n         */\n        private uploadPlayQuality (playData) {\n                if (!this.qualityUpload) {\n                        return;\n                }\n                \n                var timeStamp = Date.parse (new Date () + '');\n                if (this.qualityUploadLastTime == 0 || timeStamp - this.qualityUploadLastTime >= this.qualityUploadInterval) {\n                        this.logger.debug (\"zp.upq.1 upload\");\n                        \n                        playData[\"stream_type\"] = \"play\";\n                        playData[\"stream_id\"] = this.streamId;\n                        playData[\"timeStamp\"] = timeStamp / 1000;\n                        \n                        this.signal.QualityReport (getSeq (), this.sessionId, playData, (seq, sessionId, data) => {\n                                if (data.report !== undefined) {\n                                        this.qualityUpload = data.report;\n                                        this.qualityUploadInterval = data.report_interval_ms;\n                                }\n                        },   (err, seq)=> {\n                                this.logger.info (\"zp.upq.1 upload failed \" + err);\n                        });\n                        \n                        this.qualityUploadLastTime = timeStamp;\n                }\n        }\n        \n        \n        //////////////////////////////////////////////////////////////////////////////////////////////\n        // server push resetSession\n        /*\n         *    \"zp.orrs.1\": \"ZegoPlayWeb.onRecvResetSession\"\n         */\n        private onRecvResetSession (seq: number, sessionId: number, data: any) {\n                this.logger.info (\"zp.orrs.1 received \");\n                \n                if (sessionId != this.sessionId) {\n                        this.logger.info (\"zp.orrs.1 cannot find session\");\n                        return;\n                }\n                \n                this.dataReport.addEvent (this.reportSeq, \"RecvResetSession\");\n                \n                //check should retry\n                if (this.shouldRetryPlay ()) {\n                        this.startRetryPlay ();\n                }\n        }\n        \n        //////////////////////////////////////////////////////////////////////////////////////////////\n        // server push closeSession\n        /*\n         *    \"zp.orcs.1\": \"ZegoPlayWeb.onRecvCloseSession\"\n         */\n        private onRecvCloseSession (seq: number, sessionId: number, data: any) {\n                this.logger.info (\"zp.orcs.1 reason: \" + data.reason);\n                \n                this.dataReport.addEvent (this.reportSeq, \"RecvCloseSession\");\n                \n                this.signal.sendCloseSessionAck (seq, this.sessionId, 0);\n        \n                var error =  JSON.parse(JSON.stringify(playErrorList.SESSION_CLOSED));\n                error.msg += data.reason;\n                this.playStateUpdateError (error);\n        }\n       \n        \n        \n        //////////////////////////////////////////////////////////////////////////////////////////////\n        // onGotRemoteStream callback\n        /*\n         *    \"zp.ogrs.1\": \"ZegoPlayWeb.onGotRemoteStream\"\n         */\n        private onGotRemoteStream (event) {\n                this.logger.info (\"zp.ogrs.0 called \" + event.stream);\n                if (!this.remoteVideo) {\n                        this.logger.error (\"zp.ogrs.0 no remoteVideo\");\n                        return;\n                }\n                \n                this.remoteVideo.srcObject = event.stream;\n                \n                if (this.audioOputput) {\n                        this.setAudioDestination (this.audioOputput);\n                }\n                \n                this.dataReport.addEvent (this.reportSeq, \"GetRemoteStream\");\n        }\n        \n     \n        \n        //////////////////////////////////////////////////////////////////////////////////////////////\n        // send candidate Info\n        /*\n         *    \"zp.sci.1\": \"ZegoPlayWeb.sendCandidateInfo\"\n         */\n        private sendCandidateInfo (candidateInfo) {\n                this.logger.debug (\"zp.sci.1 called\");\n                \n                \n                candidateInfo = candidateInfo.filter (function (item) {\n                        if (item.candidate.indexOf ('tcp') > 0) {\n                                return false;\n                        }\n                        return true;\n                });\n                \n                if (!candidateInfo || candidateInfo.length < 1) {\n                        this.logger.info (\"zp.sci.1 cancelled\");\n                        return;\n                }\n                \n                this.dataReport.eventStart (this.reportSeq, \"SendIceCandidate\");\n                this.signal.sendCandidateInfo (getSeq (), this.sessionId, candidateInfo, (seq, sessionId, data) => {\n                        this.logger.debug (\"zp.sci.1 send success\");\n                        this.dataReport.eventEnd (this.reportSeq, \"SendIceCandidate\");\n                },  (err, seq)=> {\n                        this.logger.error (\"zp.sci.1 failed to send: \" + err.toString ());\n                        this.dataReport.eventEndWithMsg (this.reportSeq, \"SendIceCandidate\", {\n                                error: err\n                        });\n                        \n                        this.playStateUpdateError (playErrorList.SEND_CANDIDATE_ERROR);\n                });\n        }\n        \n        \n        //////////////////////////////////////////////////////////////////////////////////////////////\n        // error function\n        private shouldSendCloseSession (errorCode) {\n                if (this.state != ENUM_PLAY_STATE_UPDATE.stop && this.state != ENUM_PLAY_STATE.waitingSessionRsp) {\n                        return true;\n                }\n                \n                return false;\n        }\n        \n        private playStateUpdateError (errorCode) {\n                this.logger.debug(\"zp.psue.1 called \" ,errorCode.code);\n                if (this.sessionId != 0 && this.shouldSendCloseSession (errorCode)) {\n                        this.signal.sendCloseSession (getSeq (), this.sessionId, 1);\n                        this.closeSessionSignal = true;\n                }\n                \n                this.state = ENUM_PLAY_STATE.stop;\n                this.onPlayStateUpdate (ENUM_PLAY_STATE_UPDATE.error, this.streamId, errorCode);\n                \n                this.resetPlay ();\n        }\n        \n        onPlayStateUpdate (type, streamId, error?) {\n        };\n        \n        onPlayQualityUpdate (streamId, quality) {\n        };\n        \n        onVideoSizeChanged (streamId, videoWidth, videoHeight) {\n        };\n        \n        /*\n         *    \"zp.sp.1.1\": \"ZegoPlayWeb.stopPlay\"\n         */\n        stopPlay () {\n                \n                this.logger.debug (\"zp.sp.1.1 called\");\n                \n                //send to server\n                if (this.sessionId && !this.closeSessionSignal) {\n                        this.signal.sendCloseSession(getSeq(), this.sessionId, 0);\n                }\n                \n                this.dataReport.eventEndWithMsg (this.reportSeq, \"PlayState\", {\n                        \"state\": this.state + ''\n                });\n                \n                this.dataReport.addEvent (this.reportSeq, \"StopPlay\");\n                \n                this.dataReport.addMsgExt (this.reportSeq, {\n                        \"stream\": this.streamId,\n                        \"sessionId\": this.sessionId\n                });\n                \n                this.dataReport.uploadReport (this.reportSeq, \"RTCPlayStream\");\n                \n                this.resetPlay ();\n        };\n        \n        /*\n         *    \"zp.od.1\": \"ZegoPlayWeb.onDisconnect\"\n         */\n        onDisconnect () {\n                this.logger.info (\"zp.od.1 call\");\n                \n                // if (this.sessionId !== sessionId) {\n                //     this.logger.info(\"zp.od.1 session is not same\");\n                //     return;\n                // }\n                \n                this.logger.info (\"zp.od.1 websocket disconnect\");\n                this.dataReport.addEvent (this.reportSeq, \"OnDisconnect\");\n                \n                this.playStateUpdateError (playErrorList.WEBSOCKET_ERROR);\n        };\n}\n","\nimport {\n        LinkedList,\n        ENUM_CONNECT_STATE,\n        MAX_TRY_CONNECT_COUNT,\n        SEND_MSG_RESET,\n        SEND_MSG_TIMEOUT,\n        MAX_TRY_HEARTBEAT_COUNT\n} from \"./zego.entity\";\nimport {getSeq} from \"./zego.extern\";\nimport {Logger} from \"./zego.logger\";\n\nconst WEBRTC_PROTO_VERSION = \"1.0.1\"; //协议版本号\n\nexport class ZegoSignal {\n        logger: Logger;\n\n        sendDataMap = {};\n        sendDataList = new LinkedList();\n        sendDataCheckOnceCount = 100;\n\n        signalSeq = 0;\n\n        pushCallback = {};\n\n        sessionInfos = {};\n\n        //tryheartbeat\n        tryHeartbeatCount = 0;\n        // heartbeatTimer = null;\n        heartbeatInterval = 10 * 1000;\n\n        sendDataTimeout = 5 * 1000; //发送消息超时\n        sendDataDropTimeout = 10 * 1000; //丢弃过期消息的超时时间\n\n        tryConnectCount = 0;\n        tryConnectTimer = null;\n        tryConnectInterval = 3000;\n\n        state = ENUM_CONNECT_STATE.disconnect;\n\n        //token\n        tokenType = 0;\n\n        browser = this.getBrowserAndVersion();\n        platform = navigator.platform;\n\n        appid: string;\n        userid: string;\n        token: string;\n        connectCallback: Function;\n        server: string;\n        websocket: WebSocket;\n \n\n        globalHeader: {\n                [indes: string]: number | string\n        }\n\n        \n\n       \n\n        constructor(logger: Logger) {\n                this.logger = logger;\n        }\n\n\n        getBrowserAndVersion(): { name: string, version: string } {\n                let ua = navigator.userAgent, tem,\n                        M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\\/))\\/?\\s*([\\d\\.]+)/i) || [];\n                if (/trident/i.test(M[1])) {\n                        tem = /\\brv[ :]+([\\d\\.]+)/g.exec(ua) || [];\n                        return {name: 'IE', version: (tem[1] || '')};\n                }\n                if (M[1] === 'Chrome') {\n                        tem = ua.match(/\\bOPR|Edge\\/([\\d\\.]+)/);\n                        if (tem != null) {\n                                return {name: 'Opera', version: tem[1]};\n                        }\n                }\n                M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, '-?'];\n                if ((tem = ua.match(/version\\/([\\d+\\.]+)/i)) != null) {\n                        M.splice(1, 1, tem[1]);\n                }\n\n                return {\n                        name: M[0],\n                        version: M[1]\n                };\n        }\n\n        /*\n         *    \"zs.ssi.0\": \"ZegoSignal.setSessionInfo\"\n         */\n        setSessionInfo(appid: number, userid: string) {\n                this.logger.debug(\"zs.ssi.0 call\");\n\n                this.appid = appid+'';\n                this.userid = userid;\n                // this.server = serverUrl;\n        };\n\n        onDisconnect(server) {\n        };\n\n        onUpdateHeartBeartInterval(interval) {\n        };\n\n        /*\n         *    \"zs.cs.0\": \"ZegoSignal.connectServer\"\n         */\n\n        private resetConnectTimer() {\n                this.logger.info(\"zs.rct.0 call\");\n                clearTimeout(this.tryConnectTimer);\n                this.tryConnectTimer = null;\n                this.tryConnectCount = 0;\n        }\n\n        private bindWebSocketHandle() {\n                this.websocket.onmessage = e => {\n                        let msg: any = JSON.parse(e.data);\n                        this.logger.debug(\"zs.bsh.0 signmsg= \", msg.header.cmd);\n\n                        if (msg.header.appid != this.appid || msg.header.user_id !== this.userid) {\n                                this.logger.warn(\"zs.bsh.0 check header failed\");\n                                return;\n                        }\n\n                        this.handleServerPush(msg);\n                };\n\n                this.websocket.onclose = (e) => {\n                        this.logger.info(\"zs.bsh.0 close msg = \" + JSON.stringify(e));\n\n                        if (this.state != ENUM_CONNECT_STATE.disconnect) {\n                                //try connect\n                                this.resetConnectTimer();\n                                this.startConnectTimer();\n\n                                //all request timeout\n                                this.resetCheckMessage();\n                        }\n                };\n\n                this.websocket.onerror = (e) => {\n                        this.logger.error(\"zs.bsh.0 msg = \" + JSON.stringify(e));\n                };\n        }\n\n\n        private resetCheckMessage() {\n                this.logger.debug(\"zs.rcm.0 call\");\n\n                // clearTimeout(this.sendDataCheckTimer);\n                // this.sendDataCheckTimer = null;\n\n                let head = this.sendDataList.getFirst();\n                while (head != null) {\n                        this.sendDataList.remove(head);\n\n                        if (head._data.error)\n                                head._data.error(SEND_MSG_RESET, head._data.seq);\n\n                        head = this.sendDataList.getFirst();\n                }\n\n                this.sendDataMap = {};\n        }\n\n\n        private handleServerPush(msg) {\n                switch (msg.header.cmd) {\n                        case 'LoginRsp':\n                                this.handleRespondData(\"LoginReq\", msg);\n                                break;\n                        case 'CreateSessionRsp':\n                                this.handleRespondData(\"CreateSessionReq\", msg);\n                                if (msg.body.result === 0)\n                                        this.addSession(msg.header.session_id, msg.body.session_token);\n                                break;\n                        case 'MediaDescRsp':\n                                this.handleRespondData(\"MediaDescReq\", msg);\n                                break;\n                        case 'CandidateInfoRsp':\n                                this.handleRespondData(\"CandidateInfoReq\", msg);\n                                break;\n                        case 'CloseSessionRsp':\n                                this.handleRespondData(\"CloseSessionReq\", msg);\n                                this.removeSession(msg.header.session_id);\n                                break;\n                        case 'ClientHBRsp':\n                                this.handleRespondData(\"ClientHBReq\", msg);\n                                break;\n                        case 'MediaDescPush':\n                                this.handlePushData(msg);\n                                break;\n                        case 'CandidateInfoPush':\n                                this.handlePushData(msg);\n                                break;\n                        case 'CloseSessionPush':\n                                this.handlePushData(msg);\n                                this.removeSession(msg.header.session_id);\n                                break;\n                        case 'QualityReportRsp':\n                                this.handleRespondData(\"QualityReportReq\", msg);\n                                break;\n                        case 'SessionResetPush':\n                                this.handlePushResetSessionData(msg);\n                                break;\n                }\n        }\n\n        private disconnectCallback() {\n                // for (let sessionId in this.sessionInfos) {\n                //     let callbackData = this.pushCallback[\"WebSocketDisconnect\"+ sessionId];\n                //     if (callbackData == null) {\n                //         this.logger.error(\"zs.dc.0 no callbackData\");\n                //         return;\n                //     }\n\n                //     if (callbackData.callback) {\n                //         callbackData.callback(callbackData.object, parseInt(sessionId));\n                //     }\n                // }\n\n                if (this.connectCallback) {\n                        this.connectCallback(-1, this.server, undefined);\n                        this.connectCallback = null;\n                }\n\n                let server = this.server;\n                this.disconnectServer();\n                this.onDisconnect(server);\n        }\n\n        private updateToken() {\n                this.logger.info(\"zs.ut.0 call\");\n\n                let cmd = \"LoginReq\";\n                let body = {\n                        'token': this.token,\n                        'tokenType': this.tokenType\n                };\n\n                if (Object.keys(this.sessionInfos).length != 0) {\n                        let sessions = [];\n                        for (let sessionId in this.sessionInfos) {\n                                let session_id = parseInt(sessionId);\n                                sessions.push({\n                                        session_id: session_id,\n                                        session_token: this.sessionInfos[session_id].token\n                                });\n                        }\n\n                        body[\"sessions\"] = sessions;\n                }\n\n                this.sendMessageWithCallback(cmd, getSeq(), 0, body, (seq, session_id, data) => {\n                        if (data.result == 0) {\n                                this.token = data.token;\n                                this.tokenType = data.tokenType;\n\n                                let tokenInfo = {\n                                        report: data.report,\n                                        report_interval: data.report_interval_ms\n                                };\n\n                                if (this.connectCallback != null) {\n                                        this.connectCallback(0, this.server, tokenInfo);\n                                        this.connectCallback = null;\n                                }\n                        } else {\n                                let errorTokenInfo = {\n                                        error: data.strError\n                                };\n\n                                if (this.connectCallback != null) {\n                                        this.connectCallback(data.result, this.server, errorTokenInfo);\n                                        this.connectCallback = null;\n                                }\n                        }\n                }, (err, seq) => {\n                        if (this.connectCallback != null) {\n                                this.connectCallback(-1, this.server, undefined);\n                                this.connectCallback = null;\n                        }\n                });\n        }\n\n\n        sendMessageWithCallback(cmd: string, seq: number, sessionId: number, body: any, success: Function, error: Function) {\n                this.logger.debug(\"zs.smwc.0 call \" + cmd);\n\n                if (!this.websocket || this.websocket.readyState !== 1) {\n                        this.logger.error(\"zs.smwc.0 connect not establish\");\n                        if (error) {\n                                error(SEND_MSG_TIMEOUT, seq);\n                        }\n\n                        return;\n                }\n\n                let header = this.getHeader(cmd, seq, sessionId);\n                let data = {\n                        'header': header,\n                        'body': body\n                };\n\n                if (success == undefined) {\n                        success = null;\n                }\n\n                if (error == undefined) {\n                        error = null;\n                }\n\n                let cmdData = {\n                        // data: data,\n                        seq: seq,\n                        deleted: false,\n                        cmd: cmd,\n                        time: Date.parse(new Date() + ''),\n                        success: success,\n                        error: error,\n                };\n\n                let cmdDataNode = this.sendDataList.push(cmdData);\n                this.sendDataMap[cmdData.seq] = cmdDataNode;\n\n                let dataBuffer = JSON.stringify(data);\n                this.websocket.send(dataBuffer);\n\n                this.logger.debug('zs.smwc.0 success');\n        }\n\n\n        private getHeader(cmd: string, seq: number, sessionId: number) {\n                this.globalHeader = {\n                        'version': WEBRTC_PROTO_VERSION,\n                        'cmd': cmd,\n                        'appid': this.appid+'',\n                        'seq': seq,\n                        'user_id': this.userid,\n                        'session_id': sessionId\n                };\n\n                return this.globalHeader;\n        }\n\n        //rtc信令连接\n        connectServer(token: string, serverUrl: string, result: Function) {\n                this.token = token;\n                this.server = serverUrl;\n                this.state = ENUM_CONNECT_STATE.connecting;\n                this.connectCallback = result;\n\n\n                if (!this.websocket || this.websocket.readyState !== 1) {\n                        this.logger.debug(\"zs.cs.0 need new websocket\");\n\n                        try {\n                                if (this.websocket) {\n                                        this.logger.warn(\"zs.cs.0 close error websocket\");\n                                        this.websocket.onclose = null;\n                                        this.websocket.onerror = null;\n                                        this.websocket.close();\n                                        this.websocket = null;\n                                }\n\n                                //connect websocket\n                                this.websocket = new WebSocket(this.server);\n                                this.websocket.onopen = () => {\n \n\n                                        //reset connect timer\n                                        this.resetConnectTimer();\n\n                                        //register onMessage\n                                        this.logger.info(\"zs.cs.0 websocket open call\");\n                                        this.bindWebSocketHandle();\n\n                                        //update token\n                                        this.updateToken();\n\n                                        this.state = ENUM_CONNECT_STATE.connected;\n                                };\n\n                        }\n                        catch (e) {\n                                this.logger.error(\"zs.cs.0 websocket error \" + e);\n                        }\n                } else {\n                        //websocket is already connect\n                       // this.resetConnectTimer();\n                        this.state = ENUM_CONNECT_STATE.connected;\n                }\n\n                this.resetConnectTimer();\n                this.tryConnectTimer = setTimeout(() => {\n                        this.startConnectTimer(result);\n                }, this.tryConnectInterval);\n        };\n\n        private startConnectTimer(callback?: Function) {\n                this.logger.info(\"zs.sct.0 call\");\n\n                if (this.tryConnectCount > MAX_TRY_CONNECT_COUNT) {\n                        this.logger.error(\"zs.sct.0 beyond max limit\");\n\n                        this.disconnectCallback();\n                        return;\n                }\n\n                if (!this.websocket || this.websocket.readyState !== 1) {\n                        this.tryConnectCount += 1;\n                        this.connectServer(this.token, this.server, callback);\n                } else {\n                        //already connect\n                        this.resetConnectTimer();\n                }\n        }\n\n        /*\n         *    \"zs.ds.0\": \"ZegoSignal.disconnectServer\"\n         */\n\n        //rtc信令断开连接\n        disconnectServer() {\n                this.logger.debug('zs.ds.0 call');\n                this.server = null;\n                this.connectCallback = null;\n\n                this.resetCheckMessage();\n                this.resetConnectTimer();\n\n                if (this.websocket) {\n                        this.websocket.onclose = null;\n                        this.websocket.onerror = null;\n                        this.websocket.close();\n                        this.websocket = null;\n                }\n\n                this.token = \"\";\n                this.sessionInfos = {};\n                this.tokenType = 0;\n\n                this.tryHeartbeatCount = 0;\n\n                this.tryConnectCount = 0;\n\n                this.state = ENUM_CONNECT_STATE.disconnect;\n        };\n\n        isServerConnected() {\n                if (this.websocket && this.websocket.readyState === 1) {\n                        return true;\n                }\n\n                return false;\n        };\n\n        /*\n         *    \"zs.cs.1\": \"ZegoSignal.createSession\"\n         */\n        createSession(seq: number, type: number, streamId: string, success, error) {\n                this.logger.debug(\"zs.cs.1 call: \", streamId);\n\n                let cmd = \"CreateSessionReq\";\n                let body = {\n                        'type': type,\n                        'stream_id': streamId,\n                        'platform': this.platform,\n                        'browser': this.browser.name,\n                        'version': this.browser.version,\n                        'app_id': this.appid,\n                };\n\n                //publish\n                if (type == 0) {\n                        body['negotiate_mode'] = 0;\n                } else {\n                        body['negotiate_mode'] = 1;\n                }\n\n                this.sendMessageWithCallback(cmd, seq, 0, body, success, error);\n        };\n\n        removeSession(sessionId: number) {\n                this.logger.info(\"zs.rs.0 call\");\n\n                if (this.sessionInfos[sessionId]) {\n                        delete this.sessionInfos[sessionId];\n                }\n        }\n\n        /*\n        *    \"zs.scs.0\": \"ZegoSignal.sendCloseSession\"\n        */\n        sendCloseSession(seq: number, sessionId: number, reason: number, success?: Function, error?: Function) {\n                this.logger.debug(\"zs.scs.0 call: \", sessionId);\n\n                let cmd = \"CloseSessionReq\";\n                let body = {\n                        'reason': reason\n                };\n\n                this.removeSession(sessionId);\n\n                this.sendMessageWithCallback(cmd, seq, sessionId, body, success, error);\n        };\n\n\n        private sendMessage(cmd: string, seq: number, sessionId: number, body: any) {\n                this.logger.debug(\"zs.sm.0 call \" + cmd);\n\n                if (!this.websocket || this.websocket.readyState !== 1) {\n                        this.logger.error(\"zs.sm.0 connect not establish\");\n                        return;\n                }\n\n                let header = this.getHeader(cmd, seq, sessionId);\n                let data = {\n                        'header': header,\n                        'body': body\n                };\n\n                let dataBuffer = JSON.stringify(data);\n                this.websocket.send(dataBuffer);\n\n                this.logger.debug('zs.sm.0 success');\n        }\n\n\n        /*\n         *    \"zs.hrd.0\": \"ZegoSignal.handleRespondData\"\n         */\n        handleRespondData(cmd: string, msg: any) {\n                this.logger.debug(\"zs.hrd.0 call\");\n\n                //callback\n                let sendDataNode = this.sendDataMap[msg.header.seq];\n                if (sendDataNode == null) {\n                        \n                        this.logger.error(\"zs.hrd.0 cannot find data \"+ cmd);\n                        return;\n                }\n\n                let sendData = sendDataNode._data;\n                if (sendData.cmd !== cmd) {\n                        this.logger.error(\"sz.hrd.0 command is not match\");\n                } else if (sendData.success) {\n                        sendData.success(msg.header.seq, msg.header.session_id, msg.body);\n                }\n\n                delete this.sendDataMap[msg.header.seq];\n                this.sendDataList.remove(sendDataNode);\n        }\n\n\n        /*\n         *    \"zs.as.0\": \"ZegoSignal.addSession\"\n         */\n\n        addSession(sessionId: string, token) {\n                this.logger.info(\"zs.as.0 call\");\n                this.sessionInfos[sessionId] = {\n                        token: token\n                };\n        }\n\n        /*\n         *    \"zs.hpd.0\": \"ZegoSignal.handlePushData\"\n         */\n        handlePushData(msg: any) {\n                this.logger.debug(\"zs.hpd.0 call \" + msg.header.cmd + \" session \" + msg.header.session_id);\n\n                let callbackData = this.pushCallback[msg.header.cmd + msg.header.session_id];\n                if (!callbackData) {\n                        this.logger.info(\"zs.hpd.0 no callbackData \" + msg.header.cmd + \" session: \" + msg.header.session_id);\n                        return;\n                }\n\n                if (callbackData.callback) {\n                        callbackData.callback(msg.header.seq, msg.header.session_id, msg.body);\n                }\n        }\n\n\n        /*\n         *    \"zs.hprsd.0\": \"ZegoSignal.handlePushResetSessionData\"\n         */\n        handlePushResetSessionData(msg) {\n                this.logger.debug(\"zs.hprsd.0 call \");\n\n                let sessionList = [];\n                if (msg.body.cResetType == 0) {\n                        sessionList = Object.keys(this.sessionInfos);\n                } else if (msg.body.cResetType == 1) {\n                        for (let i = 0; i < msg.body.session_ids.length; i++) {\n                                sessionList.push(msg.body.session_ids[i]);\n                        }\n                }\n\n                //send ack\n                this.sendResetSessionAck(msg.header.seq, 0, 0);\n\n                if (sessionList.length == 0) {\n                        this.logger.info(\"zs.hprsd.0 no session to callback\");\n                        return;\n                }\n\n                for (let j = 0; j < sessionList.length; j++) {\n                        let callbackData = this.pushCallback[msg.header.cmd + sessionList[j]];\n                        if (callbackData == null) {\n                                this.logger.info(\"zs.hprsd.0 no callbackData \" + sessionList[j]);\n                        }\n                        else {\n                                if (callbackData.callback) {\n                                        callbackData.callback(callbackData.object, msg.header.seq, sessionList[j], msg.body);\n                                }\n                        }\n                }\n        }\n\n\n        /*\n         *    \"zs.smd.0\": \"ZegoSignal.sendMediaDesc\"\n         */\n        //type 0: offer  1: answer\n        sendMediaDesc(seq: number, sessionId: number, type: number, desc: {\n                sdp: any,\n                width?: number,\n                height?: number,\n                frameRate?: number,\n                video_min_kpbs?: number,\n                video_max_kpbs?: number,\n                audio_kpbs?: number\n        }, success: Function, error: Function) {\n                this.logger.debug(\"zs.smd.0 call: \", sessionId);\n\n                let cmd = \"MediaDescReq\";\n                let body = {\n                        'type': type,\n                        'sdp': desc.sdp,\n                };\n\n                if (desc.width != undefined) {\n                        body['width'] = desc.width;\n                }\n\n                if (desc.height != undefined) {\n                        body['height'] = desc.height;\n                }\n\n                if (desc.frameRate != undefined) {\n                        body['framerate'] = desc.frameRate;\n                }\n\n                if (desc.video_min_kpbs != undefined) {\n                        body['video_min_kpbs'] = desc.video_min_kpbs;\n                }\n\n                if (desc.video_max_kpbs != undefined) {\n                        body['video_max_kpbs'] = desc.video_max_kpbs;\n                }\n\n                if (desc.audio_kpbs != undefined) {\n                        body['audio_kpbs'] = desc.audio_kpbs;\n                }\n\n                this.sendMessageWithCallback(cmd, seq, sessionId, body, success, error);\n        };\n\n        /*\n         *    \"zs.sci.0\": \"ZegoSignal.sendCandidateInfo\"\n         */\n        sendCandidateInfo(seq, sessionId, candidateList, success, error) {\n                this.logger.debug(\"zs.sci.0 call: \", sessionId);\n\n                let cmd = \"CandidateInfoReq\";\n                let dataList = [];\n                for (let i = 0; i < candidateList.length; i++) {\n                        let info = {\n                                'candidate': candidateList[i].candidate,\n                                'sdpMid': candidateList[i].sdpMid,\n                                'sdpMLineIndex': candidateList[i].sdpMLineIndex\n                        };\n\n                        dataList.push(info);\n                }\n\n                let body = {\n                        'infos': dataList\n                };\n\n                this.sendMessageWithCallback(cmd, seq, sessionId, body, success, error);\n        };\n\n\n        /*\n         *    \"zs.smda.0\": \"ZegoSignal.sendMediaDescAck\"\n         */\n        sendMediaDescAck(seq, sessionId, result) {\n                this.logger.debug(\"zs.smda.0 call: \", sessionId);\n\n                let cmd = \"MediaDescAck\";\n                let body = {\n                        'result': result\n                };\n\n                this.sendMessage(cmd, seq, sessionId, body);\n        };\n\n        /*\n         *    \"zs.scia.0\": \"ZegoSignal.sendCandidateInfoAck\"\n         */\n        sendCandidateInfoAck(seq, sessionId, result) {\n                this.logger.debug(\"zs.scia.0 call: \", sessionId);\n\n                let cmd = \"CandidateInfoAck\";\n                let body = {\n                        'result': result\n                };\n\n                this.sendMessage(cmd, seq, sessionId, body);\n        };\n\n        /*\n         *    \"zs.scsa.0\": \"ZegoSignal.sendCloseSessionAck\"\n         */\n        sendCloseSessionAck(seq, sessionId, result) {\n                this.logger.debug(\"zs.scsa.0 call: \", sessionId);\n\n                let cmd = \"CloseSessionAck\";\n                let body = {\n                        'result': result\n                };\n\n                this.sendMessage(cmd, seq, sessionId, body);\n        };\n\n        /*\n         *    \"zs.ssra.0\": \"ZegoSignal.sendResetSessionAck\"\n         */\n        sendResetSessionAck(seq, sessionId, result) {\n                this.logger.debug(\"zs.ssra.0 call: \", sessionId);\n\n                let cmd = \"SessionResetAck\";\n                let body = {\n                        'result': result\n                };\n\n                this.sendMessage(cmd, seq, sessionId, body);\n        };\n\n        /*\n         *    \"zs.rpc.0\": \"ZegoSignal.registerPushCallback\"\n         */\n        registerPushCallback(cmd:string, sessionId:number, callback:Function) {\n                //this.logger.debug(\"zs.rpc.0 call: \", cmd);\n\n                if (callback && (typeof callback === 'function')) {\n                        this.logger.debug(\"zs.rpc.0 setcallback\");\n                        this.pushCallback[cmd + sessionId] = {callback: callback};\n                }\n        };\n\n        /*\n         *    \"zs.upc.0\": \"ZegoSignal.unregisterPushCallback\"\n         */\n        unregisterPushCallback(cmd, sessionId) {\n                //this.logger.info(\"zs.urpc.0 call: \", cmd);\n\n                delete this.pushCallback[cmd + sessionId];\n        };\n\n        /*\n         *    \"zs.cmt.0\": \"ZegoSignal.checkMessageTimeout\"\n         */\n        checkMessageTimeout() {\n\n                let head = this.sendDataList.getFirst();\n                let timestamp = Date.parse(new Date() + '');\n                let checkCount = 0;\n                let timeoutMsgCount = 0;\n                let dropMsgCount = 0;\n\n                //this.logger.debug('zs.cmt.0 call ' + timestamp);\n\n                while (head != null) {\n                        if ((head._data.time + this.sendDataTimeout) > timestamp) {\n                                break;\n                        }\n\n                        delete this.sendDataMap[head._data.seq];\n                        this.sendDataList.remove(head);\n                        ++timeoutMsgCount;\n\n                        if (head._data.error == null ||\n                                (this.sendDataDropTimeout > 0 &&\n                                        (head._data.time + this.sendDataDropTimeout) < timestamp)) {\n                                ++dropMsgCount;\n                        }\n                        else {\n                                if (head._data.error)\n                                        head._data.error(SEND_MSG_TIMEOUT, head._data.seq);\n                        }\n\n                        ++checkCount;\n                        if (checkCount >= this.sendDataCheckOnceCount) {\n                                break;\n                        }\n\n                        head = this.sendDataList.getFirst();\n                }\n\n                // this.sendDataCheckTimer = setTimeout(function() {\n                //     checkMessageTimeout(this);\n                // }, this.sendDataCheckInterval);\n\n                if (timeoutMsgCount != 0 || dropMsgCount != 0) {\n                        this.logger.debug(\"zs.cmt.0 call success, state: timeout=\", timeoutMsgCount, \" drop=\", dropMsgCount);\n                }\n        };\n\n        /*\n         *    \"zs.shb.0\": \"ZegoSignal.signalHeartbeat\"\n         */\n        sendHeartbeat() {\n                this.logger.debug(\"zs.shb.0 call\");\n\n                if (Object.keys(this.sessionInfos).length == 0) {\n                        this.logger.info(\"zs.shb.0 no need to heartbeat\");\n                        return;\n                }\n\n                if (++this.tryHeartbeatCount > MAX_TRY_HEARTBEAT_COUNT) {\n                        this.logger.error(\"zs.shb.0 heartbeat try limit\");\n\n                        this.disconnectCallback();\n                        return;\n                }\n\n                let sessionIdList = [];\n                for (let sessionId in this.sessionInfos) {\n                        sessionIdList.push(parseInt(sessionId));\n                }\n\n                let body = {\n                        'session_ids': sessionIdList\n                };\n\n                this.sendMessageWithCallback(\"ClientHBReq\", getSeq(), 0, body, (seq, sessionId, data) => {\n                        if (this.heartbeatInterval != data.hb_interval) {\n                                this.heartbeatInterval = data.hb_interval;\n\n                                this.onUpdateHeartBeartInterval(data.hb_interval);\n                        }\n\n                        this.tryHeartbeatCount = 0;\n                },  (err, seq) =>{\n                        this.tryHeartbeatCount += 1;\n                });\n        };\n\n        /*\n         *    \"zs.qr.0\": \"ZegoSignal.QualityReport\"\n         */\n        QualityReport(seq, sessionId, qualityStat, success, error) {\n                this.logger.debug(\"zs.qr.0 call\");\n\n                let cmd = \"QualityReportReq\";\n                let body = {\n                        streams: [qualityStat]\n                };\n\n                this.sendMessageWithCallback(cmd, seq, sessionId, body, success, error);\n        };\n\n\n}\n","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","(function (f) {\n    if (typeof exports === \"object\" && typeof module !== \"undefined\") {\n        module.exports = f()\n    } else if (typeof define === \"function\" && define.amd) {\n        define([], f)\n    } else {\n        var g;\n        if (typeof window !== \"undefined\") {\n            g = window\n        } else if (typeof global !== \"undefined\") {\n            g = global\n        } else if (typeof self !== \"undefined\") {\n            g = self\n        } else {\n            g = this\n        }\n        g.adapter = f()\n    }\n})(function () {\n    var define, module, exports;\n    return (function e(t, n, r) {\n        function s(o, u) {\n            if (!n[o]) {\n                if (!t[o]) {\n                    var a = typeof require == \"function\" && require;\n                    if (!u && a) return a(o, !0);\n                    if (i) return i(o, !0);\n                    var f = new Error(\"Cannot find module '\" + o + \"'\");\n                    throw f.code = \"MODULE_NOT_FOUND\", f\n                }\n                var l = n[o] = {exports: {}};\n                t[o][0].call(l.exports, function (e) {\n                    var n = t[o][1][e];\n                    return s(n ? n : e)\n                }, l, l.exports, e, t, n, r)\n            }\n            return n[o].exports\n        }\n\n        var i = typeof require == \"function\" && require;\n        for (var o = 0; o < r.length; o++) s(r[o]);\n        return s\n    })({\n        1: [function (require, module, exports) {\n            /*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n            /* eslint-env node */\n            'use strict';\n\n            var SDPUtils = require('sdp');\n\n            function fixStatsType(stat) {\n                return {\n                    inboundrtp: 'inbound-rtp',\n                    outboundrtp: 'outbound-rtp',\n                    candidatepair: 'candidate-pair',\n                    localcandidate: 'local-candidate',\n                    remotecandidate: 'remote-candidate'\n                }[stat.type] || stat.type;\n            }\n\n            function writeMediaSection(transceiver, caps, type, stream, dtlsRole) {\n                var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);\n\n                // Map ICE parameters (ufrag, pwd) to SDP.\n                sdp += SDPUtils.writeIceParameters(\n                    transceiver.iceGatherer.getLocalParameters());\n\n                // Map DTLS parameters to SDP.\n                sdp += SDPUtils.writeDtlsParameters(\n                    transceiver.dtlsTransport.getLocalParameters(),\n                    type === 'offer' ? 'actpass' : dtlsRole || 'active');\n\n                sdp += 'a=mid:' + transceiver.mid + '\\r\\n';\n\n                if (transceiver.rtpSender && transceiver.rtpReceiver) {\n                    sdp += 'a=sendrecv\\r\\n';\n                } else if (transceiver.rtpSender) {\n                    sdp += 'a=sendonly\\r\\n';\n                } else if (transceiver.rtpReceiver) {\n                    sdp += 'a=recvonly\\r\\n';\n                } else {\n                    sdp += 'a=inactive\\r\\n';\n                }\n\n                if (transceiver.rtpSender) {\n                    var trackId = transceiver.rtpSender._initialTrackId ||\n                        transceiver.rtpSender.track.id;\n                    transceiver.rtpSender._initialTrackId = trackId;\n                    // spec.\n                    var msid = 'msid:' + (stream ? stream.id : '-') + ' ' +\n                        trackId + '\\r\\n';\n                    sdp += 'a=' + msid;\n                    // for Chrome. Legacy should no longer be required.\n                    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n                        ' ' + msid;\n\n                    // RTX\n                    if (transceiver.sendEncodingParameters[0].rtx) {\n                        sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n                            ' ' + msid;\n                        sdp += 'a=ssrc-group:FID ' +\n                            transceiver.sendEncodingParameters[0].ssrc + ' ' +\n                            transceiver.sendEncodingParameters[0].rtx.ssrc +\n                            '\\r\\n';\n                    }\n                }\n                // FIXME: this should be written by writeRtpDescription.\n                sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n                    ' cname:' + SDPUtils.localCName + '\\r\\n';\n                if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {\n                    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n                        ' cname:' + SDPUtils.localCName + '\\r\\n';\n                }\n                return sdp;\n            }\n\n// Edge does not like\n// 1) stun: filtered after 14393 unless ?transport=udp is present\n// 2) turn: that does not have all of turn:host:port?transport=udp\n// 3) turn: with ipv6 addresses\n// 4) turn: occurring muliple times\n            function filterIceServers(iceServers, edgeVersion) {\n                var hasTurn = false;\n                iceServers = JSON.parse(JSON.stringify(iceServers));\n                return iceServers.filter(function (server) {\n                    if (server && (server.urls || server.url)) {\n                        var urls = server.urls || server.url;\n                        if (server.url && !server.urls) {\n                            console.warn('RTCIceServer.url is deprecated! Use urls instead.');\n                        }\n                        var isString = typeof urls === 'string';\n                        if (isString) {\n                            urls = [urls];\n                        }\n                        urls = urls.filter(function (url) {\n                            var validTurn = url.indexOf('turn:') === 0 &&\n                                url.indexOf('transport=udp') !== -1 &&\n                                url.indexOf('turn:[') === -1 &&\n                                !hasTurn;\n\n                            if (validTurn) {\n                                hasTurn = true;\n                                return true;\n                            }\n                            return url.indexOf('stun:') === 0 && edgeVersion >= 14393 &&\n                                url.indexOf('?transport=udp') === -1;\n                        });\n\n                        delete server.url;\n                        server.urls = isString ? urls[0] : urls;\n                        return !!urls.length;\n                    }\n                });\n            }\n\n// Determines the intersection of local and remote capabilities.\n            function getCommonCapabilities(localCapabilities, remoteCapabilities) {\n                var commonCapabilities = {\n                    codecs: [],\n                    headerExtensions: [],\n                    fecMechanisms: []\n                };\n\n                var findCodecByPayloadType = function (pt, codecs) {\n                    pt = parseInt(pt, 10);\n                    for (var i = 0; i < codecs.length; i++) {\n                        if (codecs[i].payloadType === pt ||\n                            codecs[i].preferredPayloadType === pt) {\n                            return codecs[i];\n                        }\n                    }\n                };\n\n                var rtxCapabilityMatches = function (lRtx, rRtx, lCodecs, rCodecs) {\n                    var lCodec = findCodecByPayloadType(lRtx.parameters.apt, lCodecs);\n                    var rCodec = findCodecByPayloadType(rRtx.parameters.apt, rCodecs);\n                    return lCodec && rCodec &&\n                        lCodec.name.toLowerCase() === rCodec.name.toLowerCase();\n                };\n\n                localCapabilities.codecs.forEach(function (lCodec) {\n                    for (var i = 0; i < remoteCapabilities.codecs.length; i++) {\n                        var rCodec = remoteCapabilities.codecs[i];\n                        if (lCodec.name.toLowerCase() === rCodec.name.toLowerCase() &&\n                            lCodec.clockRate === rCodec.clockRate) {\n                            if (lCodec.name.toLowerCase() === 'rtx' &&\n                                lCodec.parameters && rCodec.parameters.apt) {\n                                // for RTX we need to find the local rtx that has a apt\n                                // which points to the same local codec as the remote one.\n                                if (!rtxCapabilityMatches(lCodec, rCodec,\n                                    localCapabilities.codecs, remoteCapabilities.codecs)) {\n                                    continue;\n                                }\n                            }\n                            rCodec = JSON.parse(JSON.stringify(rCodec)); // deepcopy\n                            // number of channels is the highest common number of channels\n                            rCodec.numChannels = Math.min(lCodec.numChannels,\n                                rCodec.numChannels);\n                            // push rCodec so we reply with offerer payload type\n                            commonCapabilities.codecs.push(rCodec);\n\n                            // determine common feedback mechanisms\n                            rCodec.rtcpFeedback = rCodec.rtcpFeedback.filter(function (fb) {\n                                for (var j = 0; j < lCodec.rtcpFeedback.length; j++) {\n                                    if (lCodec.rtcpFeedback[j].type === fb.type &&\n                                        lCodec.rtcpFeedback[j].parameter === fb.parameter) {\n                                        return true;\n                                    }\n                                }\n                                return false;\n                            });\n                            // FIXME: also need to determine .parameters\n                            //  see https://github.com/openpeer/ortc/issues/569\n                            break;\n                        }\n                    }\n                });\n\n                localCapabilities.headerExtensions.forEach(function (lHeaderExtension) {\n                    for (var i = 0; i < remoteCapabilities.headerExtensions.length;\n                         i++) {\n                        var rHeaderExtension = remoteCapabilities.headerExtensions[i];\n                        if (lHeaderExtension.uri === rHeaderExtension.uri) {\n                            commonCapabilities.headerExtensions.push(rHeaderExtension);\n                            break;\n                        }\n                    }\n                });\n\n                // FIXME: fecMechanisms\n                return commonCapabilities;\n            }\n\n// is action=setLocalDescription with type allowed in signalingState\n            function isActionAllowedInSignalingState(action, type, signalingState) {\n                return {\n                    offer: {\n                        setLocalDescription: ['stable', 'have-local-offer'],\n                        setRemoteDescription: ['stable', 'have-remote-offer']\n                    },\n                    answer: {\n                        setLocalDescription: ['have-remote-offer', 'have-local-pranswer'],\n                        setRemoteDescription: ['have-local-offer', 'have-remote-pranswer']\n                    }\n                }[type][action].indexOf(signalingState) !== -1;\n            }\n\n            function maybeAddCandidate(iceTransport, candidate) {\n                // Edge's internal representation adds some fields therefore\n                // not all fieldѕ are taken into account.\n                var alreadyAdded = iceTransport.getRemoteCandidates()\n                    .find(function (remoteCandidate) {\n                        return candidate.foundation === remoteCandidate.foundation &&\n                            candidate.ip === remoteCandidate.ip &&\n                            candidate.port === remoteCandidate.port &&\n                            candidate.priority === remoteCandidate.priority &&\n                            candidate.protocol === remoteCandidate.protocol &&\n                            candidate.type === remoteCandidate.type;\n                    });\n                if (!alreadyAdded) {\n                    iceTransport.addRemoteCandidate(candidate);\n                }\n                return !alreadyAdded;\n            }\n\n\n            function makeError(name, description) {\n                var e = new Error(description);\n                e.name = name;\n                // legacy error codes from https://heycam.github.io/webidl/#idl-DOMException-error-names\n                e.code = {\n                    NotSupportedError: 9,\n                    InvalidStateError: 11,\n                    InvalidAccessError: 15,\n                    TypeError: undefined,\n                    OperationError: undefined\n                }[name];\n                return e;\n            }\n\n            module.exports = function (window, edgeVersion) {\n                // https://w3c.github.io/mediacapture-main/#mediastream\n                // Helper function to add the track to the stream and\n                // dispatch the event ourselves.\n                function addTrackToStreamAndFireEvent(track, stream) {\n                    stream.addTrack(track);\n                    stream.dispatchEvent(new window.MediaStreamTrackEvent('addtrack',\n                        {track: track}));\n                }\n\n                function removeTrackFromStreamAndFireEvent(track, stream) {\n                    stream.removeTrack(track);\n                    stream.dispatchEvent(new window.MediaStreamTrackEvent('removetrack',\n                        {track: track}));\n                }\n\n                function fireAddTrack(pc, track, receiver, streams) {\n                    var trackEvent = new Event('track');\n                    trackEvent.track = track;\n                    trackEvent.receiver = receiver;\n                    trackEvent.transceiver = {receiver: receiver};\n                    trackEvent.streams = streams;\n                    window.setTimeout(function () {\n                        pc._dispatchEvent('track', trackEvent);\n                    });\n                }\n\n                var RTCPeerConnection = function (config) {\n                    var pc = this;\n\n                    var _eventTarget = document.createDocumentFragment();\n                    ['addEventListener', 'removeEventListener', 'dispatchEvent']\n                        .forEach(function (method) {\n                            pc[method] = _eventTarget[method].bind(_eventTarget);\n                        });\n\n                    this.canTrickleIceCandidates = null;\n\n                    this.needNegotiation = false;\n\n                    this.localStreams = [];\n                    this.remoteStreams = [];\n\n                    this.localDescription = null;\n                    this.remoteDescription = null;\n\n                    this.signalingState = 'stable';\n                    this.iceConnectionState = 'new';\n                    this.connectionState = 'new';\n                    this.iceGatheringState = 'new';\n\n                    config = JSON.parse(JSON.stringify(config || {}));\n\n                    this.usingBundle = config.bundlePolicy === 'max-bundle';\n                    if (config.rtcpMuxPolicy === 'negotiate') {\n                        throw(makeError('NotSupportedError',\n                            'rtcpMuxPolicy \\'negotiate\\' is not supported'));\n                    } else if (!config.rtcpMuxPolicy) {\n                        config.rtcpMuxPolicy = 'require';\n                    }\n\n                    switch (config.iceTransportPolicy) {\n                        case 'all':\n                        case 'relay':\n                            break;\n                        default:\n                            config.iceTransportPolicy = 'all';\n                            break;\n                    }\n\n                    switch (config.bundlePolicy) {\n                        case 'balanced':\n                        case 'max-compat':\n                        case 'max-bundle':\n                            break;\n                        default:\n                            config.bundlePolicy = 'balanced';\n                            break;\n                    }\n\n                    config.iceServers = filterIceServers(config.iceServers || [], edgeVersion);\n\n                    this._iceGatherers = [];\n                    if (config.iceCandidatePoolSize) {\n                        for (var i = config.iceCandidatePoolSize; i > 0; i--) {\n                            this._iceGatherers.push(new window.RTCIceGatherer({\n                                iceServers: config.iceServers,\n                                gatherPolicy: config.iceTransportPolicy\n                            }));\n                        }\n                    } else {\n                        config.iceCandidatePoolSize = 0;\n                    }\n\n                    this._config = config;\n\n                    // per-track iceGathers, iceTransports, dtlsTransports, rtpSenders, ...\n                    // everything that is needed to describe a SDP m-line.\n                    this.transceivers = [];\n\n                    this._sdpSessionId = SDPUtils.generateSessionId();\n                    this._sdpSessionVersion = 0;\n\n                    this._dtlsRole = undefined; // role for a=setup to use in answers.\n\n                    this._isClosed = false;\n                };\n\n                // set up event handlers on prototype\n                RTCPeerConnection.prototype.onicecandidate = null;\n                RTCPeerConnection.prototype.onaddstream = null;\n                RTCPeerConnection.prototype.ontrack = null;\n                RTCPeerConnection.prototype.onremovestream = null;\n                RTCPeerConnection.prototype.onsignalingstatechange = null;\n                RTCPeerConnection.prototype.oniceconnectionstatechange = null;\n                RTCPeerConnection.prototype.onconnectionstatechange = null;\n                RTCPeerConnection.prototype.onicegatheringstatechange = null;\n                RTCPeerConnection.prototype.onnegotiationneeded = null;\n                RTCPeerConnection.prototype.ondatachannel = null;\n\n                RTCPeerConnection.prototype._dispatchEvent = function (name, event) {\n                    if (this._isClosed) {\n                        return;\n                    }\n                    this.dispatchEvent(event);\n                    if (typeof this['on' + name] === 'function') {\n                        this['on' + name](event);\n                    }\n                };\n\n                RTCPeerConnection.prototype._emitGatheringStateChange = function () {\n                    var event = new Event('icegatheringstatechange');\n                    this._dispatchEvent('icegatheringstatechange', event);\n                };\n\n                RTCPeerConnection.prototype.getConfiguration = function () {\n                    return this._config;\n                };\n\n                RTCPeerConnection.prototype.getLocalStreams = function () {\n                    return this.localStreams;\n                };\n\n                RTCPeerConnection.prototype.getRemoteStreams = function () {\n                    return this.remoteStreams;\n                };\n\n                // internal helper to create a transceiver object.\n                // (which is not yet the same as the WebRTC 1.0 transceiver)\n                RTCPeerConnection.prototype._createTransceiver = function (kind, doNotAdd) {\n                    var hasBundleTransport = this.transceivers.length > 0;\n                    var transceiver = {\n                        track: null,\n                        iceGatherer: null,\n                        iceTransport: null,\n                        dtlsTransport: null,\n                        localCapabilities: null,\n                        remoteCapabilities: null,\n                        rtpSender: null,\n                        rtpReceiver: null,\n                        kind: kind,\n                        mid: null,\n                        sendEncodingParameters: null,\n                        recvEncodingParameters: null,\n                        stream: null,\n                        associatedRemoteMediaStreams: [],\n                        wantReceive: true\n                    };\n                    if (this.usingBundle && hasBundleTransport) {\n                        transceiver.iceTransport = this.transceivers[0].iceTransport;\n                        transceiver.dtlsTransport = this.transceivers[0].dtlsTransport;\n                    } else {\n                        var transports = this._createIceAndDtlsTransports();\n                        transceiver.iceTransport = transports.iceTransport;\n                        transceiver.dtlsTransport = transports.dtlsTransport;\n                    }\n                    if (!doNotAdd) {\n                        this.transceivers.push(transceiver);\n                    }\n                    return transceiver;\n                };\n\n                RTCPeerConnection.prototype.addTrack = function (track, stream) {\n                    if (this._isClosed) {\n                        throw makeError('InvalidStateError',\n                            'Attempted to call addTrack on a closed peerconnection.');\n                    }\n\n                    var alreadyExists = this.transceivers.find(function (s) {\n                        return s.track === track;\n                    });\n\n                    if (alreadyExists) {\n                        throw makeError('InvalidAccessError', 'Track already exists.');\n                    }\n\n                    var transceiver;\n                    for (var i = 0; i < this.transceivers.length; i++) {\n                        if (!this.transceivers[i].track &&\n                            this.transceivers[i].kind === track.kind) {\n                            transceiver = this.transceivers[i];\n                        }\n                    }\n                    if (!transceiver) {\n                        transceiver = this._createTransceiver(track.kind);\n                    }\n\n                    this._maybeFireNegotiationNeeded();\n\n                    if (this.localStreams.indexOf(stream) === -1) {\n                        this.localStreams.push(stream);\n                    }\n\n                    transceiver.track = track;\n                    transceiver.stream = stream;\n                    transceiver.rtpSender = new window.RTCRtpSender(track,\n                        transceiver.dtlsTransport);\n                    return transceiver.rtpSender;\n                };\n\n                RTCPeerConnection.prototype.addStream = function (stream) {\n                    var pc = this;\n                    if (edgeVersion >= 15025) {\n                        stream.getTracks().forEach(function (track) {\n                            pc.addTrack(track, stream);\n                        });\n                    } else {\n                        // Clone is necessary for local demos mostly, attaching directly\n                        // to two different senders does not work (build 10547).\n                        // Fixed in 15025 (or earlier)\n                        var clonedStream = stream.clone();\n                        stream.getTracks().forEach(function (track, idx) {\n                            var clonedTrack = clonedStream.getTracks()[idx];\n                            track.addEventListener('enabled', function (event) {\n                                clonedTrack.enabled = event.enabled;\n                            });\n                        });\n                        clonedStream.getTracks().forEach(function (track) {\n                            pc.addTrack(track, clonedStream);\n                        });\n                    }\n                };\n\n                RTCPeerConnection.prototype.removeTrack = function (sender) {\n                    if (this._isClosed) {\n                        throw makeError('InvalidStateError',\n                            'Attempted to call removeTrack on a closed peerconnection.');\n                    }\n\n                    if (!(sender instanceof window.RTCRtpSender)) {\n                        throw new TypeError('Argument 1 of RTCPeerConnection.removeTrack ' +\n                            'does not implement interface RTCRtpSender.');\n                    }\n\n                    var transceiver = this.transceivers.find(function (t) {\n                        return t.rtpSender === sender;\n                    });\n\n                    if (!transceiver) {\n                        throw makeError('InvalidAccessError',\n                            'Sender was not created by this connection.');\n                    }\n                    var stream = transceiver.stream;\n\n                    transceiver.rtpSender.stop();\n                    transceiver.rtpSender = null;\n                    transceiver.track = null;\n                    transceiver.stream = null;\n\n                    // remove the stream from the set of local streams\n                    var localStreams = this.transceivers.map(function (t) {\n                        return t.stream;\n                    });\n                    if (localStreams.indexOf(stream) === -1 &&\n                        this.localStreams.indexOf(stream) > -1) {\n                        this.localStreams.splice(this.localStreams.indexOf(stream), 1);\n                    }\n\n                    this._maybeFireNegotiationNeeded();\n                };\n\n                RTCPeerConnection.prototype.removeStream = function (stream) {\n                    var pc = this;\n                    stream.getTracks().forEach(function (track) {\n                        var sender = pc.getSenders().find(function (s) {\n                            return s.track === track;\n                        });\n                        if (sender) {\n                            pc.removeTrack(sender);\n                        }\n                    });\n                };\n\n                RTCPeerConnection.prototype.getSenders = function () {\n                    return this.transceivers.filter(function (transceiver) {\n                        return !!transceiver.rtpSender;\n                    })\n                        .map(function (transceiver) {\n                            return transceiver.rtpSender;\n                        });\n                };\n\n                RTCPeerConnection.prototype.getReceivers = function () {\n                    return this.transceivers.filter(function (transceiver) {\n                        return !!transceiver.rtpReceiver;\n                    })\n                        .map(function (transceiver) {\n                            return transceiver.rtpReceiver;\n                        });\n                };\n\n\n                RTCPeerConnection.prototype._createIceGatherer = function (sdpMLineIndex,\n                                                                           usingBundle) {\n                    var pc = this;\n                    if (usingBundle && sdpMLineIndex > 0) {\n                        return this.transceivers[0].iceGatherer;\n                    } else if (this._iceGatherers.length) {\n                        return this._iceGatherers.shift();\n                    }\n                    var iceGatherer = new window.RTCIceGatherer({\n                        iceServers: this._config.iceServers,\n                        gatherPolicy: this._config.iceTransportPolicy\n                    });\n                    Object.defineProperty(iceGatherer, 'state',\n                        {value: 'new', writable: true}\n                    );\n\n                    this.transceivers[sdpMLineIndex].bufferedCandidateEvents = [];\n                    this.transceivers[sdpMLineIndex].bufferCandidates = function (event) {\n                        var end = !event.candidate || Object.keys(event.candidate).length === 0;\n                        // polyfill since RTCIceGatherer.state is not implemented in\n                        // Edge 10547 yet.\n                        iceGatherer.state = end ? 'completed' : 'gathering';\n                        if (pc.transceivers[sdpMLineIndex].bufferedCandidateEvents !== null) {\n                            pc.transceivers[sdpMLineIndex].bufferedCandidateEvents.push(event);\n                        }\n                    };\n                    iceGatherer.addEventListener('localcandidate',\n                        this.transceivers[sdpMLineIndex].bufferCandidates);\n                    return iceGatherer;\n                };\n\n                // start gathering from an RTCIceGatherer.\n                RTCPeerConnection.prototype._gather = function (mid, sdpMLineIndex) {\n                    var pc = this;\n                    var iceGatherer = this.transceivers[sdpMLineIndex].iceGatherer;\n                    if (iceGatherer.onlocalcandidate) {\n                        return;\n                    }\n                    var bufferedCandidateEvents =\n                        this.transceivers[sdpMLineIndex].bufferedCandidateEvents;\n                    this.transceivers[sdpMLineIndex].bufferedCandidateEvents = null;\n                    iceGatherer.removeEventListener('localcandidate',\n                        this.transceivers[sdpMLineIndex].bufferCandidates);\n                    iceGatherer.onlocalcandidate = function (evt) {\n                        if (pc.usingBundle && sdpMLineIndex > 0) {\n                            // if we know that we use bundle we can drop candidates with\n                            // ѕdpMLineIndex > 0. If we don't do this then our state gets\n                            // confused since we dispose the extra ice gatherer.\n                            return;\n                        }\n                        var event = new Event('icecandidate');\n                        event.candidate = {sdpMid: mid, sdpMLineIndex: sdpMLineIndex};\n\n                        var cand = evt.candidate;\n                        // Edge emits an empty object for RTCIceCandidateComplete‥\n                        var end = !cand || Object.keys(cand).length === 0;\n                        if (end) {\n                            // polyfill since RTCIceGatherer.state is not implemented in\n                            // Edge 10547 yet.\n                            if (iceGatherer.state === 'new' || iceGatherer.state === 'gathering') {\n                                iceGatherer.state = 'completed';\n                            }\n                        } else {\n                            if (iceGatherer.state === 'new') {\n                                iceGatherer.state = 'gathering';\n                            }\n                            // RTCIceCandidate doesn't have a component, needs to be added\n                            cand.component = 1;\n                            // also the usernameFragment. TODO: update SDP to take both variants.\n                            cand.ufrag = iceGatherer.getLocalParameters().usernameFragment;\n\n                            var serializedCandidate = SDPUtils.writeCandidate(cand);\n                            event.candidate = Object.assign(event.candidate,\n                                SDPUtils.parseCandidate(serializedCandidate));\n\n                            event.candidate.candidate = serializedCandidate;\n                            event.candidate.toJSON = function () {\n                                return {\n                                    candidate: event.candidate.candidate,\n                                    sdpMid: event.candidate.sdpMid,\n                                    sdpMLineIndex: event.candidate.sdpMLineIndex,\n                                    usernameFragment: event.candidate.usernameFragment\n                                };\n                            };\n                        }\n\n                        // update local description.\n                        var sections = SDPUtils.getMediaSections(pc.localDescription.sdp);\n                        if (!end) {\n                            sections[event.candidate.sdpMLineIndex] +=\n                                'a=' + event.candidate.candidate + '\\r\\n';\n                        } else {\n                            sections[event.candidate.sdpMLineIndex] +=\n                                'a=end-of-candidates\\r\\n';\n                        }\n                        pc.localDescription.sdp =\n                            SDPUtils.getDescription(pc.localDescription.sdp) +\n                            sections.join('');\n                        var complete = pc.transceivers.every(function (transceiver) {\n                            return transceiver.iceGatherer &&\n                                transceiver.iceGatherer.state === 'completed';\n                        });\n\n                        if (pc.iceGatheringState !== 'gathering') {\n                            pc.iceGatheringState = 'gathering';\n                            pc._emitGatheringStateChange();\n                        }\n\n                        // Emit candidate. Also emit null candidate when all gatherers are\n                        // complete.\n                        if (!end) {\n                            pc._dispatchEvent('icecandidate', event);\n                        }\n                        if (complete) {\n                            pc._dispatchEvent('icecandidate', new Event('icecandidate'));\n                            pc.iceGatheringState = 'complete';\n                            pc._emitGatheringStateChange();\n                        }\n                    };\n\n                    // emit already gathered candidates.\n                    window.setTimeout(function () {\n                        bufferedCandidateEvents.forEach(function (e) {\n                            iceGatherer.onlocalcandidate(e);\n                        });\n                    }, 0);\n                };\n\n                // Create ICE transport and DTLS transport.\n                RTCPeerConnection.prototype._createIceAndDtlsTransports = function () {\n                    var pc = this;\n                    var iceTransport = new window.RTCIceTransport(null);\n                    iceTransport.onicestatechange = function () {\n                        pc._updateIceConnectionState();\n                        pc._updateConnectionState();\n                    };\n\n                    var dtlsTransport = new window.RTCDtlsTransport(iceTransport);\n                    dtlsTransport.ondtlsstatechange = function () {\n                        pc._updateConnectionState();\n                    };\n                    dtlsTransport.onerror = function () {\n                        // onerror does not set state to failed by itself.\n                        Object.defineProperty(dtlsTransport, 'state',\n                            {value: 'failed', writable: true});\n                        pc._updateConnectionState();\n                    };\n\n                    return {\n                        iceTransport: iceTransport,\n                        dtlsTransport: dtlsTransport\n                    };\n                };\n\n                // Destroy ICE gatherer, ICE transport and DTLS transport.\n                // Without triggering the callbacks.\n                RTCPeerConnection.prototype._disposeIceAndDtlsTransports = function (\n                    sdpMLineIndex) {\n                    var iceGatherer = this.transceivers[sdpMLineIndex].iceGatherer;\n                    if (iceGatherer) {\n                        delete iceGatherer.onlocalcandidate;\n                        delete this.transceivers[sdpMLineIndex].iceGatherer;\n                    }\n                    var iceTransport = this.transceivers[sdpMLineIndex].iceTransport;\n                    if (iceTransport) {\n                        delete iceTransport.onicestatechange;\n                        delete this.transceivers[sdpMLineIndex].iceTransport;\n                    }\n                    var dtlsTransport = this.transceivers[sdpMLineIndex].dtlsTransport;\n                    if (dtlsTransport) {\n                        delete dtlsTransport.ondtlsstatechange;\n                        delete dtlsTransport.onerror;\n                        delete this.transceivers[sdpMLineIndex].dtlsTransport;\n                    }\n                };\n\n                // Start the RTP Sender and Receiver for a transceiver.\n                RTCPeerConnection.prototype._transceive = function (transceiver,\n                                                                    send, recv) {\n                    var params = getCommonCapabilities(transceiver.localCapabilities,\n                        transceiver.remoteCapabilities);\n                    if (send && transceiver.rtpSender) {\n                        params.encodings = transceiver.sendEncodingParameters;\n                        params.rtcp = {\n                            cname: SDPUtils.localCName,\n                            compound: transceiver.rtcpParameters.compound\n                        };\n                        if (transceiver.recvEncodingParameters.length) {\n                            params.rtcp.ssrc = transceiver.recvEncodingParameters[0].ssrc;\n                        }\n                        transceiver.rtpSender.send(params);\n                    }\n                    if (recv && transceiver.rtpReceiver && params.codecs.length > 0) {\n                        // remove RTX field in Edge 14942\n                        if (transceiver.kind === 'video'\n                            && transceiver.recvEncodingParameters\n                            && edgeVersion < 15019) {\n                            transceiver.recvEncodingParameters.forEach(function (p) {\n                                delete p.rtx;\n                            });\n                        }\n                        if (transceiver.recvEncodingParameters.length) {\n                            params.encodings = transceiver.recvEncodingParameters;\n                        } else {\n                            params.encodings = [{}];\n                        }\n                        params.rtcp = {\n                            compound: transceiver.rtcpParameters.compound\n                        };\n                        if (transceiver.rtcpParameters.cname) {\n                            params.rtcp.cname = transceiver.rtcpParameters.cname;\n                        }\n                        if (transceiver.sendEncodingParameters.length) {\n                            params.rtcp.ssrc = transceiver.sendEncodingParameters[0].ssrc;\n                        }\n                        transceiver.rtpReceiver.receive(params);\n                    }\n                };\n\n                RTCPeerConnection.prototype.setLocalDescription = function (description) {\n                    var pc = this;\n\n                    // Note: pranswer is not supported.\n                    if (['offer', 'answer'].indexOf(description.type) === -1) {\n                        return Promise.reject(makeError('TypeError',\n                            'Unsupported type \"' + description.type + '\"'));\n                    }\n\n                    if (!isActionAllowedInSignalingState('setLocalDescription',\n                        description.type, pc.signalingState) || pc._isClosed) {\n                        return Promise.reject(makeError('InvalidStateError',\n                            'Can not set local ' + description.type +\n                            ' in state ' + pc.signalingState));\n                    }\n\n                    var sections;\n                    var sessionpart;\n                    if (description.type === 'offer') {\n                        // VERY limited support for SDP munging. Limited to:\n                        // * changing the order of codecs\n                        sections = SDPUtils.splitSections(description.sdp);\n                        sessionpart = sections.shift();\n                        sections.forEach(function (mediaSection, sdpMLineIndex) {\n                            var caps = SDPUtils.parseRtpParameters(mediaSection);\n                            pc.transceivers[sdpMLineIndex].localCapabilities = caps;\n                        });\n\n                        pc.transceivers.forEach(function (transceiver, sdpMLineIndex) {\n                            pc._gather(transceiver.mid, sdpMLineIndex);\n                        });\n                    } else if (description.type === 'answer') {\n                        sections = SDPUtils.splitSections(pc.remoteDescription.sdp);\n                        sessionpart = sections.shift();\n                        var isIceLite = SDPUtils.matchPrefix(sessionpart,\n                            'a=ice-lite').length > 0;\n                        sections.forEach(function (mediaSection, sdpMLineIndex) {\n                            var transceiver = pc.transceivers[sdpMLineIndex];\n                            var iceGatherer = transceiver.iceGatherer;\n                            var iceTransport = transceiver.iceTransport;\n                            var dtlsTransport = transceiver.dtlsTransport;\n                            var localCapabilities = transceiver.localCapabilities;\n                            var remoteCapabilities = transceiver.remoteCapabilities;\n\n                            // treat bundle-only as not-rejected.\n                            var rejected = SDPUtils.isRejected(mediaSection) &&\n                                SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;\n\n                            if (!rejected && !transceiver.rejected) {\n                                var remoteIceParameters = SDPUtils.getIceParameters(\n                                    mediaSection, sessionpart);\n                                var remoteDtlsParameters = SDPUtils.getDtlsParameters(\n                                    mediaSection, sessionpart);\n                                if (isIceLite) {\n                                    remoteDtlsParameters.role = 'server';\n                                }\n\n                                if (!pc.usingBundle || sdpMLineIndex === 0) {\n                                    pc._gather(transceiver.mid, sdpMLineIndex);\n                                    if (iceTransport.state === 'new') {\n                                        iceTransport.start(iceGatherer, remoteIceParameters,\n                                            isIceLite ? 'controlling' : 'controlled');\n                                    }\n                                    if (dtlsTransport.state === 'new') {\n                                        dtlsTransport.start(remoteDtlsParameters);\n                                    }\n                                }\n\n                                // Calculate intersection of capabilities.\n                                var params = getCommonCapabilities(localCapabilities,\n                                    remoteCapabilities);\n\n                                // Start the RTCRtpSender. The RTCRtpReceiver for this\n                                // transceiver has already been started in setRemoteDescription.\n                                pc._transceive(transceiver,\n                                    params.codecs.length > 0,\n                                    false);\n                            }\n                        });\n                    }\n\n                    pc.localDescription = {\n                        type: description.type,\n                        sdp: description.sdp\n                    };\n                    if (description.type === 'offer') {\n                        pc._updateSignalingState('have-local-offer');\n                    } else {\n                        pc._updateSignalingState('stable');\n                    }\n\n                    return Promise.resolve();\n                };\n\n                RTCPeerConnection.prototype.setRemoteDescription = function (description) {\n                    var pc = this;\n\n                    // Note: pranswer is not supported.\n                    if (['offer', 'answer'].indexOf(description.type) === -1) {\n                        return Promise.reject(makeError('TypeError',\n                            'Unsupported type \"' + description.type + '\"'));\n                    }\n\n                    if (!isActionAllowedInSignalingState('setRemoteDescription',\n                        description.type, pc.signalingState) || pc._isClosed) {\n                        return Promise.reject(makeError('InvalidStateError',\n                            'Can not set remote ' + description.type +\n                            ' in state ' + pc.signalingState));\n                    }\n\n                    var streams = {};\n                    pc.remoteStreams.forEach(function (stream) {\n                        streams[stream.id] = stream;\n                    });\n                    var receiverList = [];\n                    var sections = SDPUtils.splitSections(description.sdp);\n                    var sessionpart = sections.shift();\n                    var isIceLite = SDPUtils.matchPrefix(sessionpart,\n                        'a=ice-lite').length > 0;\n                    var usingBundle = SDPUtils.matchPrefix(sessionpart,\n                        'a=group:BUNDLE ').length > 0;\n                    pc.usingBundle = usingBundle;\n                    var iceOptions = SDPUtils.matchPrefix(sessionpart,\n                        'a=ice-options:')[0];\n                    if (iceOptions) {\n                        pc.canTrickleIceCandidates = iceOptions.substr(14).split(' ')\n                            .indexOf('trickle') >= 0;\n                    } else {\n                        pc.canTrickleIceCandidates = false;\n                    }\n\n                    sections.forEach(function (mediaSection, sdpMLineIndex) {\n                        var lines = SDPUtils.splitLines(mediaSection);\n                        var kind = SDPUtils.getKind(mediaSection);\n                        // treat bundle-only as not-rejected.\n                        var rejected = SDPUtils.isRejected(mediaSection) &&\n                            SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;\n                        var protocol = lines[0].substr(2).split(' ')[2];\n\n                        var direction = SDPUtils.getDirection(mediaSection, sessionpart);\n                        var remoteMsid = SDPUtils.parseMsid(mediaSection);\n\n                        var mid = SDPUtils.getMid(mediaSection) || SDPUtils.generateIdentifier();\n\n                        // Reject datachannels which are not implemented yet.\n                        if ((kind === 'application' && protocol === 'DTLS/SCTP') || rejected) {\n                            // TODO: this is dangerous in the case where a non-rejected m-line\n                            //     becomes rejected.\n                            pc.transceivers[sdpMLineIndex] = {\n                                mid: mid,\n                                kind: kind,\n                                rejected: true\n                            };\n                            return;\n                        }\n\n                        if (!rejected && pc.transceivers[sdpMLineIndex] &&\n                            pc.transceivers[sdpMLineIndex].rejected) {\n                            // recycle a rejected transceiver.\n                            pc.transceivers[sdpMLineIndex] = pc._createTransceiver(kind, true);\n                        }\n\n                        var transceiver;\n                        var iceGatherer;\n                        var iceTransport;\n                        var dtlsTransport;\n                        var rtpReceiver;\n                        var sendEncodingParameters;\n                        var recvEncodingParameters;\n                        var localCapabilities;\n\n                        var track;\n                        // FIXME: ensure the mediaSection has rtcp-mux set.\n                        var remoteCapabilities = SDPUtils.parseRtpParameters(mediaSection);\n                        var remoteIceParameters;\n                        var remoteDtlsParameters;\n                        if (!rejected) {\n                            remoteIceParameters = SDPUtils.getIceParameters(mediaSection,\n                                sessionpart);\n                            remoteDtlsParameters = SDPUtils.getDtlsParameters(mediaSection,\n                                sessionpart);\n                            remoteDtlsParameters.role = 'client';\n                        }\n                        recvEncodingParameters =\n                            SDPUtils.parseRtpEncodingParameters(mediaSection);\n\n                        var rtcpParameters = SDPUtils.parseRtcpParameters(mediaSection);\n\n                        var isComplete = SDPUtils.matchPrefix(mediaSection,\n                            'a=end-of-candidates', sessionpart).length > 0;\n                        var cands = SDPUtils.matchPrefix(mediaSection, 'a=candidate:')\n                            .map(function (cand) {\n                                return SDPUtils.parseCandidate(cand);\n                            })\n                            .filter(function (cand) {\n                                return cand.component === 1;\n                            });\n\n                        // Check if we can use BUNDLE and dispose transports.\n                        if ((description.type === 'offer' || description.type === 'answer') &&\n                            !rejected && usingBundle && sdpMLineIndex > 0 &&\n                            pc.transceivers[sdpMLineIndex]) {\n                            pc._disposeIceAndDtlsTransports(sdpMLineIndex);\n                            pc.transceivers[sdpMLineIndex].iceGatherer =\n                                pc.transceivers[0].iceGatherer;\n                            pc.transceivers[sdpMLineIndex].iceTransport =\n                                pc.transceivers[0].iceTransport;\n                            pc.transceivers[sdpMLineIndex].dtlsTransport =\n                                pc.transceivers[0].dtlsTransport;\n                            if (pc.transceivers[sdpMLineIndex].rtpSender) {\n                                pc.transceivers[sdpMLineIndex].rtpSender.setTransport(\n                                    pc.transceivers[0].dtlsTransport);\n                            }\n                            if (pc.transceivers[sdpMLineIndex].rtpReceiver) {\n                                pc.transceivers[sdpMLineIndex].rtpReceiver.setTransport(\n                                    pc.transceivers[0].dtlsTransport);\n                            }\n                        }\n                        if (description.type === 'offer' && !rejected) {\n                            transceiver = pc.transceivers[sdpMLineIndex] ||\n                                pc._createTransceiver(kind);\n                            transceiver.mid = mid;\n\n                            if (!transceiver.iceGatherer) {\n                                transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex,\n                                    usingBundle);\n                            }\n\n                            if (cands.length && transceiver.iceTransport.state === 'new') {\n                                if (isComplete && (!usingBundle || sdpMLineIndex === 0)) {\n                                    transceiver.iceTransport.setRemoteCandidates(cands);\n                                } else {\n                                    cands.forEach(function (candidate) {\n                                        maybeAddCandidate(transceiver.iceTransport, candidate);\n                                    });\n                                }\n                            }\n\n                            localCapabilities = window.RTCRtpReceiver.getCapabilities(kind);\n\n                            // filter RTX until additional stuff needed for RTX is implemented\n                            // in adapter.js\n                            if (edgeVersion < 15019) {\n                                localCapabilities.codecs = localCapabilities.codecs.filter(\n                                    function (codec) {\n                                        return codec.name !== 'rtx';\n                                    });\n                            }\n\n                            sendEncodingParameters = transceiver.sendEncodingParameters || [{\n                                ssrc: (2 * sdpMLineIndex + 2) * 1001\n                            }];\n\n                            // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams\n                            var isNewTrack = false;\n                            if (direction === 'sendrecv' || direction === 'sendonly') {\n                                isNewTrack = !transceiver.rtpReceiver;\n                                rtpReceiver = transceiver.rtpReceiver ||\n                                    new window.RTCRtpReceiver(transceiver.dtlsTransport, kind);\n\n                                if (isNewTrack) {\n                                    var stream;\n                                    track = rtpReceiver.track;\n                                    // FIXME: does not work with Plan B.\n                                    if (remoteMsid && remoteMsid.stream === '-') {\n                                        // no-op. a stream id of '-' means: no associated stream.\n                                    } else if (remoteMsid) {\n                                        if (!streams[remoteMsid.stream]) {\n                                            streams[remoteMsid.stream] = new window.MediaStream();\n                                            Object.defineProperty(streams[remoteMsid.stream], 'id', {\n                                                get: function () {\n                                                    return remoteMsid.stream;\n                                                }\n                                            });\n                                        }\n                                        Object.defineProperty(track, 'id', {\n                                            get: function () {\n                                                return remoteMsid.track;\n                                            }\n                                        });\n                                        stream = streams[remoteMsid.stream];\n                                    } else {\n                                        if (!streams.default) {\n                                            streams.default = new window.MediaStream();\n                                        }\n                                        stream = streams.default;\n                                    }\n                                    if (stream) {\n                                        addTrackToStreamAndFireEvent(track, stream);\n                                        transceiver.associatedRemoteMediaStreams.push(stream);\n                                    }\n                                    receiverList.push([track, rtpReceiver, stream]);\n                                }\n                            } else if (transceiver.rtpReceiver && transceiver.rtpReceiver.track) {\n                                transceiver.associatedRemoteMediaStreams.forEach(function (s) {\n                                    var nativeTrack = s.getTracks().find(function (t) {\n                                        return t.id === transceiver.rtpReceiver.track.id;\n                                    });\n                                    if (nativeTrack) {\n                                        removeTrackFromStreamAndFireEvent(nativeTrack, s);\n                                    }\n                                });\n                                transceiver.associatedRemoteMediaStreams = [];\n                            }\n\n                            transceiver.localCapabilities = localCapabilities;\n                            transceiver.remoteCapabilities = remoteCapabilities;\n                            transceiver.rtpReceiver = rtpReceiver;\n                            transceiver.rtcpParameters = rtcpParameters;\n                            transceiver.sendEncodingParameters = sendEncodingParameters;\n                            transceiver.recvEncodingParameters = recvEncodingParameters;\n\n                            // Start the RTCRtpReceiver now. The RTPSender is started in\n                            // setLocalDescription.\n                            pc._transceive(pc.transceivers[sdpMLineIndex],\n                                false,\n                                isNewTrack);\n                        } else if (description.type === 'answer' && !rejected) {\n                            transceiver = pc.transceivers[sdpMLineIndex];\n                            iceGatherer = transceiver.iceGatherer;\n                            iceTransport = transceiver.iceTransport;\n                            dtlsTransport = transceiver.dtlsTransport;\n                            rtpReceiver = transceiver.rtpReceiver;\n                            sendEncodingParameters = transceiver.sendEncodingParameters;\n                            localCapabilities = transceiver.localCapabilities;\n\n                            pc.transceivers[sdpMLineIndex].recvEncodingParameters =\n                                recvEncodingParameters;\n                            pc.transceivers[sdpMLineIndex].remoteCapabilities =\n                                remoteCapabilities;\n                            pc.transceivers[sdpMLineIndex].rtcpParameters = rtcpParameters;\n\n                            if (cands.length && iceTransport.state === 'new') {\n                                if ((isIceLite || isComplete) &&\n                                    (!usingBundle || sdpMLineIndex === 0)) {\n                                    iceTransport.setRemoteCandidates(cands);\n                                } else {\n                                    cands.forEach(function (candidate) {\n                                        maybeAddCandidate(transceiver.iceTransport, candidate);\n                                    });\n                                }\n                            }\n\n                            if (!usingBundle || sdpMLineIndex === 0) {\n                                if (iceTransport.state === 'new') {\n                                    iceTransport.start(iceGatherer, remoteIceParameters,\n                                        'controlling');\n                                }\n                                if (dtlsTransport.state === 'new') {\n                                    dtlsTransport.start(remoteDtlsParameters);\n                                }\n                            }\n\n                            pc._transceive(transceiver,\n                                direction === 'sendrecv' || direction === 'recvonly',\n                                direction === 'sendrecv' || direction === 'sendonly');\n\n                            // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams\n                            if (rtpReceiver &&\n                                (direction === 'sendrecv' || direction === 'sendonly')) {\n                                track = rtpReceiver.track;\n                                if (remoteMsid) {\n                                    if (!streams[remoteMsid.stream]) {\n                                        streams[remoteMsid.stream] = new window.MediaStream();\n                                    }\n                                    addTrackToStreamAndFireEvent(track, streams[remoteMsid.stream]);\n                                    receiverList.push([track, rtpReceiver, streams[remoteMsid.stream]]);\n                                } else {\n                                    if (!streams.default) {\n                                        streams.default = new window.MediaStream();\n                                    }\n                                    addTrackToStreamAndFireEvent(track, streams.default);\n                                    receiverList.push([track, rtpReceiver, streams.default]);\n                                }\n                            } else {\n                                // FIXME: actually the receiver should be created later.\n                                delete transceiver.rtpReceiver;\n                            }\n                        }\n                    });\n\n                    if (pc._dtlsRole === undefined) {\n                        pc._dtlsRole = description.type === 'offer' ? 'active' : 'passive';\n                    }\n\n                    pc.remoteDescription = {\n                        type: description.type,\n                        sdp: description.sdp\n                    };\n                    if (description.type === 'offer') {\n                        pc._updateSignalingState('have-remote-offer');\n                    } else {\n                        pc._updateSignalingState('stable');\n                    }\n                    Object.keys(streams).forEach(function (sid) {\n                        var stream = streams[sid];\n                        if (stream.getTracks().length) {\n                            if (pc.remoteStreams.indexOf(stream) === -1) {\n                                pc.remoteStreams.push(stream);\n                                var event = new Event('addstream');\n                                event.stream = stream;\n                                window.setTimeout(function () {\n                                    pc._dispatchEvent('addstream', event);\n                                });\n                            }\n\n                            receiverList.forEach(function (item) {\n                                var track = item[0];\n                                var receiver = item[1];\n                                if (stream.id !== item[2].id) {\n                                    return;\n                                }\n                                fireAddTrack(pc, track, receiver, [stream]);\n                            });\n                        }\n                    });\n                    receiverList.forEach(function (item) {\n                        if (item[2]) {\n                            return;\n                        }\n                        fireAddTrack(pc, item[0], item[1], []);\n                    });\n\n                    // check whether addIceCandidate({}) was called within four seconds after\n                    // setRemoteDescription.\n                    window.setTimeout(function () {\n                        if (!(pc && pc.transceivers)) {\n                            return;\n                        }\n                        pc.transceivers.forEach(function (transceiver) {\n                            if (transceiver.iceTransport &&\n                                transceiver.iceTransport.state === 'new' &&\n                                transceiver.iceTransport.getRemoteCandidates().length > 0) {\n                                console.warn('Timeout for addRemoteCandidate. Consider sending ' +\n                                    'an end-of-candidates notification');\n                                transceiver.iceTransport.addRemoteCandidate({});\n                            }\n                        });\n                    }, 4000);\n\n                    return Promise.resolve();\n                };\n\n                RTCPeerConnection.prototype.close = function () {\n                    this.transceivers.forEach(function (transceiver) {\n                        /* not yet\n      if (transceiver.iceGatherer) {\n        transceiver.iceGatherer.close();\n      }\n      */\n                        if (transceiver.iceTransport) {\n                            transceiver.iceTransport.stop();\n                        }\n                        if (transceiver.dtlsTransport) {\n                            transceiver.dtlsTransport.stop();\n                        }\n                        if (transceiver.rtpSender) {\n                            transceiver.rtpSender.stop();\n                        }\n                        if (transceiver.rtpReceiver) {\n                            transceiver.rtpReceiver.stop();\n                        }\n                    });\n                    // FIXME: clean up tracks, local streams, remote streams, etc\n                    this._isClosed = true;\n                    this._updateSignalingState('closed');\n                };\n\n                // Update the signaling state.\n                RTCPeerConnection.prototype._updateSignalingState = function (newState) {\n                    this.signalingState = newState;\n                    var event = new Event('signalingstatechange');\n                    this._dispatchEvent('signalingstatechange', event);\n                };\n\n                // Determine whether to fire the negotiationneeded event.\n                RTCPeerConnection.prototype._maybeFireNegotiationNeeded = function () {\n                    var pc = this;\n                    if (this.signalingState !== 'stable' || this.needNegotiation === true) {\n                        return;\n                    }\n                    this.needNegotiation = true;\n                    window.setTimeout(function () {\n                        if (pc.needNegotiation) {\n                            pc.needNegotiation = false;\n                            var event = new Event('negotiationneeded');\n                            pc._dispatchEvent('negotiationneeded', event);\n                        }\n                    }, 0);\n                };\n\n                // Update the ice connection state.\n                RTCPeerConnection.prototype._updateIceConnectionState = function () {\n                    var newState;\n                    var states = {\n                        'new': 0,\n                        closed: 0,\n                        checking: 0,\n                        connected: 0,\n                        completed: 0,\n                        disconnected: 0,\n                        failed: 0\n                    };\n                    this.transceivers.forEach(function (transceiver) {\n                        states[transceiver.iceTransport.state]++;\n                    });\n\n                    newState = 'new';\n                    if (states.failed > 0) {\n                        newState = 'failed';\n                    } else if (states.checking > 0) {\n                        newState = 'checking';\n                    } else if (states.disconnected > 0) {\n                        newState = 'disconnected';\n                    } else if (states.new > 0) {\n                        newState = 'new';\n                    } else if (states.connected > 0) {\n                        newState = 'connected';\n                    } else if (states.completed > 0) {\n                        newState = 'completed';\n                    }\n\n                    if (newState !== this.iceConnectionState) {\n                        this.iceConnectionState = newState;\n                        var event = new Event('iceconnectionstatechange');\n                        this._dispatchEvent('iceconnectionstatechange', event);\n                    }\n                };\n\n                // Update the connection state.\n                RTCPeerConnection.prototype._updateConnectionState = function () {\n                    var newState;\n                    var states = {\n                        'new': 0,\n                        closed: 0,\n                        connecting: 0,\n                        connected: 0,\n                        completed: 0,\n                        disconnected: 0,\n                        failed: 0\n                    };\n                    this.transceivers.forEach(function (transceiver) {\n                        states[transceiver.iceTransport.state]++;\n                        states[transceiver.dtlsTransport.state]++;\n                    });\n                    // ICETransport.completed and connected are the same for this purpose.\n                    states.connected += states.completed;\n\n                    newState = 'new';\n                    if (states.failed > 0) {\n                        newState = 'failed';\n                    } else if (states.connecting > 0) {\n                        newState = 'connecting';\n                    } else if (states.disconnected > 0) {\n                        newState = 'disconnected';\n                    } else if (states.new > 0) {\n                        newState = 'new';\n                    } else if (states.connected > 0) {\n                        newState = 'connected';\n                    }\n\n                    if (newState !== this.connectionState) {\n                        this.connectionState = newState;\n                        var event = new Event('connectionstatechange');\n                        this._dispatchEvent('connectionstatechange', event);\n                    }\n                };\n\n                RTCPeerConnection.prototype.createOffer = function () {\n                    var pc = this;\n\n                    if (pc._isClosed) {\n                        return Promise.reject(makeError('InvalidStateError',\n                            'Can not call createOffer after close'));\n                    }\n\n                    var numAudioTracks = pc.transceivers.filter(function (t) {\n                        return t.kind === 'audio';\n                    }).length;\n                    var numVideoTracks = pc.transceivers.filter(function (t) {\n                        return t.kind === 'video';\n                    }).length;\n\n                    // Determine number of audio and video tracks we need to send/recv.\n                    var offerOptions = arguments[0];\n                    if (offerOptions) {\n                        // Reject Chrome legacy constraints.\n                        if (offerOptions.mandatory || offerOptions.optional) {\n                            throw new TypeError(\n                                'Legacy mandatory/optional constraints not supported.');\n                        }\n                        if (offerOptions.offerToReceiveAudio !== undefined) {\n                            if (offerOptions.offerToReceiveAudio === true) {\n                                numAudioTracks = 1;\n                            } else if (offerOptions.offerToReceiveAudio === false) {\n                                numAudioTracks = 0;\n                            } else {\n                                numAudioTracks = offerOptions.offerToReceiveAudio;\n                            }\n                        }\n                        if (offerOptions.offerToReceiveVideo !== undefined) {\n                            if (offerOptions.offerToReceiveVideo === true) {\n                                numVideoTracks = 1;\n                            } else if (offerOptions.offerToReceiveVideo === false) {\n                                numVideoTracks = 0;\n                            } else {\n                                numVideoTracks = offerOptions.offerToReceiveVideo;\n                            }\n                        }\n                    }\n\n                    pc.transceivers.forEach(function (transceiver) {\n                        if (transceiver.kind === 'audio') {\n                            numAudioTracks--;\n                            if (numAudioTracks < 0) {\n                                transceiver.wantReceive = false;\n                            }\n                        } else if (transceiver.kind === 'video') {\n                            numVideoTracks--;\n                            if (numVideoTracks < 0) {\n                                transceiver.wantReceive = false;\n                            }\n                        }\n                    });\n\n                    // Create M-lines for recvonly streams.\n                    while (numAudioTracks > 0 || numVideoTracks > 0) {\n                        if (numAudioTracks > 0) {\n                            pc._createTransceiver('audio');\n                            numAudioTracks--;\n                        }\n                        if (numVideoTracks > 0) {\n                            pc._createTransceiver('video');\n                            numVideoTracks--;\n                        }\n                    }\n\n                    var sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId,\n                        pc._sdpSessionVersion++);\n                    pc.transceivers.forEach(function (transceiver, sdpMLineIndex) {\n                        // For each track, create an ice gatherer, ice transport,\n                        // dtls transport, potentially rtpsender and rtpreceiver.\n                        var track = transceiver.track;\n                        var kind = transceiver.kind;\n                        var mid = transceiver.mid || SDPUtils.generateIdentifier();\n                        transceiver.mid = mid;\n\n                        if (!transceiver.iceGatherer) {\n                            transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex,\n                                pc.usingBundle);\n                        }\n\n                        var localCapabilities = window.RTCRtpSender.getCapabilities(kind);\n                        // filter RTX until additional stuff needed for RTX is implemented\n                        // in adapter.js\n                        if (edgeVersion < 15019) {\n                            localCapabilities.codecs = localCapabilities.codecs.filter(\n                                function (codec) {\n                                    return codec.name !== 'rtx';\n                                });\n                        }\n                        localCapabilities.codecs.forEach(function (codec) {\n                            // work around https://bugs.chromium.org/p/webrtc/issues/detail?id=6552\n                            // by adding level-asymmetry-allowed=1\n                            if (codec.name === 'H264' &&\n                                codec.parameters['level-asymmetry-allowed'] === undefined) {\n                                codec.parameters['level-asymmetry-allowed'] = '1';\n                            }\n\n                            // for subsequent offers, we might have to re-use the payload\n                            // type of the last offer.\n                            if (transceiver.remoteCapabilities &&\n                                transceiver.remoteCapabilities.codecs) {\n                                transceiver.remoteCapabilities.codecs.forEach(function (remoteCodec) {\n                                    if (codec.name.toLowerCase() === remoteCodec.name.toLowerCase() &&\n                                        codec.clockRate === remoteCodec.clockRate) {\n                                        codec.preferredPayloadType = remoteCodec.payloadType;\n                                    }\n                                });\n                            }\n                        });\n                        localCapabilities.headerExtensions.forEach(function (hdrExt) {\n                            var remoteExtensions = transceiver.remoteCapabilities &&\n                                transceiver.remoteCapabilities.headerExtensions || [];\n                            remoteExtensions.forEach(function (rHdrExt) {\n                                if (hdrExt.uri === rHdrExt.uri) {\n                                    hdrExt.id = rHdrExt.id;\n                                }\n                            });\n                        });\n\n                        // generate an ssrc now, to be used later in rtpSender.send\n                        var sendEncodingParameters = transceiver.sendEncodingParameters || [{\n                            ssrc: (2 * sdpMLineIndex + 1) * 1001\n                        }];\n                        if (track) {\n                            // add RTX\n                            if (edgeVersion >= 15019 && kind === 'video' &&\n                                !sendEncodingParameters[0].rtx) {\n                                sendEncodingParameters[0].rtx = {\n                                    ssrc: sendEncodingParameters[0].ssrc + 1\n                                };\n                            }\n                        }\n\n                        if (transceiver.wantReceive) {\n                            transceiver.rtpReceiver = new window.RTCRtpReceiver(\n                                transceiver.dtlsTransport, kind);\n                        }\n\n                        transceiver.localCapabilities = localCapabilities;\n                        transceiver.sendEncodingParameters = sendEncodingParameters;\n                    });\n\n                    // always offer BUNDLE and dispose on return if not supported.\n                    if (pc._config.bundlePolicy !== 'max-compat') {\n                        sdp += 'a=group:BUNDLE ' + pc.transceivers.map(function (t) {\n                            return t.mid;\n                        }).join(' ') + '\\r\\n';\n                    }\n                    sdp += 'a=ice-options:trickle\\r\\n';\n\n                    pc.transceivers.forEach(function (transceiver, sdpMLineIndex) {\n                        sdp += writeMediaSection(transceiver, transceiver.localCapabilities,\n                            'offer', transceiver.stream, pc._dtlsRole);\n                        sdp += 'a=rtcp-rsize\\r\\n';\n\n                        if (transceiver.iceGatherer && pc.iceGatheringState !== 'new' &&\n                            (sdpMLineIndex === 0 || !pc.usingBundle)) {\n                            transceiver.iceGatherer.getLocalCandidates().forEach(function (cand) {\n                                cand.component = 1;\n                                sdp += 'a=' + SDPUtils.writeCandidate(cand) + '\\r\\n';\n                            });\n\n                            if (transceiver.iceGatherer.state === 'completed') {\n                                sdp += 'a=end-of-candidates\\r\\n';\n                            }\n                        }\n                    });\n\n                    var desc = new window.RTCSessionDescription({\n                        type: 'offer',\n                        sdp: sdp\n                    });\n                    return Promise.resolve(desc);\n                };\n\n                RTCPeerConnection.prototype.createAnswer = function () {\n                    var pc = this;\n\n                    if (pc._isClosed) {\n                        return Promise.reject(makeError('InvalidStateError',\n                            'Can not call createAnswer after close'));\n                    }\n\n                    if (!(pc.signalingState === 'have-remote-offer' ||\n                        pc.signalingState === 'have-local-pranswer')) {\n                        return Promise.reject(makeError('InvalidStateError',\n                            'Can not call createAnswer in signalingState ' + pc.signalingState));\n                    }\n\n                    var sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId,\n                        pc._sdpSessionVersion++);\n                    if (pc.usingBundle) {\n                        sdp += 'a=group:BUNDLE ' + pc.transceivers.map(function (t) {\n                            return t.mid;\n                        }).join(' ') + '\\r\\n';\n                    }\n                    var mediaSectionsInOffer = SDPUtils.getMediaSections(\n                        pc.remoteDescription.sdp).length;\n                    pc.transceivers.forEach(function (transceiver, sdpMLineIndex) {\n                        if (sdpMLineIndex + 1 > mediaSectionsInOffer) {\n                            return;\n                        }\n                        if (transceiver.rejected) {\n                            if (transceiver.kind === 'application') {\n                                sdp += 'm=application 0 DTLS/SCTP 5000\\r\\n';\n                            } else if (transceiver.kind === 'audio') {\n                                sdp += 'm=audio 0 UDP/TLS/RTP/SAVPF 0\\r\\n' +\n                                    'a=rtpmap:0 PCMU/8000\\r\\n';\n                            } else if (transceiver.kind === 'video') {\n                                sdp += 'm=video 0 UDP/TLS/RTP/SAVPF 120\\r\\n' +\n                                    'a=rtpmap:120 VP8/90000\\r\\n';\n                            }\n                            sdp += 'c=IN IP4 0.0.0.0\\r\\n' +\n                                'a=inactive\\r\\n' +\n                                'a=mid:' + transceiver.mid + '\\r\\n';\n                            return;\n                        }\n\n                        // FIXME: look at direction.\n                        if (transceiver.stream) {\n                            var localTrack;\n                            if (transceiver.kind === 'audio') {\n                                localTrack = transceiver.stream.getAudioTracks()[0];\n                            } else if (transceiver.kind === 'video') {\n                                localTrack = transceiver.stream.getVideoTracks()[0];\n                            }\n                            if (localTrack) {\n                                // add RTX\n                                if (edgeVersion >= 15019 && transceiver.kind === 'video' &&\n                                    !transceiver.sendEncodingParameters[0].rtx) {\n                                    transceiver.sendEncodingParameters[0].rtx = {\n                                        ssrc: transceiver.sendEncodingParameters[0].ssrc + 1\n                                    };\n                                }\n                            }\n                        }\n\n                        // Calculate intersection of capabilities.\n                        var commonCapabilities = getCommonCapabilities(\n                            transceiver.localCapabilities,\n                            transceiver.remoteCapabilities);\n\n                        var hasRtx = commonCapabilities.codecs.filter(function (c) {\n                            return c.name.toLowerCase() === 'rtx';\n                        }).length;\n                        if (!hasRtx && transceiver.sendEncodingParameters[0].rtx) {\n                            delete transceiver.sendEncodingParameters[0].rtx;\n                        }\n\n                        sdp += writeMediaSection(transceiver, commonCapabilities,\n                            'answer', transceiver.stream, pc._dtlsRole);\n                        if (transceiver.rtcpParameters &&\n                            transceiver.rtcpParameters.reducedSize) {\n                            sdp += 'a=rtcp-rsize\\r\\n';\n                        }\n                    });\n\n                    var desc = new window.RTCSessionDescription({\n                        type: 'answer',\n                        sdp: sdp\n                    });\n                    return Promise.resolve(desc);\n                };\n\n                RTCPeerConnection.prototype.addIceCandidate = function (candidate) {\n                    var pc = this;\n                    var sections;\n                    if (candidate && !(candidate.sdpMLineIndex !== undefined ||\n                        candidate.sdpMid)) {\n                        return Promise.reject(new TypeError('sdpMLineIndex or sdpMid required'));\n                    }\n\n                    // TODO: needs to go into ops queue.\n                    return new Promise(function (resolve, reject) {\n                        if (!pc.remoteDescription) {\n                            return reject(makeError('InvalidStateError',\n                                'Can not add ICE candidate without a remote description'));\n                        } else if (!candidate || candidate.candidate === '') {\n                            for (var j = 0; j < pc.transceivers.length; j++) {\n                                if (pc.transceivers[j].rejected) {\n                                    continue;\n                                }\n                                pc.transceivers[j].iceTransport.addRemoteCandidate({});\n                                sections = SDPUtils.getMediaSections(pc.remoteDescription.sdp);\n                                sections[j] += 'a=end-of-candidates\\r\\n';\n                                pc.remoteDescription.sdp =\n                                    SDPUtils.getDescription(pc.remoteDescription.sdp) +\n                                    sections.join('');\n                                if (pc.usingBundle) {\n                                    break;\n                                }\n                            }\n                        } else {\n                            var sdpMLineIndex = candidate.sdpMLineIndex;\n                            if (candidate.sdpMid) {\n                                for (var i = 0; i < pc.transceivers.length; i++) {\n                                    if (pc.transceivers[i].mid === candidate.sdpMid) {\n                                        sdpMLineIndex = i;\n                                        break;\n                                    }\n                                }\n                            }\n                            var transceiver = pc.transceivers[sdpMLineIndex];\n                            if (transceiver) {\n                                if (transceiver.rejected) {\n                                    return resolve();\n                                }\n                                var cand = Object.keys(candidate.candidate).length > 0 ?\n                                    SDPUtils.parseCandidate(candidate.candidate) : {};\n                                // Ignore Chrome's invalid candidates since Edge does not like them.\n                                if (cand.protocol === 'tcp' && (cand.port === 0 || cand.port === 9)) {\n                                    return resolve();\n                                }\n                                // Ignore RTCP candidates, we assume RTCP-MUX.\n                                if (cand.component && cand.component !== 1) {\n                                    return resolve();\n                                }\n                                // when using bundle, avoid adding candidates to the wrong\n                                // ice transport. And avoid adding candidates added in the SDP.\n                                if (sdpMLineIndex === 0 || (sdpMLineIndex > 0 &&\n                                    transceiver.iceTransport !== pc.transceivers[0].iceTransport)) {\n                                    if (!maybeAddCandidate(transceiver.iceTransport, cand)) {\n                                        return reject(makeError('OperationError',\n                                            'Can not add ICE candidate'));\n                                    }\n                                }\n\n                                // update the remoteDescription.\n                                var candidateString = candidate.candidate.trim();\n                                if (candidateString.indexOf('a=') === 0) {\n                                    candidateString = candidateString.substr(2);\n                                }\n                                sections = SDPUtils.getMediaSections(pc.remoteDescription.sdp);\n                                sections[sdpMLineIndex] += 'a=' +\n                                    (cand.type ? candidateString : 'end-of-candidates')\n                                    + '\\r\\n';\n                                pc.remoteDescription.sdp =\n                                    SDPUtils.getDescription(pc.remoteDescription.sdp) +\n                                    sections.join('');\n                            } else {\n                                return reject(makeError('OperationError',\n                                    'Can not add ICE candidate'));\n                            }\n                        }\n                        resolve();\n                    });\n                };\n\n                RTCPeerConnection.prototype.getStats = function (selector) {\n                    if (selector && selector instanceof window.MediaStreamTrack) {\n                        var senderOrReceiver = null;\n                        this.transceivers.forEach(function (transceiver) {\n                            if (transceiver.rtpSender &&\n                                transceiver.rtpSender.track === selector) {\n                                senderOrReceiver = transceiver.rtpSender;\n                            } else if (transceiver.rtpReceiver &&\n                                transceiver.rtpReceiver.track === selector) {\n                                senderOrReceiver = transceiver.rtpReceiver;\n                            }\n                        });\n                        if (!senderOrReceiver) {\n                            throw makeError('InvalidAccessError', 'Invalid selector.');\n                        }\n                        return senderOrReceiver.getStats();\n                    }\n\n                    var promises = [];\n                    this.transceivers.forEach(function (transceiver) {\n                        ['rtpSender', 'rtpReceiver', 'iceGatherer', 'iceTransport',\n                            'dtlsTransport'].forEach(function (method) {\n                            if (transceiver[method]) {\n                                promises.push(transceiver[method].getStats());\n                            }\n                        });\n                    });\n                    return Promise.all(promises).then(function (allStats) {\n                        var results = new Map();\n                        allStats.forEach(function (stats) {\n                            stats.forEach(function (stat) {\n                                results.set(stat.id, stat);\n                            });\n                        });\n                        return results;\n                    });\n                };\n\n                // fix low-level stat names and return Map instead of object.\n                var ortcObjects = ['RTCRtpSender', 'RTCRtpReceiver', 'RTCIceGatherer',\n                    'RTCIceTransport', 'RTCDtlsTransport'];\n                ortcObjects.forEach(function (ortcObjectName) {\n                    var obj = window[ortcObjectName];\n                    if (obj && obj.prototype && obj.prototype.getStats) {\n                        var nativeGetstats = obj.prototype.getStats;\n                        obj.prototype.getStats = function () {\n                            return nativeGetstats.apply(this)\n                                .then(function (nativeStats) {\n                                    var mapStats = new Map();\n                                    Object.keys(nativeStats).forEach(function (id) {\n                                        nativeStats[id].type = fixStatsType(nativeStats[id]);\n                                        mapStats.set(id, nativeStats[id]);\n                                    });\n                                    return mapStats;\n                                });\n                        };\n                    }\n                });\n\n                // legacy callback shims. Should be moved to adapter.js some days.\n                var methods = ['createOffer', 'createAnswer'];\n                methods.forEach(function (method) {\n                    var nativeMethod = RTCPeerConnection.prototype[method];\n                    RTCPeerConnection.prototype[method] = function () {\n                        var args = arguments;\n                        if (typeof args[0] === 'function' ||\n                            typeof args[1] === 'function') { // legacy\n                            return nativeMethod.apply(this, [arguments[2]])\n                                .then(function (description) {\n                                    if (typeof args[0] === 'function') {\n                                        args[0].apply(null, [description]);\n                                    }\n                                }, function (error) {\n                                    if (typeof args[1] === 'function') {\n                                        args[1].apply(null, [error]);\n                                    }\n                                });\n                        }\n                        return nativeMethod.apply(this, arguments);\n                    };\n                });\n\n                methods = ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'];\n                methods.forEach(function (method) {\n                    var nativeMethod = RTCPeerConnection.prototype[method];\n                    RTCPeerConnection.prototype[method] = function () {\n                        var args = arguments;\n                        if (typeof args[1] === 'function' ||\n                            typeof args[2] === 'function') { // legacy\n                            return nativeMethod.apply(this, arguments)\n                                .then(function () {\n                                    if (typeof args[1] === 'function') {\n                                        args[1].apply(null);\n                                    }\n                                }, function (error) {\n                                    if (typeof args[2] === 'function') {\n                                        args[2].apply(null, [error]);\n                                    }\n                                });\n                        }\n                        return nativeMethod.apply(this, arguments);\n                    };\n                });\n\n                // getStats is special. It doesn't have a spec legacy method yet we support\n                // getStats(something, cb) without error callbacks.\n                ['getStats'].forEach(function (method) {\n                    var nativeMethod = RTCPeerConnection.prototype[method];\n                    RTCPeerConnection.prototype[method] = function () {\n                        var args = arguments;\n                        if (typeof args[1] === 'function') {\n                            return nativeMethod.apply(this, arguments)\n                                .then(function () {\n                                    if (typeof args[1] === 'function') {\n                                        args[1].apply(null);\n                                    }\n                                });\n                        }\n                        return nativeMethod.apply(this, arguments);\n                    };\n                });\n\n                return RTCPeerConnection;\n            };\n\n        }, {\"sdp\": 2}],\n        2: [function (require, module, exports) {\n            /* eslint-env node */\n            'use strict';\n\n// SDP helpers.\n            var SDPUtils = {};\n\n// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\n            SDPUtils.generateIdentifier = function () {\n                return Math.random().toString(36).substr(2, 10);\n            };\n\n// The RTCP CNAME used by all peerconnections from the same JS.\n            SDPUtils.localCName = SDPUtils.generateIdentifier();\n\n// Splits SDP into lines, dealing with both CRLF and LF.\n            SDPUtils.splitLines = function (blob) {\n                return blob.trim().split('\\n').map(function (line) {\n                    return line.trim();\n                });\n            };\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\n            SDPUtils.splitSections = function (blob) {\n                var parts = blob.split('\\nm=');\n                return parts.map(function (part, index) {\n                    return (index > 0 ? 'm=' + part : part).trim() + '\\r\\n';\n                });\n            };\n\n// returns the session description.\n            SDPUtils.getDescription = function (blob) {\n                var sections = SDPUtils.splitSections(blob);\n                return sections && sections[0];\n            };\n\n// returns the individual media sections.\n            SDPUtils.getMediaSections = function (blob) {\n                var sections = SDPUtils.splitSections(blob);\n                sections.shift();\n                return sections;\n            };\n\n// Returns lines that start with a certain prefix.\n            SDPUtils.matchPrefix = function (blob, prefix) {\n                return SDPUtils.splitLines(blob).filter(function (line) {\n                    return line.indexOf(prefix) === 0;\n                });\n            };\n\n// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\n            SDPUtils.parseCandidate = function (line) {\n                var parts;\n                // Parse both variants.\n                if (line.indexOf('a=candidate:') === 0) {\n                    parts = line.substring(12).split(' ');\n                } else {\n                    parts = line.substring(10).split(' ');\n                }\n\n                var candidate = {\n                    foundation: parts[0],\n                    component: parseInt(parts[1], 10),\n                    protocol: parts[2].toLowerCase(),\n                    priority: parseInt(parts[3], 10),\n                    ip: parts[4],\n                    port: parseInt(parts[5], 10),\n                    // skip parts[6] == 'typ'\n                    type: parts[7]\n                };\n\n                for (var i = 8; i < parts.length; i += 2) {\n                    switch (parts[i]) {\n                        case 'raddr':\n                            candidate.relatedAddress = parts[i + 1];\n                            break;\n                        case 'rport':\n                            candidate.relatedPort = parseInt(parts[i + 1], 10);\n                            break;\n                        case 'tcptype':\n                            candidate.tcpType = parts[i + 1];\n                            break;\n                        case 'ufrag':\n                            candidate.ufrag = parts[i + 1]; // for backward compability.\n                            candidate.usernameFragment = parts[i + 1];\n                            break;\n                        default: // extension handling, in particular ufrag\n                            candidate[parts[i]] = parts[i + 1];\n                            break;\n                    }\n                }\n                return candidate;\n            };\n\n// Translates a candidate object into SDP candidate attribute.\n            SDPUtils.writeCandidate = function (candidate) {\n                var sdp = [];\n                sdp.push(candidate.foundation);\n                sdp.push(candidate.component);\n                sdp.push(candidate.protocol.toUpperCase());\n                sdp.push(candidate.priority);\n                sdp.push(candidate.ip);\n                sdp.push(candidate.port);\n\n                var type = candidate.type;\n                sdp.push('typ');\n                sdp.push(type);\n                if (type !== 'host' && candidate.relatedAddress &&\n                    candidate.relatedPort) {\n                    sdp.push('raddr');\n                    sdp.push(candidate.relatedAddress); // was: relAddr\n                    sdp.push('rport');\n                    sdp.push(candidate.relatedPort); // was: relPort\n                }\n                if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n                    sdp.push('tcptype');\n                    sdp.push(candidate.tcpType);\n                }\n                if (candidate.usernameFragment || candidate.ufrag) {\n                    sdp.push('ufrag');\n                    sdp.push(candidate.usernameFragment || candidate.ufrag);\n                }\n                return 'candidate:' + sdp.join(' ');\n            };\n\n// Parses an ice-options line, returns an array of option tags.\n// a=ice-options:foo bar\n            SDPUtils.parseIceOptions = function (line) {\n                return line.substr(14).split(' ');\n            }\n\n// Parses an rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\n            SDPUtils.parseRtpMap = function (line) {\n                var parts = line.substr(9).split(' ');\n                var parsed = {\n                    payloadType: parseInt(parts.shift(), 10) // was: id\n                };\n\n                parts = parts[0].split('/');\n\n                parsed.name = parts[0];\n                parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n                // was: channels\n                parsed.numChannels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\n                return parsed;\n            };\n\n// Generate an a=rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\n            SDPUtils.writeRtpMap = function (codec) {\n                var pt = codec.payloadType;\n                if (codec.preferredPayloadType !== undefined) {\n                    pt = codec.preferredPayloadType;\n                }\n                return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\n                    (codec.numChannels !== 1 ? '/' + codec.numChannels : '') + '\\r\\n';\n            };\n\n// Parses an a=extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\n            SDPUtils.parseExtmap = function (line) {\n                var parts = line.substr(9).split(' ');\n                return {\n                    id: parseInt(parts[0], 10),\n                    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n                    uri: parts[1]\n                };\n            };\n\n// Generates a=extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\n            SDPUtils.writeExtmap = function (headerExtension) {\n                return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +\n                    (headerExtension.direction && headerExtension.direction !== 'sendrecv'\n                        ? '/' + headerExtension.direction\n                        : '') +\n                    ' ' + headerExtension.uri + '\\r\\n';\n            };\n\n// Parses an ftmp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\n            SDPUtils.parseFmtp = function (line) {\n                var parsed = {};\n                var kv;\n                var parts = line.substr(line.indexOf(' ') + 1).split(';');\n                for (var j = 0; j < parts.length; j++) {\n                    kv = parts[j].trim().split('=');\n                    parsed[kv[0].trim()] = kv[1];\n                }\n                return parsed;\n            };\n\n// Generates an a=ftmp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\n            SDPUtils.writeFmtp = function (codec) {\n                var line = '';\n                var pt = codec.payloadType;\n                if (codec.preferredPayloadType !== undefined) {\n                    pt = codec.preferredPayloadType;\n                }\n                if (codec.parameters && Object.keys(codec.parameters).length) {\n                    var params = [];\n                    Object.keys(codec.parameters).forEach(function (param) {\n                        params.push(param + '=' + codec.parameters[param]);\n                    });\n                    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n                }\n                return line;\n            };\n\n// Parses an rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\n            SDPUtils.parseRtcpFb = function (line) {\n                var parts = line.substr(line.indexOf(' ') + 1).split(' ');\n                return {\n                    type: parts.shift(),\n                    parameter: parts.join(' ')\n                };\n            };\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\n            SDPUtils.writeRtcpFb = function (codec) {\n                var lines = '';\n                var pt = codec.payloadType;\n                if (codec.preferredPayloadType !== undefined) {\n                    pt = codec.preferredPayloadType;\n                }\n                if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n                    // FIXME: special handling for trr-int?\n                    codec.rtcpFeedback.forEach(function (fb) {\n                        lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +\n                            (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +\n                            '\\r\\n';\n                    });\n                }\n                return lines;\n            };\n\n// Parses an RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\n            SDPUtils.parseSsrcMedia = function (line) {\n                var sp = line.indexOf(' ');\n                var parts = {\n                    ssrc: parseInt(line.substr(7, sp - 7), 10)\n                };\n                var colon = line.indexOf(':', sp);\n                if (colon > -1) {\n                    parts.attribute = line.substr(sp + 1, colon - sp - 1);\n                    parts.value = line.substr(colon + 1);\n                } else {\n                    parts.attribute = line.substr(sp + 1);\n                }\n                return parts;\n            };\n\n// Extracts the MID (RFC 5888) from a media section.\n// returns the MID or undefined if no mid line was found.\n            SDPUtils.getMid = function (mediaSection) {\n                var mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n                if (mid) {\n                    return mid.substr(6);\n                }\n            }\n\n            SDPUtils.parseFingerprint = function (line) {\n                var parts = line.substr(14).split(' ');\n                return {\n                    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.\n                    value: parts[1]\n                };\n            };\n\n// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\n            SDPUtils.getDtlsParameters = function (mediaSection, sessionpart) {\n                var lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n                    'a=fingerprint:');\n                // Note: a=setup line is ignored since we use the 'auto' role.\n                // Note2: 'algorithm' is not case sensitive except in Edge.\n                return {\n                    role: 'auto',\n                    fingerprints: lines.map(SDPUtils.parseFingerprint)\n                };\n            };\n\n// Serializes DTLS parameters to SDP.\n            SDPUtils.writeDtlsParameters = function (params, setupType) {\n                var sdp = 'a=setup:' + setupType + '\\r\\n';\n                params.fingerprints.forEach(function (fp) {\n                    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n                });\n                return sdp;\n            };\n// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\n            SDPUtils.getIceParameters = function (mediaSection, sessionpart) {\n                var lines = SDPUtils.splitLines(mediaSection);\n                // Search in session part, too.\n                lines = lines.concat(SDPUtils.splitLines(sessionpart));\n                var iceParameters = {\n                    usernameFragment: lines.filter(function (line) {\n                        return line.indexOf('a=ice-ufrag:') === 0;\n                    })[0].substr(12),\n                    password: lines.filter(function (line) {\n                        return line.indexOf('a=ice-pwd:') === 0;\n                    })[0].substr(10)\n                };\n                return iceParameters;\n            };\n\n// Serializes ICE parameters to SDP.\n            SDPUtils.writeIceParameters = function (params) {\n                return 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\n                    'a=ice-pwd:' + params.password + '\\r\\n';\n            };\n\n// Parses the SDP media section and returns RTCRtpParameters.\n            SDPUtils.parseRtpParameters = function (mediaSection) {\n                var description = {\n                    codecs: [],\n                    headerExtensions: [],\n                    fecMechanisms: [],\n                    rtcp: []\n                };\n                var lines = SDPUtils.splitLines(mediaSection);\n                var mline = lines[0].split(' ');\n                for (var i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\n                    var pt = mline[i];\n                    var rtpmapline = SDPUtils.matchPrefix(\n                        mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n                    if (rtpmapline) {\n                        var codec = SDPUtils.parseRtpMap(rtpmapline);\n                        var fmtps = SDPUtils.matchPrefix(\n                            mediaSection, 'a=fmtp:' + pt + ' ');\n                        // Only the first a=fmtp:<pt> is considered.\n                        codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n                        codec.rtcpFeedback = SDPUtils.matchPrefix(\n                            mediaSection, 'a=rtcp-fb:' + pt + ' ')\n                            .map(SDPUtils.parseRtcpFb);\n                        description.codecs.push(codec);\n                        // parse FEC mechanisms from rtpmap lines.\n                        switch (codec.name.toUpperCase()) {\n                            case 'RED':\n                            case 'ULPFEC':\n                                description.fecMechanisms.push(codec.name.toUpperCase());\n                                break;\n                            default: // only RED and ULPFEC are recognized as FEC mechanisms.\n                                break;\n                        }\n                    }\n                }\n                SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(function (line) {\n                    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n                });\n                // FIXME: parse rtcp.\n                return description;\n            };\n\n// Generates parts of the SDP media section describing the capabilities /\n// parameters.\n            SDPUtils.writeRtpDescription = function (kind, caps) {\n                var sdp = '';\n\n                // Build the mline.\n                sdp += 'm=' + kind + ' ';\n                sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n                sdp += ' UDP/TLS/RTP/SAVPF ';\n                sdp += caps.codecs.map(function (codec) {\n                    if (codec.preferredPayloadType !== undefined) {\n                        return codec.preferredPayloadType;\n                    }\n                    return codec.payloadType;\n                }).join(' ') + '\\r\\n';\n\n                sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n                sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n                // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n                caps.codecs.forEach(function (codec) {\n                    sdp += SDPUtils.writeRtpMap(codec);\n                    sdp += SDPUtils.writeFmtp(codec);\n                    sdp += SDPUtils.writeRtcpFb(codec);\n                });\n                var maxptime = 0;\n                caps.codecs.forEach(function (codec) {\n                    if (codec.maxptime > maxptime) {\n                        maxptime = codec.maxptime;\n                    }\n                });\n                if (maxptime > 0) {\n                    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n                }\n                sdp += 'a=rtcp-mux\\r\\n';\n\n                caps.headerExtensions.forEach(function (extension) {\n                    sdp += SDPUtils.writeExtmap(extension);\n                });\n                // FIXME: write fecMechanisms.\n                return sdp;\n            };\n\n// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\n            SDPUtils.parseRtpEncodingParameters = function (mediaSection) {\n                var encodingParameters = [];\n                var description = SDPUtils.parseRtpParameters(mediaSection);\n                var hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n                var hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\n\n                // filter a=ssrc:... cname:, ignore PlanB-msid\n                var ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n                    .map(function (line) {\n                        return SDPUtils.parseSsrcMedia(line);\n                    })\n                    .filter(function (parts) {\n                        return parts.attribute === 'cname';\n                    });\n                var primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n                var secondarySsrc;\n\n                var flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')\n                    .map(function (line) {\n                        var parts = line.split(' ');\n                        parts.shift();\n                        return parts.map(function (part) {\n                            return parseInt(part, 10);\n                        });\n                    });\n                if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n                    secondarySsrc = flows[0][1];\n                }\n\n                description.codecs.forEach(function (codec) {\n                    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n                        var encParam = {\n                            ssrc: primarySsrc,\n                            codecPayloadType: parseInt(codec.parameters.apt, 10),\n                            rtx: {\n                                ssrc: secondarySsrc\n                            }\n                        };\n                        encodingParameters.push(encParam);\n                        if (hasRed) {\n                            encParam = JSON.parse(JSON.stringify(encParam));\n                            encParam.fec = {\n                                ssrc: secondarySsrc,\n                                mechanism: hasUlpfec ? 'red+ulpfec' : 'red'\n                            };\n                            encodingParameters.push(encParam);\n                        }\n                    }\n                });\n                if (encodingParameters.length === 0 && primarySsrc) {\n                    encodingParameters.push({\n                        ssrc: primarySsrc\n                    });\n                }\n\n                // we support both b=AS and b=TIAS but interpret AS as TIAS.\n                var bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n                if (bandwidth.length) {\n                    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n                        bandwidth = parseInt(bandwidth[0].substr(7), 10);\n                    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n                        // use formula from JSEP to convert b=AS to TIAS value.\n                        bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95\n                            - (50 * 40 * 8);\n                    } else {\n                        bandwidth = undefined;\n                    }\n                    encodingParameters.forEach(function (params) {\n                        params.maxBitrate = bandwidth;\n                    });\n                }\n                return encodingParameters;\n            };\n\n// parses http://draft.ortc.org/#rtcrtcpparameters*\n            SDPUtils.parseRtcpParameters = function (mediaSection) {\n                var rtcpParameters = {};\n\n                var cname;\n                // Gets the first SSRC. Note that with RTX there might be multiple\n                // SSRCs.\n                var remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n                    .map(function (line) {\n                        return SDPUtils.parseSsrcMedia(line);\n                    })\n                    .filter(function (obj) {\n                        return obj.attribute === 'cname';\n                    })[0];\n                if (remoteSsrc) {\n                    rtcpParameters.cname = remoteSsrc.value;\n                    rtcpParameters.ssrc = remoteSsrc.ssrc;\n                }\n\n                // Edge uses the compound attribute instead of reducedSize\n                // compound is !reducedSize\n                var rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n                rtcpParameters.reducedSize = rsize.length > 0;\n                rtcpParameters.compound = rsize.length === 0;\n\n                // parses the rtcp-mux attrіbute.\n                // Note that Edge does not support unmuxed RTCP.\n                var mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n                rtcpParameters.mux = mux.length > 0;\n\n                return rtcpParameters;\n            };\n\n// parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\n            SDPUtils.parseMsid = function (mediaSection) {\n                var parts;\n                var spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n                if (spec.length === 1) {\n                    parts = spec[0].substr(7).split(' ');\n                    return {stream: parts[0], track: parts[1]};\n                }\n                var planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n                    .map(function (line) {\n                        return SDPUtils.parseSsrcMedia(line);\n                    })\n                    .filter(function (parts) {\n                        return parts.attribute === 'msid';\n                    });\n                if (planB.length > 0) {\n                    parts = planB[0].value.split(' ');\n                    return {stream: parts[0], track: parts[1]};\n                }\n            };\n\n// Generate a session ID for SDP.\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n// recommends using a cryptographically random +ve 64-bit value\n// but right now this should be acceptable and within the right range\n            SDPUtils.generateSessionId = function () {\n                return Math.random().toString().substr(2, 21);\n            };\n\n// Write boilder plate for start of SDP\n// sessId argument is optional - if not supplied it will\n// be generated randomly\n// sessVersion is optional and defaults to 2\n            SDPUtils.writeSessionBoilerplate = function (sessId, sessVer) {\n                var sessionId;\n                var version = sessVer !== undefined ? sessVer : 2;\n                if (sessId) {\n                    sessionId = sessId;\n                } else {\n                    sessionId = SDPUtils.generateSessionId();\n                }\n                // FIXME: sess-id should be an NTP timestamp.\n                return 'v=0\\r\\n' +\n                    'o=thisisadapterortc ' + sessionId + ' ' + version + ' IN IP4 127.0.0.1\\r\\n' +\n                    's=-\\r\\n' +\n                    't=0 0\\r\\n';\n            };\n\n            SDPUtils.writeMediaSection = function (transceiver, caps, type, stream) {\n                var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);\n\n                // Map ICE parameters (ufrag, pwd) to SDP.\n                sdp += SDPUtils.writeIceParameters(\n                    transceiver.iceGatherer.getLocalParameters());\n\n                // Map DTLS parameters to SDP.\n                sdp += SDPUtils.writeDtlsParameters(\n                    transceiver.dtlsTransport.getLocalParameters(),\n                    type === 'offer' ? 'actpass' : 'active');\n\n                sdp += 'a=mid:' + transceiver.mid + '\\r\\n';\n\n                if (transceiver.direction) {\n                    sdp += 'a=' + transceiver.direction + '\\r\\n';\n                } else if (transceiver.rtpSender && transceiver.rtpReceiver) {\n                    sdp += 'a=sendrecv\\r\\n';\n                } else if (transceiver.rtpSender) {\n                    sdp += 'a=sendonly\\r\\n';\n                } else if (transceiver.rtpReceiver) {\n                    sdp += 'a=recvonly\\r\\n';\n                } else {\n                    sdp += 'a=inactive\\r\\n';\n                }\n\n                if (transceiver.rtpSender) {\n                    // spec.\n                    var msid = 'msid:' + stream.id + ' ' +\n                        transceiver.rtpSender.track.id + '\\r\\n';\n                    sdp += 'a=' + msid;\n\n                    // for Chrome.\n                    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n                        ' ' + msid;\n                    if (transceiver.sendEncodingParameters[0].rtx) {\n                        sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n                            ' ' + msid;\n                        sdp += 'a=ssrc-group:FID ' +\n                            transceiver.sendEncodingParameters[0].ssrc + ' ' +\n                            transceiver.sendEncodingParameters[0].rtx.ssrc +\n                            '\\r\\n';\n                    }\n                }\n                // FIXME: this should be written by writeRtpDescription.\n                sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n                    ' cname:' + SDPUtils.localCName + '\\r\\n';\n                if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {\n                    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n                        ' cname:' + SDPUtils.localCName + '\\r\\n';\n                }\n                return sdp;\n            };\n\n// Gets the direction from the mediaSection or the sessionpart.\n            SDPUtils.getDirection = function (mediaSection, sessionpart) {\n                // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n                var lines = SDPUtils.splitLines(mediaSection);\n                for (var i = 0; i < lines.length; i++) {\n                    switch (lines[i]) {\n                        case 'a=sendrecv':\n                        case 'a=sendonly':\n                        case 'a=recvonly':\n                        case 'a=inactive':\n                            return lines[i].substr(2);\n                        default:\n                        // FIXME: What should happen here?\n                    }\n                }\n                if (sessionpart) {\n                    return SDPUtils.getDirection(sessionpart);\n                }\n                return 'sendrecv';\n            };\n\n            SDPUtils.getKind = function (mediaSection) {\n                var lines = SDPUtils.splitLines(mediaSection);\n                var mline = lines[0].split(' ');\n                return mline[0].substr(2);\n            };\n\n            SDPUtils.isRejected = function (mediaSection) {\n                return mediaSection.split(' ', 2)[1] === '0';\n            };\n\n            SDPUtils.parseMLine = function (mediaSection) {\n                var lines = SDPUtils.splitLines(mediaSection);\n                var parts = lines[0].substr(2).split(' ');\n                return {\n                    kind: parts[0],\n                    port: parseInt(parts[1], 10),\n                    protocol: parts[2],\n                    fmt: parts.slice(3).join(' ')\n                };\n            };\n\n            SDPUtils.parseOLine = function (mediaSection) {\n                var line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n                var parts = line.substr(2).split(' ');\n                return {\n                    username: parts[0],\n                    sessionId: parts[1],\n                    sessionVersion: parseInt(parts[2], 10),\n                    netType: parts[3],\n                    addressType: parts[4],\n                    address: parts[5],\n                };\n            }\n\n// Expose public methods.\n            if (typeof module === 'object') {\n                module.exports = SDPUtils;\n            }\n\n        }, {}],\n        3: [function (require, module, exports) {\n            (function (global) {\n                /*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n                /* eslint-env node */\n\n                'use strict';\n\n                var adapterFactory = require('./adapter_factory.js');\n                module.exports = adapterFactory({window: global.window});\n\n            }).call(this, typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n        }, {\"./adapter_factory.js\": 4}],\n        4: [function (require, module, exports) {\n            /*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n            /* eslint-env node */\n\n            'use strict';\n\n            var utils = require('./utils');\n// Shimming starts here.\n            module.exports = function (dependencies, opts) {\n                var window = dependencies && dependencies.window;\n\n                var options = {\n                    shimChrome: true,\n                    shimFirefox: true,\n                    shimEdge: true,\n                    shimSafari: true,\n                };\n\n                for (var key in opts) {\n                    if (hasOwnProperty.call(opts, key)) {\n                        options[key] = opts[key];\n                    }\n                }\n\n                // Utils.\n                var logging = utils.log;\n                var browserDetails = utils.detectBrowser(window);\n\n                // Uncomment the line below if you want logging to occur, including logging\n                // for the switch statement below. Can also be turned on in the browser via\n                // adapter.disableLog(false), but then logging from the switch statement below\n                // will not appear.\n                // require('./utils').disableLog(false);\n\n                // Browser shims.\n                var chromeShim = require('./chrome/chrome_shim') || null;\n                var edgeShim = require('./edge/edge_shim') || null;\n                var firefoxShim = require('./firefox/firefox_shim') || null;\n                var safariShim = require('./safari/safari_shim') || null;\n                var commonShim = require('./common_shim') || null;\n\n                // Export to the adapter global object visible in the browser.\n                var adapter = {\n                    browserDetails: browserDetails,\n                    commonShim: commonShim,\n                    extractVersion: utils.extractVersion,\n                    disableLog: utils.disableLog,\n                    disableWarnings: utils.disableWarnings\n                };\n\n                // Shim browser if found.\n                switch (browserDetails.browser) {\n                    case 'chrome':\n                        if (!chromeShim || !chromeShim.shimPeerConnection ||\n                            !options.shimChrome) {\n                            logging('Chrome shim is not included in this adapter release.');\n                            return adapter;\n                        }\n                        logging('adapter.js shimming chrome.');\n                        // Export to the adapter global object visible in the browser.\n                        adapter.browserShim = chromeShim;\n                        commonShim.shimCreateObjectURL(window);\n\n                        chromeShim.shimGetUserMedia(window);\n                        chromeShim.shimMediaStream(window);\n                        chromeShim.shimSourceObject(window);\n                        chromeShim.shimPeerConnection(window);\n                        chromeShim.shimOnTrack(window);\n                        chromeShim.shimAddTrackRemoveTrack(window);\n                        chromeShim.shimGetSendersWithDtmf(window);\n\n                        commonShim.shimRTCIceCandidate(window);\n                        commonShim.shimMaxMessageSize(window);\n                        commonShim.shimSendThrowTypeError(window);\n                        break;\n                    case 'firefox':\n                        if (!firefoxShim || !firefoxShim.shimPeerConnection ||\n                            !options.shimFirefox) {\n                            logging('Firefox shim is not included in this adapter release.');\n                            return adapter;\n                        }\n                        logging('adapter.js shimming firefox.');\n                        // Export to the adapter global object visible in the browser.\n                        adapter.browserShim = firefoxShim;\n                        commonShim.shimCreateObjectURL(window);\n\n                        firefoxShim.shimGetUserMedia(window);\n                        firefoxShim.shimSourceObject(window);\n                        firefoxShim.shimPeerConnection(window);\n                        firefoxShim.shimOnTrack(window);\n                        firefoxShim.shimRemoveStream(window);\n\n                        commonShim.shimRTCIceCandidate(window);\n                        commonShim.shimMaxMessageSize(window);\n                        commonShim.shimSendThrowTypeError(window);\n                        break;\n                    case 'edge':\n                        if (!edgeShim || !edgeShim.shimPeerConnection || !options.shimEdge) {\n                            logging('MS edge shim is not included in this adapter release.');\n                            return adapter;\n                        }\n                        logging('adapter.js shimming edge.');\n                        // Export to the adapter global object visible in the browser.\n                        adapter.browserShim = edgeShim;\n                        commonShim.shimCreateObjectURL(window);\n\n                        edgeShim.shimGetUserMedia(window);\n                        edgeShim.shimPeerConnection(window);\n                        edgeShim.shimReplaceTrack(window);\n\n                        // the edge shim implements the full RTCIceCandidate object.\n\n                        commonShim.shimMaxMessageSize(window);\n                        commonShim.shimSendThrowTypeError(window);\n                        break;\n                    case 'safari':\n                        if (!safariShim || !options.shimSafari) {\n                            logging('Safari shim is not included in this adapter release.');\n                            return adapter;\n                        }\n                        logging('adapter.js shimming safari.');\n                        // Export to the adapter global object visible in the browser.\n                        adapter.browserShim = safariShim;\n                        commonShim.shimCreateObjectURL(window);\n\n                        safariShim.shimRTCIceServerUrls(window);\n                        safariShim.shimCallbacksAPI(window);\n                        safariShim.shimLocalStreamsAPI(window);\n                        safariShim.shimRemoteStreamsAPI(window);\n                        safariShim.shimTrackEventTransceiver(window);\n                        safariShim.shimGetUserMedia(window);\n                        safariShim.shimCreateOfferLegacy(window);\n\n                        commonShim.shimRTCIceCandidate(window);\n                        commonShim.shimMaxMessageSize(window);\n                        commonShim.shimSendThrowTypeError(window);\n                        break;\n                    default:\n                        logging('Unsupported browser!');\n                        break;\n                }\n\n                return adapter;\n            };\n\n        }, {\n            \"./chrome/chrome_shim\": 5,\n            \"./common_shim\": 7,\n            \"./edge/edge_shim\": 8,\n            \"./firefox/firefox_shim\": 10,\n            \"./safari/safari_shim\": 12,\n            \"./utils\": 13\n        }],\n        5: [function (require, module, exports) {\n\n            /*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n            /* eslint-env node */\n            'use strict';\n            var utils = require('../utils.js');\n            var logging = utils.log;\n\n            module.exports = {\n                shimGetUserMedia: require('./getusermedia'),\n                shimMediaStream: function (window) {\n                    window.MediaStream = window.MediaStream || window.webkitMediaStream;\n                },\n\n                shimOnTrack: function (window) {\n                    if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\n                        window.RTCPeerConnection.prototype)) {\n                        Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n                            get: function () {\n                                return this._ontrack;\n                            },\n                            set: function (f) {\n                                if (this._ontrack) {\n                                    this.removeEventListener('track', this._ontrack);\n                                }\n                                this.addEventListener('track', this._ontrack = f);\n                            }\n                        });\n                        var origSetRemoteDescription =\n                            window.RTCPeerConnection.prototype.setRemoteDescription;\n                        window.RTCPeerConnection.prototype.setRemoteDescription = function () {\n                            var pc = this;\n                            if (!pc._ontrackpoly) {\n                                pc._ontrackpoly = function (e) {\n                                    // onaddstream does not fire when a track is added to an existing\n                                    // stream. But stream.onaddtrack is implemented so we use that.\n                                    e.stream.addEventListener('addtrack', function (te) {\n                                        var receiver;\n                                        if (window.RTCPeerConnection.prototype.getReceivers) {\n                                            receiver = pc.getReceivers().find(function (r) {\n                                                return r.track && r.track.id === te.track.id;\n                                            });\n                                        } else {\n                                            receiver = {track: te.track};\n                                        }\n\n                                        var event = new Event('track');\n                                        event.track = te.track;\n                                        event.receiver = receiver;\n                                        event.transceiver = {receiver: receiver};\n                                        event.streams = [e.stream];\n                                        pc.dispatchEvent(event);\n                                    });\n                                    e.stream.getTracks().forEach(function (track) {\n                                        var receiver;\n                                        if (window.RTCPeerConnection.prototype.getReceivers) {\n                                            receiver = pc.getReceivers().find(function (r) {\n                                                return r.track && r.track.id === track.id;\n                                            });\n                                        } else {\n                                            receiver = {track: track};\n                                        }\n                                        var event = new Event('track');\n                                        event.track = track;\n                                        event.receiver = receiver;\n                                        event.transceiver = {receiver: receiver};\n                                        event.streams = [e.stream];\n                                        pc.dispatchEvent(event);\n                                    });\n                                };\n                                pc.addEventListener('addstream', pc._ontrackpoly);\n                            }\n                            return origSetRemoteDescription.apply(pc, arguments);\n                        };\n                    } else if (!('RTCRtpTransceiver' in window)) {\n                        utils.wrapPeerConnectionEvent(window, 'track', function (e) {\n                            if (!e.transceiver) {\n                                e.transceiver = {receiver: e.receiver};\n                            }\n                            return e;\n                        });\n                    }\n                },\n\n                shimGetSendersWithDtmf: function (window) {\n                    // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.\n                    if (typeof window === 'object' && window.RTCPeerConnection &&\n                        !('getSenders' in window.RTCPeerConnection.prototype) &&\n                        'createDTMFSender' in window.RTCPeerConnection.prototype) {\n                        var shimSenderWithDtmf = function (pc, track) {\n                            return {\n                                track: track,\n                                get dtmf() {\n                                    if (this._dtmf === undefined) {\n                                        if (track.kind === 'audio') {\n                                            this._dtmf = pc.createDTMFSender(track);\n                                        } else {\n                                            this._dtmf = null;\n                                        }\n                                    }\n                                    return this._dtmf;\n                                },\n                                _pc: pc\n                            };\n                        };\n\n                        // augment addTrack when getSenders is not available.\n                        if (!window.RTCPeerConnection.prototype.getSenders) {\n                            window.RTCPeerConnection.prototype.getSenders = function () {\n                                this._senders = this._senders || [];\n                                return this._senders.slice(); // return a copy of the internal state.\n                            };\n                            var origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n                            window.RTCPeerConnection.prototype.addTrack = function (track, stream) {\n                                var pc = this;\n                                var sender = origAddTrack.apply(pc, arguments);\n                                if (!sender) {\n                                    sender = shimSenderWithDtmf(pc, track);\n                                    pc._senders.push(sender);\n                                }\n                                return sender;\n                            };\n\n                            var origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n                            window.RTCPeerConnection.prototype.removeTrack = function (sender) {\n                                var pc = this;\n                                origRemoveTrack.apply(pc, arguments);\n                                var idx = pc._senders.indexOf(sender);\n                                if (idx !== -1) {\n                                    pc._senders.splice(idx, 1);\n                                }\n                            };\n                        }\n                        var origAddStream = window.RTCPeerConnection.prototype.addStream;\n                        window.RTCPeerConnection.prototype.addStream = function (stream) {\n                            var pc = this;\n                            pc._senders = pc._senders || [];\n                            origAddStream.apply(pc, [stream]);\n                            stream.getTracks().forEach(function (track) {\n                                pc._senders.push(shimSenderWithDtmf(pc, track));\n                            });\n                        };\n\n                        var origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n                        window.RTCPeerConnection.prototype.removeStream = function (stream) {\n                            var pc = this;\n                            pc._senders = pc._senders || [];\n                            origRemoveStream.apply(pc, [stream]);\n\n                            stream.getTracks().forEach(function (track) {\n                                var sender = pc._senders.find(function (s) {\n                                    return s.track === track;\n                                });\n                                if (sender) {\n                                    pc._senders.splice(pc._senders.indexOf(sender), 1); // remove sender\n                                }\n                            });\n                        };\n                    } else if (typeof window === 'object' && window.RTCPeerConnection &&\n                        'getSenders' in window.RTCPeerConnection.prototype &&\n                        'createDTMFSender' in window.RTCPeerConnection.prototype &&\n                        window.RTCRtpSender &&\n                        !('dtmf' in window.RTCRtpSender.prototype)) {\n                        var origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n                        window.RTCPeerConnection.prototype.getSenders = function () {\n                            var pc = this;\n                            var senders = origGetSenders.apply(pc, []);\n                            senders.forEach(function (sender) {\n                                sender._pc = pc;\n                            });\n                            return senders;\n                        };\n\n                        Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n                            get: function () {\n                                if (this._dtmf === undefined) {\n                                    if (this.track.kind === 'audio') {\n                                        this._dtmf = this._pc.createDTMFSender(this.track);\n                                    } else {\n                                        this._dtmf = null;\n                                    }\n                                }\n                                return this._dtmf;\n                            }\n                        });\n                    }\n                },\n\n                shimSourceObject: function (window) {\n                    var URL = window && window.URL;\n\n                    if (typeof window === 'object') {\n                        if (window.HTMLMediaElement &&\n                            !('srcObject' in window.HTMLMediaElement.prototype)) {\n                            // Shim the srcObject property, once, when HTMLMediaElement is found.\n                            Object.defineProperty(window.HTMLMediaElement.prototype, 'srcObject', {\n                                get: function () {\n                                    return this._srcObject;\n                                },\n                                set: function (stream) {\n                                    var self = this;\n                                    // Use _srcObject as a private property for this shim\n                                    this._srcObject = stream;\n                                    if (this.src) {\n                                        URL.revokeObjectURL(this.src);\n                                    }\n\n                                    if (!stream) {\n                                        this.src = '';\n                                        return undefined;\n                                    }\n                                    this.src = URL.createObjectURL(stream);\n                                    // We need to recreate the blob url when a track is added or\n                                    // removed. Doing it manually since we want to avoid a recursion.\n                                    stream.addEventListener('addtrack', function () {\n                                        if (self.src) {\n                                            URL.revokeObjectURL(self.src);\n                                        }\n                                        self.src = URL.createObjectURL(stream);\n                                    });\n                                    stream.addEventListener('removetrack', function () {\n                                        if (self.src) {\n                                            URL.revokeObjectURL(self.src);\n                                        }\n                                        self.src = URL.createObjectURL(stream);\n                                    });\n                                }\n                            });\n                        }\n                    }\n                },\n\n                shimAddTrackRemoveTrackWithNative: function (window) {\n                    // shim addTrack/removeTrack with native variants in order to make\n                    // the interactions with legacy getLocalStreams behave as in other browsers.\n                    // Keeps a mapping stream.id => [stream, rtpsenders...]\n                    window.RTCPeerConnection.prototype.getLocalStreams = function () {\n                        var pc = this;\n                        this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n                        return Object.keys(this._shimmedLocalStreams).map(function (streamId) {\n                            return pc._shimmedLocalStreams[streamId][0];\n                        });\n                    };\n\n                    var origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n                    window.RTCPeerConnection.prototype.addTrack = function (track, stream) {\n                        if (!stream) {\n                            return origAddTrack.apply(this, arguments);\n                        }\n                        this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n                        var sender = origAddTrack.apply(this, arguments);\n                        if (!this._shimmedLocalStreams[stream.id]) {\n                            this._shimmedLocalStreams[stream.id] = [stream, sender];\n                        } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {\n                            this._shimmedLocalStreams[stream.id].push(sender);\n                        }\n                        return sender;\n                    };\n\n                    var origAddStream = window.RTCPeerConnection.prototype.addStream;\n                    window.RTCPeerConnection.prototype.addStream = function (stream) {\n                        var pc = this;\n                        this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n                        stream.getTracks().forEach(function (track) {\n                            var alreadyExists = pc.getSenders().find(function (s) {\n                                return s.track === track;\n                            });\n                            if (alreadyExists) {\n                                throw new DOMException('Track already exists.',\n                                    'InvalidAccessError');\n                            }\n                        });\n                        var existingSenders = pc.getSenders();\n                        origAddStream.apply(this, arguments);\n                        var newSenders = pc.getSenders().filter(function (newSender) {\n                            return existingSenders.indexOf(newSender) === -1;\n                        });\n                        this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);\n                    };\n\n                    var origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n                    window.RTCPeerConnection.prototype.removeStream = function (stream) {\n                        this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n                        delete this._shimmedLocalStreams[stream.id];\n                        return origRemoveStream.apply(this, arguments);\n                    };\n\n                    var origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n                    window.RTCPeerConnection.prototype.removeTrack = function (sender) {\n                        var pc = this;\n                        this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n                        if (sender) {\n                            Object.keys(this._shimmedLocalStreams).forEach(function (streamId) {\n                                var idx = pc._shimmedLocalStreams[streamId].indexOf(sender);\n                                if (idx !== -1) {\n                                    pc._shimmedLocalStreams[streamId].splice(idx, 1);\n                                }\n                                if (pc._shimmedLocalStreams[streamId].length === 1) {\n                                    delete pc._shimmedLocalStreams[streamId];\n                                }\n                            });\n                        }\n                        return origRemoveTrack.apply(this, arguments);\n                    };\n                },\n\n                shimAddTrackRemoveTrack: function (window) {\n                    var browserDetails = utils.detectBrowser(window);\n                    // shim addTrack and removeTrack.\n                    if (window.RTCPeerConnection.prototype.addTrack &&\n                        browserDetails.version >= 65) {\n                        return this.shimAddTrackRemoveTrackWithNative(window);\n                    }\n\n                    // also shim pc.getLocalStreams when addTrack is shimmed\n                    // to return the original streams.\n                    var origGetLocalStreams = window.RTCPeerConnection.prototype\n                        .getLocalStreams;\n                    window.RTCPeerConnection.prototype.getLocalStreams = function () {\n                        var pc = this;\n                        var nativeStreams = origGetLocalStreams.apply(this);\n                        pc._reverseStreams = pc._reverseStreams || {};\n                        return nativeStreams.map(function (stream) {\n                            return pc._reverseStreams[stream.id];\n                        });\n                    };\n\n                    var origAddStream = window.RTCPeerConnection.prototype.addStream;\n                    window.RTCPeerConnection.prototype.addStream = function (stream) {\n                        var pc = this;\n                        pc._streams = pc._streams || {};\n                        pc._reverseStreams = pc._reverseStreams || {};\n\n                        stream.getTracks().forEach(function (track) {\n                            var alreadyExists = pc.getSenders().find(function (s) {\n                                return s.track === track;\n                            });\n                            if (alreadyExists) {\n                                throw new DOMException('Track already exists.',\n                                    'InvalidAccessError');\n                            }\n                        });\n                        // Add identity mapping for consistency with addTrack.\n                        // Unless this is being used with a stream from addTrack.\n                        if (!pc._reverseStreams[stream.id]) {\n                            var newStream = new window.MediaStream(stream.getTracks());\n                            pc._streams[stream.id] = newStream;\n                            pc._reverseStreams[newStream.id] = stream;\n                            stream = newStream;\n                        }\n                        origAddStream.apply(pc, [stream]);\n                    };\n\n                    var origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n                    window.RTCPeerConnection.prototype.removeStream = function (stream) {\n                        var pc = this;\n                        pc._streams = pc._streams || {};\n                        pc._reverseStreams = pc._reverseStreams || {};\n\n                        origRemoveStream.apply(pc, [(pc._streams[stream.id] || stream)]);\n                        delete pc._reverseStreams[(pc._streams[stream.id] ?\n                            pc._streams[stream.id].id : stream.id)];\n                        delete pc._streams[stream.id];\n                    };\n\n                    window.RTCPeerConnection.prototype.addTrack = function (track, stream) {\n                        var pc = this;\n                        if (pc.signalingState === 'closed') {\n                            throw new DOMException(\n                                'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n                                'InvalidStateError');\n                        }\n                        var streams = [].slice.call(arguments, 1);\n                        if (streams.length !== 1 ||\n                            !streams[0].getTracks().find(function (t) {\n                                return t === track;\n                            })) {\n                            // this is not fully correct but all we can manage without\n                            // [[associated MediaStreams]] internal slot.\n                            throw new DOMException(\n                                'The adapter.js addTrack polyfill only supports a single ' +\n                                ' stream which is associated with the specified track.',\n                                'NotSupportedError');\n                        }\n\n                        var alreadyExists = pc.getSenders().find(function (s) {\n                            return s.track === track;\n                        });\n                        if (alreadyExists) {\n                            throw new DOMException('Track already exists.',\n                                'InvalidAccessError');\n                        }\n\n                        pc._streams = pc._streams || {};\n                        pc._reverseStreams = pc._reverseStreams || {};\n                        var oldStream = pc._streams[stream.id];\n                        if (oldStream) {\n                            // this is using odd Chrome behaviour, use with caution:\n                            // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815\n                            // Note: we rely on the high-level addTrack/dtmf shim to\n                            // create the sender with a dtmf sender.\n                            oldStream.addTrack(track);\n\n                            // Trigger ONN async.\n                            Promise.resolve().then(function () {\n                                pc.dispatchEvent(new Event('negotiationneeded'));\n                            });\n                        } else {\n                            var newStream = new window.MediaStream([track]);\n                            pc._streams[stream.id] = newStream;\n                            pc._reverseStreams[newStream.id] = stream;\n                            pc.addStream(newStream);\n                        }\n                        return pc.getSenders().find(function (s) {\n                            return s.track === track;\n                        });\n                    };\n\n                    // replace the internal stream id with the external one and\n                    // vice versa.\n                    function replaceInternalStreamId(pc, description) {\n                        var sdp = description.sdp;\n                        Object.keys(pc._reverseStreams || []).forEach(function (internalId) {\n                            var externalStream = pc._reverseStreams[internalId];\n                            var internalStream = pc._streams[externalStream.id];\n                            sdp = sdp.replace(new RegExp(internalStream.id, 'g'),\n                                externalStream.id);\n                        });\n                        return new RTCSessionDescription({\n                            type: description.type,\n                            sdp: sdp\n                        });\n                    }\n\n                    function replaceExternalStreamId(pc, description) {\n                        var sdp = description.sdp;\n                        Object.keys(pc._reverseStreams || []).forEach(function (internalId) {\n                            var externalStream = pc._reverseStreams[internalId];\n                            var internalStream = pc._streams[externalStream.id];\n                            sdp = sdp.replace(new RegExp(externalStream.id, 'g'),\n                                internalStream.id);\n                        });\n                        return new RTCSessionDescription({\n                            type: description.type,\n                            sdp: sdp\n                        });\n                    }\n\n                    ['createOffer', 'createAnswer'].forEach(function (method) {\n                        var nativeMethod = window.RTCPeerConnection.prototype[method];\n                        window.RTCPeerConnection.prototype[method] = function () {\n                            var pc = this;\n                            var args = arguments;\n                            var isLegacyCall = arguments.length &&\n                                typeof arguments[0] === 'function';\n                            if (isLegacyCall) {\n                                return nativeMethod.apply(pc, [\n                                    function (description) {\n                                        var desc = replaceInternalStreamId(pc, description);\n                                        args[0].apply(null, [desc]);\n                                    },\n                                    function (err) {\n                                        if (args[1]) {\n                                            args[1].apply(null, err);\n                                        }\n                                    }, arguments[2]\n                                ]);\n                            }\n                            return nativeMethod.apply(pc, arguments)\n                                .then(function (description) {\n                                    return replaceInternalStreamId(pc, description);\n                                });\n                        };\n                    });\n\n                    var origSetLocalDescription =\n                        window.RTCPeerConnection.prototype.setLocalDescription;\n                    window.RTCPeerConnection.prototype.setLocalDescription = function () {\n                        var pc = this;\n                        if (!arguments.length || !arguments[0].type) {\n                            return origSetLocalDescription.apply(pc, arguments);\n                        }\n                        arguments[0] = replaceExternalStreamId(pc, arguments[0]);\n                        return origSetLocalDescription.apply(pc, arguments);\n                    };\n\n                    // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier\n\n                    var origLocalDescription = Object.getOwnPropertyDescriptor(\n                        window.RTCPeerConnection.prototype, 'localDescription');\n                    Object.defineProperty(window.RTCPeerConnection.prototype,\n                        'localDescription', {\n                            get: function () {\n                                var pc = this;\n                                var description = origLocalDescription.get.apply(this);\n                                if (description.type === '') {\n                                    return description;\n                                }\n                                return replaceInternalStreamId(pc, description);\n                            }\n                        });\n\n                    window.RTCPeerConnection.prototype.removeTrack = function (sender) {\n                        var pc = this;\n                        if (pc.signalingState === 'closed') {\n                            throw new DOMException(\n                                'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n                                'InvalidStateError');\n                        }\n                        // We can not yet check for sender instanceof RTCRtpSender\n                        // since we shim RTPSender. So we check if sender._pc is set.\n                        if (!sender._pc) {\n                            throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' +\n                                'does not implement interface RTCRtpSender.', 'TypeError');\n                        }\n                        var isLocal = sender._pc === pc;\n                        if (!isLocal) {\n                            throw new DOMException('Sender was not created by this connection.',\n                                'InvalidAccessError');\n                        }\n\n                        // Search for the native stream the senders track belongs to.\n                        pc._streams = pc._streams || {};\n                        var stream;\n                        Object.keys(pc._streams).forEach(function (streamid) {\n                            var hasTrack = pc._streams[streamid].getTracks().find(function (track) {\n                                return sender.track === track;\n                            });\n                            if (hasTrack) {\n                                stream = pc._streams[streamid];\n                            }\n                        });\n\n                        if (stream) {\n                            if (stream.getTracks().length === 1) {\n                                // if this is the last track of the stream, remove the stream. This\n                                // takes care of any shimmed _senders.\n                                pc.removeStream(pc._reverseStreams[stream.id]);\n                            } else {\n                                // relying on the same odd chrome behaviour as above.\n                                stream.removeTrack(sender.track);\n                            }\n                            pc.dispatchEvent(new Event('negotiationneeded'));\n                        }\n                    };\n                },\n\n                shimPeerConnection: function (window) {\n                    var browserDetails = utils.detectBrowser(window);\n\n                    // The RTCPeerConnection object.\n                    if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {\n                        window.RTCPeerConnection = function (pcConfig, pcConstraints) {\n                            // Translate iceTransportPolicy to iceTransports,\n                            // see https://code.google.com/p/webrtc/issues/detail?id=4869\n                            // this was fixed in M56 along with unprefixing RTCPeerConnection.\n                            logging('PeerConnection');\n                            if (pcConfig && pcConfig.iceTransportPolicy) {\n                                pcConfig.iceTransports = pcConfig.iceTransportPolicy;\n                            }\n\n                            return new window.webkitRTCPeerConnection(pcConfig, pcConstraints);\n                        };\n                        window.RTCPeerConnection.prototype =\n                            window.webkitRTCPeerConnection.prototype;\n                        // wrap static methods. Currently just generateCertificate.\n                        if (window.webkitRTCPeerConnection.generateCertificate) {\n                            Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n                                get: function () {\n                                    return window.webkitRTCPeerConnection.generateCertificate;\n                                }\n                            });\n                        }\n                    } else {\n                        // migrate from non-spec RTCIceServer.url to RTCIceServer.urls\n                        var OrigPeerConnection = window.RTCPeerConnection;\n                        window.RTCPeerConnection = function (pcConfig, pcConstraints) {\n                            if (pcConfig && pcConfig.iceServers) {\n                                var newIceServers = [];\n                                for (var i = 0; i < pcConfig.iceServers.length; i++) {\n                                    var server = pcConfig.iceServers[i];\n                                    if (!server.hasOwnProperty('urls') &&\n                                        server.hasOwnProperty('url')) {\n                                        utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n                                        server = JSON.parse(JSON.stringify(server));\n                                        server.urls = server.url;\n                                        newIceServers.push(server);\n                                    } else {\n                                        newIceServers.push(pcConfig.iceServers[i]);\n                                    }\n                                }\n                                pcConfig.iceServers = newIceServers;\n                            }\n                            return new OrigPeerConnection(pcConfig, pcConstraints);\n                        };\n                        window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;\n                        // wrap static methods. Currently just generateCertificate.\n                        Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n                            get: function () {\n                                return OrigPeerConnection.generateCertificate;\n                            }\n                        });\n                    }\n\n                    var origGetStats = window.RTCPeerConnection.prototype.getStats;\n                    window.RTCPeerConnection.prototype.getStats = function (selector,\n                                                                            successCallback, errorCallback) {\n                        var pc = this;\n                        var args = arguments;\n\n                        // If selector is a function then we are in the old style stats so just\n                        // pass back the original getStats format to avoid breaking old users.\n                        if (arguments.length > 0 && typeof selector === 'function') {\n                            return origGetStats.apply(this, arguments);\n                        }\n\n                        // When spec-style getStats is supported, return those when called with\n                        // either no arguments or the selector argument is null.\n                        if (origGetStats.length === 0 && (arguments.length === 0 ||\n                            typeof arguments[0] !== 'function')) {\n                            return origGetStats.apply(this, []);\n                        }\n\n                        var fixChromeStats_ = function (response) {\n                            var standardReport = {};\n                            var reports = response.result();\n                            reports.forEach(function (report) {\n                                var standardStats = {\n                                    id: report.id,\n                                    timestamp: report.timestamp,\n                                    type: {\n                                        localcandidate: 'local-candidate',\n                                        remotecandidate: 'remote-candidate'\n                                    }[report.type] || report.type\n                                };\n                                report.names().forEach(function (name) {\n                                    standardStats[name] = report.stat(name);\n                                });\n                                standardReport[standardStats.id] = standardStats;\n                            });\n\n                            return standardReport;\n                        };\n\n                        // shim getStats with maplike support\n                        var makeMapStats = function (stats) {\n                            return new Map(Object.keys(stats).map(function (key) {\n                                return [key, stats[key]];\n                            }));\n                        };\n\n                        if (arguments.length >= 2) {\n                            var successCallbackWrapper_ = function (response) {\n                                args[1](makeMapStats(fixChromeStats_(response)));\n                            };\n\n                            return origGetStats.apply(this, [successCallbackWrapper_,\n                                arguments[0]]);\n                        }\n\n                        // promise-support\n                        return new Promise(function (resolve, reject) {\n                            origGetStats.apply(pc, [\n                                function (response) {\n                                    resolve(makeMapStats(fixChromeStats_(response)));\n                                }, reject]);\n                        }).then(successCallback, errorCallback);\n                    };\n\n                    // add promise support -- natively available in Chrome 51\n                    if (browserDetails.version < 51) {\n                        ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n                            .forEach(function (method) {\n                                var nativeMethod = window.RTCPeerConnection.prototype[method];\n                                window.RTCPeerConnection.prototype[method] = function () {\n                                    var args = arguments;\n                                    var pc = this;\n                                    var promise = new Promise(function (resolve, reject) {\n                                        nativeMethod.apply(pc, [args[0], resolve, reject]);\n                                    });\n                                    if (args.length < 2) {\n                                        return promise;\n                                    }\n                                    return promise.then(function () {\n                                            args[1].apply(null, []);\n                                        },\n                                        function (err) {\n                                            if (args.length >= 3) {\n                                                args[2].apply(null, [err]);\n                                            }\n                                        });\n                                };\n                            });\n                    }\n\n                    // promise support for createOffer and createAnswer. Available (without\n                    // bugs) since M52: crbug/619289\n                    if (browserDetails.version < 52) {\n                        ['createOffer', 'createAnswer'].forEach(function (method) {\n                            var nativeMethod = window.RTCPeerConnection.prototype[method];\n                            window.RTCPeerConnection.prototype[method] = function () {\n                                var pc = this;\n                                if (arguments.length < 1 || (arguments.length === 1 &&\n                                    typeof arguments[0] === 'object')) {\n                                    var opts = arguments.length === 1 ? arguments[0] : undefined;\n                                    return new Promise(function (resolve, reject) {\n                                        nativeMethod.apply(pc, [resolve, reject, opts]);\n                                    });\n                                }\n                                return nativeMethod.apply(this, arguments);\n                            };\n                        });\n                    }\n\n                    // shim implicit creation of RTCSessionDescription/RTCIceCandidate\n                    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n                        .forEach(function (method) {\n                            var nativeMethod = window.RTCPeerConnection.prototype[method];\n                            window.RTCPeerConnection.prototype[method] = function () {\n                                arguments[0] = new ((method === 'addIceCandidate') ?\n                                    window.RTCIceCandidate :\n                                    window.RTCSessionDescription)(arguments[0]);\n                                return nativeMethod.apply(this, arguments);\n                            };\n                        });\n\n                    // support for addIceCandidate(null or undefined)\n                    var nativeAddIceCandidate =\n                        window.RTCPeerConnection.prototype.addIceCandidate;\n                    window.RTCPeerConnection.prototype.addIceCandidate = function () {\n                        if (!arguments[0]) {\n                            if (arguments[1]) {\n                                arguments[1].apply(null);\n                            }\n                            return Promise.resolve();\n                        }\n                        return nativeAddIceCandidate.apply(this, arguments);\n                    };\n                }\n            };\n\n        }, {\"../utils.js\": 13, \"./getusermedia\": 6}],\n        6: [function (require, module, exports) {\n            /*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n            /* eslint-env node */\n            'use strict';\n            var utils = require('../utils.js');\n            var logging = utils.log;\n\n// Expose public methods.\n            module.exports = function (window) {\n                var browserDetails = utils.detectBrowser(window);\n                var navigator = window && window.navigator;\n\n                var constraintsToChrome_ = function (c) {\n                    if (typeof c !== 'object' || c.mandatory || c.optional) {\n                        return c;\n                    }\n                    var cc = {};\n                    Object.keys(c).forEach(function (key) {\n                        if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n                            return;\n                        }\n                        var r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};\n                        if (r.exact !== undefined && typeof r.exact === 'number') {\n                            r.min = r.max = r.exact;\n                        }\n                        var oldname_ = function (prefix, name) {\n                            if (prefix) {\n                                return prefix + name.charAt(0).toUpperCase() + name.slice(1);\n                            }\n                            return (name === 'deviceId') ? 'sourceId' : name;\n                        };\n                        if (r.ideal !== undefined) {\n                            cc.optional = cc.optional || [];\n                            var oc = {};\n                            if (typeof r.ideal === 'number') {\n                                oc[oldname_('min', key)] = r.ideal;\n                                cc.optional.push(oc);\n                                oc = {};\n                                oc[oldname_('max', key)] = r.ideal;\n                                cc.optional.push(oc);\n                            } else {\n                                oc[oldname_('', key)] = r.ideal;\n                                cc.optional.push(oc);\n                            }\n                        }\n                        if (r.exact !== undefined && typeof r.exact !== 'number') {\n                            cc.mandatory = cc.mandatory || {};\n                            cc.mandatory[oldname_('', key)] = r.exact;\n                        } else {\n                            ['min', 'max'].forEach(function (mix) {\n                                if (r[mix] !== undefined) {\n                                    cc.mandatory = cc.mandatory || {};\n                                    cc.mandatory[oldname_(mix, key)] = r[mix];\n                                }\n                            });\n                        }\n                    });\n                    if (c.advanced) {\n                        cc.optional = (cc.optional || []).concat(c.advanced);\n                    }\n                    return cc;\n                };\n\n                var shimConstraints_ = function (constraints, func) {\n                    if (browserDetails.version >= 61) {\n                        return func(constraints);\n                    }\n                    constraints = JSON.parse(JSON.stringify(constraints));\n                    if (constraints && typeof constraints.audio === 'object') {\n                        var remap = function (obj, a, b) {\n                            if (a in obj && !(b in obj)) {\n                                obj[b] = obj[a];\n                                delete obj[a];\n                            }\n                        };\n                        constraints = JSON.parse(JSON.stringify(constraints));\n                        remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');\n                        remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');\n                        constraints.audio = constraintsToChrome_(constraints.audio);\n                    }\n                    if (constraints && typeof constraints.video === 'object') {\n                        // Shim facingMode for mobile & surface pro.\n                        var face = constraints.video.facingMode;\n                        face = face && ((typeof face === 'object') ? face : {ideal: face});\n                        var getSupportedFacingModeLies = browserDetails.version < 66;\n\n                        if ((face && (face.exact === 'user' || face.exact === 'environment' ||\n                            face.ideal === 'user' || face.ideal === 'environment')) &&\n                            !(navigator.mediaDevices.getSupportedConstraints &&\n                                navigator.mediaDevices.getSupportedConstraints().facingMode &&\n                                !getSupportedFacingModeLies)) {\n                            delete constraints.video.facingMode;\n                            var matches;\n                            if (face.exact === 'environment' || face.ideal === 'environment') {\n                                matches = ['back', 'rear'];\n                            } else if (face.exact === 'user' || face.ideal === 'user') {\n                                matches = ['front'];\n                            }\n                            if (matches) {\n                                // Look for matches in label, or use last cam for back (typical).\n                                return navigator.mediaDevices.enumerateDevices()\n                                    .then(function (devices) {\n                                        devices = devices.filter(function (d) {\n                                            return d.kind === 'videoinput';\n                                        });\n                                        var dev = devices.find(function (d) {\n                                            return matches.some(function (match) {\n                                                return d.label.toLowerCase().indexOf(match) !== -1;\n                                            });\n                                        });\n                                        if (!dev && devices.length && matches.indexOf('back') !== -1) {\n                                            dev = devices[devices.length - 1]; // more likely the back cam\n                                        }\n                                        if (dev) {\n                                            constraints.video.deviceId = face.exact ? {exact: dev.deviceId} :\n                                                {ideal: dev.deviceId};\n                                        }\n                                        constraints.video = constraintsToChrome_(constraints.video);\n                                        logging('chrome: ' + JSON.stringify(constraints));\n                                        return func(constraints);\n                                    });\n                            }\n                        }\n                        constraints.video = constraintsToChrome_(constraints.video);\n                    }\n                    logging('chrome: ' + JSON.stringify(constraints));\n                    return func(constraints);\n                };\n\n                var shimError_ = function (e) {\n                    return {\n                        name: {\n                            PermissionDeniedError: 'NotAllowedError',\n                            PermissionDismissedError: 'NotAllowedError',\n                            InvalidStateError: 'NotAllowedError',\n                            DevicesNotFoundError: 'NotFoundError',\n                            ConstraintNotSatisfiedError: 'OverconstrainedError',\n                            TrackStartError: 'NotReadableError',\n                            MediaDeviceFailedDueToShutdown: 'NotAllowedError',\n                            MediaDeviceKillSwitchOn: 'NotAllowedError',\n                            TabCaptureError: 'AbortError',\n                            ScreenCaptureError: 'AbortError',\n                            DeviceCaptureError: 'AbortError'\n                        }[e.name] || e.name,\n                        message: e.message,\n                        constraint: e.constraintName,\n                        toString: function () {\n                            return this.name + (this.message && ': ') + this.message;\n                        }\n                    };\n                };\n\n                var getUserMedia_ = function (constraints, onSuccess, onError) {\n                    shimConstraints_(constraints, function (c) {\n                        navigator.webkitGetUserMedia(c, onSuccess, function (e) {\n                            if (onError) {\n                                onError(shimError_(e));\n                            }\n                        });\n                    });\n                };\n\n                navigator.getUserMedia = getUserMedia_;\n\n                // Returns the result of getUserMedia as a Promise.\n                var getUserMediaPromise_ = function (constraints) {\n                    return new Promise(function (resolve, reject) {\n                        navigator.getUserMedia(constraints, resolve, reject);\n                    });\n                };\n\n                if (!navigator.mediaDevices) {\n                    navigator.mediaDevices = {\n                        getUserMedia: getUserMediaPromise_,\n                        enumerateDevices: function () {\n                            return new Promise(function (resolve) {\n                                var kinds = {audio: 'audioinput', video: 'videoinput'};\n                                return window.MediaStreamTrack.getSources(function (devices) {\n                                    resolve(devices.map(function (device) {\n                                        return {\n                                            label: device.label,\n                                            kind: kinds[device.kind],\n                                            deviceId: device.id,\n                                            groupId: ''\n                                        };\n                                    }));\n                                });\n                            });\n                        },\n                        getSupportedConstraints: function () {\n                            return {\n                                deviceId: true, echoCancellation: true, facingMode: true,\n                                frameRate: true, height: true, width: true\n                            };\n                        }\n                    };\n                }\n\n                // A shim for getUserMedia method on the mediaDevices object.\n                // TODO(KaptenJansson) remove once implemented in Chrome stable.\n                if (!navigator.mediaDevices.getUserMedia) {\n                    navigator.mediaDevices.getUserMedia = function (constraints) {\n                        return getUserMediaPromise_(constraints);\n                    };\n                } else {\n                    // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia\n                    // function which returns a Promise, it does not accept spec-style\n                    // constraints.\n                    var origGetUserMedia = navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);\n                    navigator.mediaDevices.getUserMedia = function (cs) {\n                        return shimConstraints_(cs, function (c) {\n                            return origGetUserMedia(c).then(function (stream) {\n                                if (c.audio && !stream.getAudioTracks().length ||\n                                    c.video && !stream.getVideoTracks().length) {\n                                    stream.getTracks().forEach(function (track) {\n                                        track.stop();\n                                    });\n                                    throw new DOMException('', 'NotFoundError');\n                                }\n                                return stream;\n                            }, function (e) {\n                                return Promise.reject(shimError_(e));\n                            });\n                        });\n                    };\n                }\n\n                // Dummy devicechange event methods.\n                // TODO(KaptenJansson) remove once implemented in Chrome stable.\n                if (typeof navigator.mediaDevices.addEventListener === 'undefined') {\n                    navigator.mediaDevices.addEventListener = function () {\n                        logging('Dummy mediaDevices.addEventListener called.');\n                    };\n                }\n                if (typeof navigator.mediaDevices.removeEventListener === 'undefined') {\n                    navigator.mediaDevices.removeEventListener = function () {\n                        logging('Dummy mediaDevices.removeEventListener called.');\n                    };\n                }\n            };\n\n        }, {\"../utils.js\": 13}],\n        7: [function (require, module, exports) {\n            /*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n            /* eslint-env node */\n            'use strict';\n\n            var SDPUtils = require('sdp');\n            var utils = require('./utils');\n\n            module.exports = {\n                shimRTCIceCandidate: function (window) {\n                    // foundation is arbitrarily chosen as an indicator for full support for\n                    // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface\n                    if (!window.RTCIceCandidate || (window.RTCIceCandidate && 'foundation' in\n                        window.RTCIceCandidate.prototype)) {\n                        return;\n                    }\n\n                    var NativeRTCIceCandidate = window.RTCIceCandidate;\n                    window.RTCIceCandidate = function (args) {\n                        // Remove the a= which shouldn't be part of the candidate string.\n                        if (typeof args === 'object' && args.candidate &&\n                            args.candidate.indexOf('a=') === 0) {\n                            args = JSON.parse(JSON.stringify(args));\n                            args.candidate = args.candidate.substr(2);\n                        }\n\n                        if (args.candidate && args.candidate.length) {\n                            // Augment the native candidate with the parsed fields.\n                            var nativeCandidate = new NativeRTCIceCandidate(args);\n                            var parsedCandidate = SDPUtils.parseCandidate(args.candidate);\n                            var augmentedCandidate = Object.assign(nativeCandidate,\n                                parsedCandidate);\n\n                            // Add a serializer that does not serialize the extra attributes.\n                            augmentedCandidate.toJSON = function () {\n                                return {\n                                    candidate: augmentedCandidate.candidate,\n                                    sdpMid: augmentedCandidate.sdpMid,\n                                    sdpMLineIndex: augmentedCandidate.sdpMLineIndex,\n                                    usernameFragment: augmentedCandidate.usernameFragment,\n                                };\n                            };\n                            return augmentedCandidate;\n                        }\n                        return new NativeRTCIceCandidate(args);\n                    };\n                    window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;\n\n                    // Hook up the augmented candidate in onicecandidate and\n                    // addEventListener('icecandidate', ...)\n                    utils.wrapPeerConnectionEvent(window, 'icecandidate', function (e) {\n                        if (e.candidate) {\n                            Object.defineProperty(e, 'candidate', {\n                                value: new window.RTCIceCandidate(e.candidate),\n                                writable: 'false'\n                            });\n                        }\n                        return e;\n                    });\n                },\n\n                // shimCreateObjectURL must be called before shimSourceObject to avoid loop.\n\n                shimCreateObjectURL: function (window) {\n                    var URL = window && window.URL;\n\n                    if (!(typeof window === 'object' && window.HTMLMediaElement &&\n                        'srcObject' in window.HTMLMediaElement.prototype &&\n                        URL.createObjectURL && URL.revokeObjectURL)) {\n                        // Only shim CreateObjectURL using srcObject if srcObject exists.\n                        return undefined;\n                    }\n\n                    var nativeCreateObjectURL = URL.createObjectURL.bind(URL);\n                    var nativeRevokeObjectURL = URL.revokeObjectURL.bind(URL);\n                    var streams = new Map(), newId = 0;\n\n                    URL.createObjectURL = function (stream) {\n                        if ('getTracks' in stream) {\n                            var url = 'polyblob:' + (++newId);\n                            streams.set(url, stream);\n                            utils.deprecated('URL.createObjectURL(stream)',\n                                'elem.srcObject = stream');\n                            return url;\n                        }\n                        return nativeCreateObjectURL(stream);\n                    };\n                    URL.revokeObjectURL = function (url) {\n                        nativeRevokeObjectURL(url);\n                        streams.delete(url);\n                    };\n\n                    var dsc = Object.getOwnPropertyDescriptor(window.HTMLMediaElement.prototype,\n                        'src');\n                    Object.defineProperty(window.HTMLMediaElement.prototype, 'src', {\n                        get: function () {\n                            return dsc.get.apply(this);\n                        },\n                        set: function (url) {\n                            this.srcObject = streams.get(url) || null;\n                            return dsc.set.apply(this, [url]);\n                        }\n                    });\n\n                    var nativeSetAttribute = window.HTMLMediaElement.prototype.setAttribute;\n                    window.HTMLMediaElement.prototype.setAttribute = function () {\n                        if (arguments.length === 2 &&\n                            ('' + arguments[0]).toLowerCase() === 'src') {\n                            this.srcObject = streams.get(arguments[1]) || null;\n                        }\n                        return nativeSetAttribute.apply(this, arguments);\n                    };\n                },\n\n                shimMaxMessageSize: function (window) {\n                    if (window.RTCSctpTransport || !window.RTCPeerConnection) {\n                        return;\n                    }\n                    var browserDetails = utils.detectBrowser(window);\n\n                    if (!('sctp' in window.RTCPeerConnection.prototype)) {\n                        Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {\n                            get: function () {\n                                return typeof this._sctp === 'undefined' ? null : this._sctp;\n                            }\n                        });\n                    }\n\n                    var sctpInDescription = function (description) {\n                        var sections = SDPUtils.splitSections(description.sdp);\n                        sections.shift();\n                        return sections.some(function (mediaSection) {\n                            var mLine = SDPUtils.parseMLine(mediaSection);\n                            return mLine && mLine.kind === 'application'\n                                && mLine.protocol.indexOf('SCTP') !== -1;\n                        });\n                    };\n\n                    var getRemoteFirefoxVersion = function (description) {\n                        // TODO: Is there a better solution for detecting Firefox?\n                        var match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\\d+)/);\n                        if (match === null || match.length < 2) {\n                            return -1;\n                        }\n                        var version = parseInt(match[1], 10);\n                        // Test for NaN (yes, this is ugly)\n                        return version !== version ? -1 : version;\n                    };\n\n                    var getCanSendMaxMessageSize = function (remoteIsFirefox) {\n                        // Every implementation we know can send at least 64 KiB.\n                        // Note: Although Chrome is technically able to send up to 256 KiB, the\n                        //       data does not reach the other peer reliably.\n                        //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419\n                        var canSendMaxMessageSize = 65536;\n                        if (browserDetails.browser === 'firefox') {\n                            if (browserDetails.version < 57) {\n                                if (remoteIsFirefox === -1) {\n                                    // FF < 57 will send in 16 KiB chunks using the deprecated PPID\n                                    // fragmentation.\n                                    canSendMaxMessageSize = 16384;\n                                } else {\n                                    // However, other FF (and RAWRTC) can reassemble PPID-fragmented\n                                    // messages. Thus, supporting ~2 GiB when sending.\n                                    canSendMaxMessageSize = 2147483637;\n                                }\n                            } else {\n                                // Currently, all FF >= 57 will reset the remote maximum message size\n                                // to the default value when a data channel is created at a later\n                                // stage. :(\n                                // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n                                canSendMaxMessageSize =\n                                    browserDetails.version === 57 ? 65535 : 65536;\n                            }\n                        }\n                        return canSendMaxMessageSize;\n                    };\n\n                    var getMaxMessageSize = function (description, remoteIsFirefox) {\n                        // Note: 65536 bytes is the default value from the SDP spec. Also,\n                        //       every implementation we know supports receiving 65536 bytes.\n                        var maxMessageSize = 65536;\n\n                        // FF 57 has a slightly incorrect default remote max message size, so\n                        // we need to adjust it here to avoid a failure when sending.\n                        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697\n                        if (browserDetails.browser === 'firefox'\n                            && browserDetails.version === 57) {\n                            maxMessageSize = 65535;\n                        }\n\n                        var match = SDPUtils.matchPrefix(description.sdp, 'a=max-message-size:');\n                        if (match.length > 0) {\n                            maxMessageSize = parseInt(match[0].substr(19), 10);\n                        } else if (browserDetails.browser === 'firefox' &&\n                            remoteIsFirefox !== -1) {\n                            // If the maximum message size is not present in the remote SDP and\n                            // both local and remote are Firefox, the remote peer can receive\n                            // ~2 GiB.\n                            maxMessageSize = 2147483637;\n                        }\n                        return maxMessageSize;\n                    };\n\n                    var origSetRemoteDescription =\n                        window.RTCPeerConnection.prototype.setRemoteDescription;\n                    window.RTCPeerConnection.prototype.setRemoteDescription = function () {\n                        var pc = this;\n                        pc._sctp = null;\n\n                        if (sctpInDescription(arguments[0])) {\n                            // Check if the remote is FF.\n                            var isFirefox = getRemoteFirefoxVersion(arguments[0]);\n\n                            // Get the maximum message size the local peer is capable of sending\n                            var canSendMMS = getCanSendMaxMessageSize(isFirefox);\n\n                            // Get the maximum message size of the remote peer.\n                            var remoteMMS = getMaxMessageSize(arguments[0], isFirefox);\n\n                            // Determine final maximum message size\n                            var maxMessageSize;\n                            if (canSendMMS === 0 && remoteMMS === 0) {\n                                maxMessageSize = Number.POSITIVE_INFINITY;\n                            } else if (canSendMMS === 0 || remoteMMS === 0) {\n                                maxMessageSize = Math.max(canSendMMS, remoteMMS);\n                            } else {\n                                maxMessageSize = Math.min(canSendMMS, remoteMMS);\n                            }\n\n                            // Create a dummy RTCSctpTransport object and the 'maxMessageSize'\n                            // attribute.\n                            var sctp = {};\n                            Object.defineProperty(sctp, 'maxMessageSize', {\n                                get: function () {\n                                    return maxMessageSize;\n                                }\n                            });\n                            pc._sctp = sctp;\n                        }\n\n                        return origSetRemoteDescription.apply(pc, arguments);\n                    };\n                },\n\n                shimSendThrowTypeError: function (window) {\n                    if (!(window.RTCPeerConnection &&\n                        'createDataChannel' in window.RTCPeerConnection.prototype)) {\n                        return;\n                    }\n\n                    // Note: Although Firefox >= 57 has a native implementation, the maximum\n                    //       message size can be reset for all data channels at a later stage.\n                    //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n\n                    var origCreateDataChannel =\n                        window.RTCPeerConnection.prototype.createDataChannel;\n                    window.RTCPeerConnection.prototype.createDataChannel = function () {\n                        var pc = this;\n                        var dataChannel = origCreateDataChannel.apply(pc, arguments);\n                        var origDataChannelSend = dataChannel.send;\n\n                        // Patch 'send' method\n                        dataChannel.send = function () {\n                            var dc = this;\n                            var data = arguments[0];\n                            var length = data.length || data.size || data.byteLength;\n                            if (length > pc.sctp.maxMessageSize) {\n                                throw new DOMException('Message too large (can send a maximum of ' +\n                                    pc.sctp.maxMessageSize + ' bytes)', 'TypeError');\n                            }\n                            return origDataChannelSend.apply(dc, arguments);\n                        };\n\n                        return dataChannel;\n                    };\n                }\n            };\n\n        }, {\"./utils\": 13, \"sdp\": 2}],\n        8: [function (require, module, exports) {\n            /*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n            /* eslint-env node */\n            'use strict';\n\n            var utils = require('../utils');\n            var shimRTCPeerConnection = require('rtcpeerconnection-shim');\n\n            module.exports = {\n                shimGetUserMedia: require('./getusermedia'),\n                shimPeerConnection: function (window) {\n                    var browserDetails = utils.detectBrowser(window);\n\n                    if (window.RTCIceGatherer) {\n                        if (!window.RTCIceCandidate) {\n                            window.RTCIceCandidate = function (args) {\n                                return args;\n                            };\n                        }\n                        if (!window.RTCSessionDescription) {\n                            window.RTCSessionDescription = function (args) {\n                                return args;\n                            };\n                        }\n                        // this adds an additional event listener to MediaStrackTrack that signals\n                        // when a tracks enabled property was changed. Workaround for a bug in\n                        // addStream, see below. No longer required in 15025+\n                        if (browserDetails.version < 15025) {\n                            var origMSTEnabled = Object.getOwnPropertyDescriptor(\n                                window.MediaStreamTrack.prototype, 'enabled');\n                            Object.defineProperty(window.MediaStreamTrack.prototype, 'enabled', {\n                                set: function (value) {\n                                    origMSTEnabled.set.call(this, value);\n                                    var ev = new Event('enabled');\n                                    ev.enabled = value;\n                                    this.dispatchEvent(ev);\n                                }\n                            });\n                        }\n                    }\n\n                    // ORTC defines the DTMF sender a bit different.\n                    // https://github.com/w3c/ortc/issues/714\n                    if (window.RTCRtpSender && !('dtmf' in window.RTCRtpSender.prototype)) {\n                        Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n                            get: function () {\n                                if (this._dtmf === undefined) {\n                                    if (this.track.kind === 'audio') {\n                                        this._dtmf = new window.RTCDtmfSender(this);\n                                    } else if (this.track.kind === 'video') {\n                                        this._dtmf = null;\n                                    }\n                                }\n                                return this._dtmf;\n                            }\n                        });\n                    }\n                    // Edge currently only implements the RTCDtmfSender, not the\n                    // RTCDTMFSender alias. See http://draft.ortc.org/#rtcdtmfsender2*\n                    if (window.RTCDtmfSender && !window.RTCDTMFSender) {\n                        window.RTCDTMFSender = window.RTCDtmfSender;\n                    }\n\n                    window.RTCPeerConnection =\n                        shimRTCPeerConnection(window, browserDetails.version);\n                },\n                shimReplaceTrack: function (window) {\n                    // ORTC has replaceTrack -- https://github.com/w3c/ortc/issues/614\n                    if (window.RTCRtpSender &&\n                        !('replaceTrack' in window.RTCRtpSender.prototype)) {\n                        window.RTCRtpSender.prototype.replaceTrack =\n                            window.RTCRtpSender.prototype.setTrack;\n                    }\n                }\n            };\n\n        }, {\"../utils\": 13, \"./getusermedia\": 9, \"rtcpeerconnection-shim\": 1}],\n        9: [function (require, module, exports) {\n            /*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n            /* eslint-env node */\n            'use strict';\n\n// Expose public methods.\n            module.exports = function (window) {\n                var navigator = window && window.navigator;\n\n                var shimError_ = function (e) {\n                    return {\n                        name: {PermissionDeniedError: 'NotAllowedError'}[e.name] || e.name,\n                        message: e.message,\n                        constraint: e.constraint,\n                        toString: function () {\n                            return this.name;\n                        }\n                    };\n                };\n\n                // getUserMedia error shim.\n                var origGetUserMedia = navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);\n                navigator.mediaDevices.getUserMedia = function (c) {\n                    return origGetUserMedia(c).catch(function (e) {\n                        return Promise.reject(shimError_(e));\n                    });\n                };\n            };\n\n        }, {}],\n        10: [function (require, module, exports) {\n            /*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n            /* eslint-env node */\n            'use strict';\n\n            var utils = require('../utils');\n\n            module.exports = {\n                shimGetUserMedia: require('./getusermedia'),\n                shimOnTrack: function (window) {\n                    if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\n                        window.RTCPeerConnection.prototype)) {\n                        Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n                            get: function () {\n                                return this._ontrack;\n                            },\n                            set: function (f) {\n                                if (this._ontrack) {\n                                    this.removeEventListener('track', this._ontrack);\n                                    this.removeEventListener('addstream', this._ontrackpoly);\n                                }\n                                this.addEventListener('track', this._ontrack = f);\n                                this.addEventListener('addstream', this._ontrackpoly = function (e) {\n                                    e.stream.getTracks().forEach(function (track) {\n                                        var event = new Event('track');\n                                        event.track = track;\n                                        event.receiver = {track: track};\n                                        event.transceiver = {receiver: event.receiver};\n                                        event.streams = [e.stream];\n                                        this.dispatchEvent(event);\n                                    }.bind(this));\n                                }.bind(this));\n                            }\n                        });\n                    }\n                    if (typeof window === 'object' && window.RTCTrackEvent &&\n                        ('receiver' in window.RTCTrackEvent.prototype) &&\n                        !('transceiver' in window.RTCTrackEvent.prototype)) {\n                        Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n                            get: function () {\n                                return {receiver: this.receiver};\n                            }\n                        });\n                    }\n                },\n\n                shimSourceObject: function (window) {\n                    // Firefox has supported mozSrcObject since FF22, unprefixed in 42.\n                    if (typeof window === 'object') {\n                        if (window.HTMLMediaElement &&\n                            !('srcObject' in window.HTMLMediaElement.prototype)) {\n                            // Shim the srcObject property, once, when HTMLMediaElement is found.\n                            Object.defineProperty(window.HTMLMediaElement.prototype, 'srcObject', {\n                                get: function () {\n                                    return this.mozSrcObject;\n                                },\n                                set: function (stream) {\n                                    this.mozSrcObject = stream;\n                                }\n                            });\n                        }\n                    }\n                },\n\n                shimPeerConnection: function (window) {\n                    var browserDetails = utils.detectBrowser(window);\n\n                    if (typeof window !== 'object' || !(window.RTCPeerConnection ||\n                        window.mozRTCPeerConnection)) {\n                        return; // probably media.peerconnection.enabled=false in about:config\n                    }\n                    // The RTCPeerConnection object.\n                    if (!window.RTCPeerConnection) {\n                        window.RTCPeerConnection = function (pcConfig, pcConstraints) {\n                            if (browserDetails.version < 38) {\n                                // .urls is not supported in FF < 38.\n                                // create RTCIceServers with a single url.\n                                if (pcConfig && pcConfig.iceServers) {\n                                    var newIceServers = [];\n                                    for (var i = 0; i < pcConfig.iceServers.length; i++) {\n                                        var server = pcConfig.iceServers[i];\n                                        if (server.hasOwnProperty('urls')) {\n                                            for (var j = 0; j < server.urls.length; j++) {\n                                                var newServer = {\n                                                    url: server.urls[j]\n                                                };\n                                                if (server.urls[j].indexOf('turn') === 0) {\n                                                    newServer.username = server.username;\n                                                    newServer.credential = server.credential;\n                                                }\n                                                newIceServers.push(newServer);\n                                            }\n                                        } else {\n                                            newIceServers.push(pcConfig.iceServers[i]);\n                                        }\n                                    }\n                                    pcConfig.iceServers = newIceServers;\n                                }\n                            }\n                            return new window.mozRTCPeerConnection(pcConfig, pcConstraints);\n                        };\n                        window.RTCPeerConnection.prototype =\n                            window.mozRTCPeerConnection.prototype;\n\n                        // wrap static methods. Currently just generateCertificate.\n                        if (window.mozRTCPeerConnection.generateCertificate) {\n                            Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n                                get: function () {\n                                    return window.mozRTCPeerConnection.generateCertificate;\n                                }\n                            });\n                        }\n\n                        window.RTCSessionDescription = window.mozRTCSessionDescription;\n                        window.RTCIceCandidate = window.mozRTCIceCandidate;\n                    }\n\n                    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\n                    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n                        .forEach(function (method) {\n                            var nativeMethod = window.RTCPeerConnection.prototype[method];\n                            window.RTCPeerConnection.prototype[method] = function () {\n                                arguments[0] = new ((method === 'addIceCandidate') ?\n                                    window.RTCIceCandidate :\n                                    window.RTCSessionDescription)(arguments[0]);\n                                return nativeMethod.apply(this, arguments);\n                            };\n                        });\n\n                    // support for addIceCandidate(null or undefined)\n                    var nativeAddIceCandidate =\n                        window.RTCPeerConnection.prototype.addIceCandidate;\n                    window.RTCPeerConnection.prototype.addIceCandidate = function () {\n                        if (!arguments[0]) {\n                            if (arguments[1]) {\n                                arguments[1].apply(null);\n                            }\n                            return Promise.resolve();\n                        }\n                        return nativeAddIceCandidate.apply(this, arguments);\n                    };\n\n                    // shim getStats with maplike support\n                    var makeMapStats = function (stats) {\n                        var map = new Map();\n                        Object.keys(stats).forEach(function (key) {\n                            map.set(key, stats[key]);\n                            map[key] = stats[key];\n                        });\n                        return map;\n                    };\n\n                    var modernStatsTypes = {\n                        inboundrtp: 'inbound-rtp',\n                        outboundrtp: 'outbound-rtp',\n                        candidatepair: 'candidate-pair',\n                        localcandidate: 'local-candidate',\n                        remotecandidate: 'remote-candidate'\n                    };\n\n                    var nativeGetStats = window.RTCPeerConnection.prototype.getStats;\n                    window.RTCPeerConnection.prototype.getStats = function (\n                        selector,\n                        onSucc,\n                        onErr\n                    ) {\n                        return nativeGetStats.apply(this, [selector || null])\n                            .then(function (stats) {\n                                if (browserDetails.version < 48) {\n                                    stats = makeMapStats(stats);\n                                }\n                                if (browserDetails.version < 53 && !onSucc) {\n                                    // Shim only promise getStats with spec-hyphens in type names\n                                    // Leave callback version alone; misc old uses of forEach before Map\n                                    try {\n                                        stats.forEach(function (stat) {\n                                            stat.type = modernStatsTypes[stat.type] || stat.type;\n                                        });\n                                    } catch (e) {\n                                        if (e.name !== 'TypeError') {\n                                            throw e;\n                                        }\n                                        // Avoid TypeError: \"type\" is read-only, in old versions. 34-43ish\n                                        stats.forEach(function (stat, i) {\n                                            stats.set(i, Object.assign({}, stat, {\n                                                type: modernStatsTypes[stat.type] || stat.type\n                                            }));\n                                        });\n                                    }\n                                }\n                                return stats;\n                            })\n                            .then(onSucc, onErr);\n                    };\n                },\n\n                shimRemoveStream: function (window) {\n                    if (!window.RTCPeerConnection ||\n                        'removeStream' in window.RTCPeerConnection.prototype) {\n                        return;\n                    }\n                    window.RTCPeerConnection.prototype.removeStream = function (stream) {\n                        var pc = this;\n                        utils.deprecated('removeStream', 'removeTrack');\n                        this.getSenders().forEach(function (sender) {\n                            if (sender.track && stream.getTracks().indexOf(sender.track) !== -1) {\n                                pc.removeTrack(sender);\n                            }\n                        });\n                    };\n                }\n            };\n\n        }, {\"../utils\": 13, \"./getusermedia\": 11}],\n        11: [function (require, module, exports) {\n            /*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n            /* eslint-env node */\n            'use strict';\n\n            var utils = require('../utils');\n            var logging = utils.log;\n\n// Expose public methods.\n            module.exports = function (window) {\n                var browserDetails = utils.detectBrowser(window);\n                var navigator = window && window.navigator;\n                var MediaStreamTrack = window && window.MediaStreamTrack;\n\n                var shimError_ = function (e) {\n                    return {\n                        name: {\n                            InternalError: 'NotReadableError',\n                            NotSupportedError: 'TypeError',\n                            PermissionDeniedError: 'NotAllowedError',\n                            SecurityError: 'NotAllowedError'\n                        }[e.name] || e.name,\n                        message: {\n                            'The operation is insecure.': 'The request is not allowed by the ' +\n                            'user agent or the platform in the current context.'\n                        }[e.message] || e.message,\n                        constraint: e.constraint,\n                        toString: function () {\n                            return this.name + (this.message && ': ') + this.message;\n                        }\n                    };\n                };\n\n                // getUserMedia constraints shim.\n                var getUserMedia_ = function (constraints, onSuccess, onError) {\n                    var constraintsToFF37_ = function (c) {\n                        if (typeof c !== 'object' || c.require) {\n                            return c;\n                        }\n                        var require = [];\n                        Object.keys(c).forEach(function (key) {\n                            if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n                                return;\n                            }\n                            var r = c[key] = (typeof c[key] === 'object') ?\n                                c[key] : {ideal: c[key]};\n                            if (r.min !== undefined ||\n                                r.max !== undefined || r.exact !== undefined) {\n                                require.push(key);\n                            }\n                            if (r.exact !== undefined) {\n                                if (typeof r.exact === 'number') {\n                                    r.min = r.max = r.exact;\n                                } else {\n                                    c[key] = r.exact;\n                                }\n                                delete r.exact;\n                            }\n                            if (r.ideal !== undefined) {\n                                c.advanced = c.advanced || [];\n                                var oc = {};\n                                if (typeof r.ideal === 'number') {\n                                    oc[key] = {min: r.ideal, max: r.ideal};\n                                } else {\n                                    oc[key] = r.ideal;\n                                }\n                                c.advanced.push(oc);\n                                delete r.ideal;\n                                if (!Object.keys(r).length) {\n                                    delete c[key];\n                                }\n                            }\n                        });\n                        if (require.length) {\n                            c.require = require;\n                        }\n                        return c;\n                    };\n                    constraints = JSON.parse(JSON.stringify(constraints));\n                    if (browserDetails.version < 38) {\n                        logging('spec: ' + JSON.stringify(constraints));\n                        if (constraints.audio) {\n                            constraints.audio = constraintsToFF37_(constraints.audio);\n                        }\n                        if (constraints.video) {\n                            constraints.video = constraintsToFF37_(constraints.video);\n                        }\n                        logging('ff37: ' + JSON.stringify(constraints));\n                    }\n                    return navigator.mozGetUserMedia(constraints, onSuccess, function (e) {\n                        onError(shimError_(e));\n                    });\n                };\n\n                // Returns the result of getUserMedia as a Promise.\n                var getUserMediaPromise_ = function (constraints) {\n                    return new Promise(function (resolve, reject) {\n                        getUserMedia_(constraints, resolve, reject);\n                    });\n                };\n\n                // Shim for mediaDevices on older versions.\n                if (!navigator.mediaDevices) {\n                    navigator.mediaDevices = {\n                        getUserMedia: getUserMediaPromise_,\n                        addEventListener: function () {\n                        },\n                        removeEventListener: function () {\n                        }\n                    };\n                }\n                navigator.mediaDevices.enumerateDevices =\n                    navigator.mediaDevices.enumerateDevices || function () {\n                        return new Promise(function (resolve) {\n                            var infos = [\n                                {kind: 'audioinput', deviceId: 'default', label: '', groupId: ''},\n                                {kind: 'videoinput', deviceId: 'default', label: '', groupId: ''}\n                            ];\n                            resolve(infos);\n                        });\n                    };\n\n                if (browserDetails.version < 41) {\n                    // Work around http://bugzil.la/1169665\n                    var orgEnumerateDevices =\n                        navigator.mediaDevices.enumerateDevices.bind(navigator.mediaDevices);\n                    navigator.mediaDevices.enumerateDevices = function () {\n                        return orgEnumerateDevices().then(undefined, function (e) {\n                            if (e.name === 'NotFoundError') {\n                                return [];\n                            }\n                            throw e;\n                        });\n                    };\n                }\n                if (browserDetails.version < 49) {\n                    var origGetUserMedia = navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);\n                    navigator.mediaDevices.getUserMedia = function (c) {\n                        return origGetUserMedia(c).then(function (stream) {\n                            // Work around https://bugzil.la/802326\n                            if (c.audio && !stream.getAudioTracks().length ||\n                                c.video && !stream.getVideoTracks().length) {\n                                stream.getTracks().forEach(function (track) {\n                                    track.stop();\n                                });\n                                throw new DOMException('The object can not be found here.',\n                                    'NotFoundError');\n                            }\n                            return stream;\n                        }, function (e) {\n                            return Promise.reject(shimError_(e));\n                        });\n                    };\n                }\n                if (!(browserDetails.version > 55 &&\n                    'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {\n                    var remap = function (obj, a, b) {\n                        if (a in obj && !(b in obj)) {\n                            obj[b] = obj[a];\n                            delete obj[a];\n                        }\n                    };\n\n                    var nativeGetUserMedia = navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);\n                    navigator.mediaDevices.getUserMedia = function (c) {\n                        if (typeof c === 'object' && typeof c.audio === 'object') {\n                            c = JSON.parse(JSON.stringify(c));\n                            remap(c.audio, 'autoGainControl', 'mozAutoGainControl');\n                            remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');\n                        }\n                        return nativeGetUserMedia(c);\n                    };\n\n                    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {\n                        var nativeGetSettings = MediaStreamTrack.prototype.getSettings;\n                        MediaStreamTrack.prototype.getSettings = function () {\n                            var obj = nativeGetSettings.apply(this, arguments);\n                            remap(obj, 'mozAutoGainControl', 'autoGainControl');\n                            remap(obj, 'mozNoiseSuppression', 'noiseSuppression');\n                            return obj;\n                        };\n                    }\n\n                    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {\n                        var nativeApplyConstraints = MediaStreamTrack.prototype.applyConstraints;\n                        MediaStreamTrack.prototype.applyConstraints = function (c) {\n                            if (this.kind === 'audio' && typeof c === 'object') {\n                                c = JSON.parse(JSON.stringify(c));\n                                remap(c, 'autoGainControl', 'mozAutoGainControl');\n                                remap(c, 'noiseSuppression', 'mozNoiseSuppression');\n                            }\n                            return nativeApplyConstraints.apply(this, [c]);\n                        };\n                    }\n                }\n                navigator.getUserMedia = function (constraints, onSuccess, onError) {\n                    if (browserDetails.version < 44) {\n                        return getUserMedia_(constraints, onSuccess, onError);\n                    }\n                    // Replace Firefox 44+'s deprecation warning with unprefixed version.\n                    utils.deprecated('navigator.getUserMedia',\n                        'navigator.mediaDevices.getUserMedia');\n                    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);\n                };\n            };\n\n        }, {\"../utils\": 13}],\n        12: [function (require, module, exports) {\n            /*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n            'use strict';\n            var utils = require('../utils');\n\n            module.exports = {\n                shimLocalStreamsAPI: function (window) {\n                    if (typeof window !== 'object' || !window.RTCPeerConnection) {\n                        return;\n                    }\n                    if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {\n                        window.RTCPeerConnection.prototype.getLocalStreams = function () {\n                            if (!this._localStreams) {\n                                this._localStreams = [];\n                            }\n                            return this._localStreams;\n                        };\n                    }\n                    if (!('getStreamById' in window.RTCPeerConnection.prototype)) {\n                        window.RTCPeerConnection.prototype.getStreamById = function (id) {\n                            var result = null;\n                            if (this._localStreams) {\n                                this._localStreams.forEach(function (stream) {\n                                    if (stream.id === id) {\n                                        result = stream;\n                                    }\n                                });\n                            }\n                            if (this._remoteStreams) {\n                                this._remoteStreams.forEach(function (stream) {\n                                    if (stream.id === id) {\n                                        result = stream;\n                                    }\n                                });\n                            }\n                            return result;\n                        };\n                    }\n                    if (!('addStream' in window.RTCPeerConnection.prototype)) {\n                        var _addTrack = window.RTCPeerConnection.prototype.addTrack;\n                        window.RTCPeerConnection.prototype.addStream = function (stream) {\n                            if (!this._localStreams) {\n                                this._localStreams = [];\n                            }\n                            if (this._localStreams.indexOf(stream) === -1) {\n                                this._localStreams.push(stream);\n                            }\n                            var pc = this;\n                            stream.getTracks().forEach(function (track) {\n                                _addTrack.call(pc, track, stream);\n                            });\n                        };\n\n                        window.RTCPeerConnection.prototype.addTrack = function (track, stream) {\n                            if (stream) {\n                                if (!this._localStreams) {\n                                    this._localStreams = [stream];\n                                } else if (this._localStreams.indexOf(stream) === -1) {\n                                    this._localStreams.push(stream);\n                                }\n                            }\n                            return _addTrack.call(this, track, stream);\n                        };\n                    }\n                    if (!('removeStream' in window.RTCPeerConnection.prototype)) {\n                        window.RTCPeerConnection.prototype.removeStream = function (stream) {\n                            if (!this._localStreams) {\n                                this._localStreams = [];\n                            }\n                            var index = this._localStreams.indexOf(stream);\n                            if (index === -1) {\n                                return;\n                            }\n                            this._localStreams.splice(index, 1);\n                            var pc = this;\n                            var tracks = stream.getTracks();\n                            this.getSenders().forEach(function (sender) {\n                                if (tracks.indexOf(sender.track) !== -1) {\n                                    pc.removeTrack(sender);\n                                }\n                            });\n                        };\n                    }\n                },\n                shimRemoteStreamsAPI: function (window) {\n                    if (typeof window !== 'object' || !window.RTCPeerConnection) {\n                        return;\n                    }\n                    if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {\n                        window.RTCPeerConnection.prototype.getRemoteStreams = function () {\n                            return this._remoteStreams ? this._remoteStreams : [];\n                        };\n                    }\n                    if (!('onaddstream' in window.RTCPeerConnection.prototype)) {\n                        Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {\n                            get: function () {\n                                return this._onaddstream;\n                            },\n                            set: function (f) {\n                                var pc = this;\n                                if (this._onaddstream) {\n                                    this.removeEventListener('addstream', this._onaddstream);\n                                    this.removeEventListener('track', this._onaddstreampoly);\n                                }\n                                this.addEventListener('addstream', this._onaddstream = f);\n                                this.addEventListener('track', this._onaddstreampoly = function (e) {\n                                    e.streams.forEach(function (stream) {\n                                        if (!pc._remoteStreams) {\n                                            pc._remoteStreams = [];\n                                        }\n                                        if (pc._remoteStreams.indexOf(stream) >= 0) {\n                                            return;\n                                        }\n                                        pc._remoteStreams.push(stream);\n                                        var event = new Event('addstream');\n                                        event.stream = stream;\n                                        pc.dispatchEvent(event);\n                                    });\n                                });\n                            }\n                        });\n                    }\n                },\n                shimCallbacksAPI: function (window) {\n                    if (typeof window !== 'object' || !window.RTCPeerConnection) {\n                        return;\n                    }\n                    var prototype = window.RTCPeerConnection.prototype;\n                    var createOffer = prototype.createOffer;\n                    var createAnswer = prototype.createAnswer;\n                    var setLocalDescription = prototype.setLocalDescription;\n                    var setRemoteDescription = prototype.setRemoteDescription;\n                    var addIceCandidate = prototype.addIceCandidate;\n\n                    prototype.createOffer = function (successCallback, failureCallback) {\n                        var options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n                        var promise = createOffer.apply(this, [options]);\n                        if (!failureCallback) {\n                            return promise;\n                        }\n                        promise.then(successCallback, failureCallback);\n                        return Promise.resolve();\n                    };\n\n                    prototype.createAnswer = function (successCallback, failureCallback) {\n                        var options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n                        var promise = createAnswer.apply(this, [options]);\n                        if (!failureCallback) {\n                            return promise;\n                        }\n                        promise.then(successCallback, failureCallback);\n                        return Promise.resolve();\n                    };\n\n                    var withCallback = function (description, successCallback, failureCallback) {\n                        var promise = setLocalDescription.apply(this, [description]);\n                        if (!failureCallback) {\n                            return promise;\n                        }\n                        promise.then(successCallback, failureCallback);\n                        return Promise.resolve();\n                    };\n                    prototype.setLocalDescription = withCallback;\n\n                    withCallback = function (description, successCallback, failureCallback) {\n                        var promise = setRemoteDescription.apply(this, [description]);\n                        if (!failureCallback) {\n                            return promise;\n                        }\n                        promise.then(successCallback, failureCallback);\n                        return Promise.resolve();\n                    };\n                    prototype.setRemoteDescription = withCallback;\n\n                    withCallback = function (candidate, successCallback, failureCallback) {\n                        var promise = addIceCandidate.apply(this, [candidate]);\n                        if (!failureCallback) {\n                            return promise;\n                        }\n                        promise.then(successCallback, failureCallback);\n                        return Promise.resolve();\n                    };\n                    prototype.addIceCandidate = withCallback;\n                },\n                shimGetUserMedia: function (window) {\n                    var navigator = window && window.navigator;\n\n                    if (!navigator.getUserMedia) {\n                        if (navigator.webkitGetUserMedia) {\n                            navigator.getUserMedia = navigator.webkitGetUserMedia.bind(navigator);\n                        } else if (navigator.mediaDevices &&\n                            navigator.mediaDevices.getUserMedia) {\n                            navigator.getUserMedia = function (constraints, cb, errcb) {\n                                navigator.mediaDevices.getUserMedia(constraints)\n                                    .then(cb, errcb);\n                            }.bind(navigator);\n                        }\n                    }\n                },\n                shimRTCIceServerUrls: function (window) {\n                    // migrate from non-spec RTCIceServer.url to RTCIceServer.urls\n                    var OrigPeerConnection = window.RTCPeerConnection;\n                    window.RTCPeerConnection = function (pcConfig, pcConstraints) {\n                        if (pcConfig && pcConfig.iceServers) {\n                            var newIceServers = [];\n                            for (var i = 0; i < pcConfig.iceServers.length; i++) {\n                                var server = pcConfig.iceServers[i];\n                                if (!server.hasOwnProperty('urls') &&\n                                    server.hasOwnProperty('url')) {\n                                    utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n                                    server = JSON.parse(JSON.stringify(server));\n                                    server.urls = server.url;\n                                    delete server.url;\n                                    newIceServers.push(server);\n                                } else {\n                                    newIceServers.push(pcConfig.iceServers[i]);\n                                }\n                            }\n                            pcConfig.iceServers = newIceServers;\n                        }\n                        return new OrigPeerConnection(pcConfig, pcConstraints);\n                    };\n                    window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;\n                    // wrap static methods. Currently just generateCertificate.\n                    if ('generateCertificate' in window.RTCPeerConnection) {\n                        Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n                            get: function () {\n                                return OrigPeerConnection.generateCertificate;\n                            }\n                        });\n                    }\n                },\n                shimTrackEventTransceiver: function (window) {\n                    // Add event.transceiver member over deprecated event.receiver\n                    if (typeof window === 'object' && window.RTCPeerConnection &&\n                        ('receiver' in window.RTCTrackEvent.prototype) &&\n                        // can't check 'transceiver' in window.RTCTrackEvent.prototype, as it is\n                        // defined for some reason even when window.RTCTransceiver is not.\n                        !window.RTCTransceiver) {\n                        Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n                            get: function () {\n                                return {receiver: this.receiver};\n                            }\n                        });\n                    }\n                },\n\n                shimCreateOfferLegacy: function (window) {\n                    var origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n                    window.RTCPeerConnection.prototype.createOffer = function (offerOptions) {\n                        var pc = this;\n                        if (offerOptions) {\n                            if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {\n                                // support bit values\n                                offerOptions.offerToReceiveAudio = !!offerOptions.offerToReceiveAudio;\n                            }\n                            var audioTransceiver = pc.getTransceivers().find(function (transceiver) {\n                                return transceiver.sender.track &&\n                                    transceiver.sender.track.kind === 'audio';\n                            });\n                            if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {\n                                if (audioTransceiver.direction === 'sendrecv') {\n                                    if (audioTransceiver.setDirection) {\n                                        audioTransceiver.setDirection('sendonly');\n                                    } else {\n                                        audioTransceiver.direction = 'sendonly';\n                                    }\n                                } else if (audioTransceiver.direction === 'recvonly') {\n                                    if (audioTransceiver.setDirection) {\n                                        audioTransceiver.setDirection('inactive');\n                                    } else {\n                                        audioTransceiver.direction = 'inactive';\n                                    }\n                                }\n                            } else if (offerOptions.offerToReceiveAudio === true &&\n                                !audioTransceiver) {\n                                pc.addTransceiver('audio');\n                            }\n\n\n                            if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {\n                                // support bit values\n                                offerOptions.offerToReceiveVideo = !!offerOptions.offerToReceiveVideo;\n                            }\n                            var videoTransceiver = pc.getTransceivers().find(function (transceiver) {\n                                return transceiver.sender.track &&\n                                    transceiver.sender.track.kind === 'video';\n                            });\n                            if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {\n                                if (videoTransceiver.direction === 'sendrecv') {\n                                    videoTransceiver.setDirection('sendonly');\n                                } else if (videoTransceiver.direction === 'recvonly') {\n                                    videoTransceiver.setDirection('inactive');\n                                }\n                            } else if (offerOptions.offerToReceiveVideo === true &&\n                                !videoTransceiver) {\n                                pc.addTransceiver('video');\n                            }\n                        }\n                        return origCreateOffer.apply(pc, arguments);\n                    };\n                }\n            };\n\n        }, {\"../utils\": 13}],\n        13: [function (require, module, exports) {\n            /*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n            /* eslint-env node */\n            'use strict';\n\n            var logDisabled_ = true;\n            var deprecationWarnings_ = true;\n\n            /**\n             * Extract browser version out of the provided user agent string.\n             *\n             * @param {!string} uastring userAgent string.\n             * @param {!string} expr Regular expression used as match criteria.\n             * @param {!number} pos position in the version string to be returned.\n             * @return {!number} browser version.\n             */\n            function extractVersion(uastring, expr, pos) {\n                var match = uastring.match(expr);\n                return match && match.length >= pos && parseInt(match[pos], 10);\n            }\n\n// Wraps the peerconnection event eventNameToWrap in a function\n// which returns the modified event object.\n            function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {\n                if (!window.RTCPeerConnection) {\n                    return;\n                }\n                var proto = window.RTCPeerConnection.prototype;\n                var nativeAddEventListener = proto.addEventListener;\n                proto.addEventListener = function (nativeEventName, cb) {\n                    if (nativeEventName !== eventNameToWrap) {\n                        return nativeAddEventListener.apply(this, arguments);\n                    }\n                    var wrappedCallback = function (e) {\n                        cb(wrapper(e));\n                    };\n                    this._eventMap = this._eventMap || {};\n                    this._eventMap[cb] = wrappedCallback;\n                    return nativeAddEventListener.apply(this, [nativeEventName,\n                        wrappedCallback]);\n                };\n\n                var nativeRemoveEventListener = proto.removeEventListener;\n                proto.removeEventListener = function (nativeEventName, cb) {\n                    if (nativeEventName !== eventNameToWrap || !this._eventMap\n                        || !this._eventMap[cb]) {\n                        return nativeRemoveEventListener.apply(this, arguments);\n                    }\n                    var unwrappedCb = this._eventMap[cb];\n                    delete this._eventMap[cb];\n                    return nativeRemoveEventListener.apply(this, [nativeEventName,\n                        unwrappedCb]);\n                };\n\n                Object.defineProperty(proto, 'on' + eventNameToWrap, {\n                    get: function () {\n                        return this['_on' + eventNameToWrap];\n                    },\n                    set: function (cb) {\n                        if (this['_on' + eventNameToWrap]) {\n                            this.removeEventListener(eventNameToWrap,\n                                this['_on' + eventNameToWrap]);\n                            delete this['_on' + eventNameToWrap];\n                        }\n                        if (cb) {\n                            this.addEventListener(eventNameToWrap,\n                                this['_on' + eventNameToWrap] = cb);\n                        }\n                    }\n                });\n            }\n\n// Utility methods.\n            module.exports = {\n                extractVersion: extractVersion,\n                wrapPeerConnectionEvent: wrapPeerConnectionEvent,\n                disableLog: function (bool) {\n                    if (typeof bool !== 'boolean') {\n                        return new Error('Argument type: ' + typeof bool +\n                            '. Please use a boolean.');\n                    }\n                    logDisabled_ = bool;\n                    return (bool) ? 'adapter.js logging disabled' :\n                        'adapter.js logging enabled';\n                },\n\n                /**\n                 * Disable or enable deprecation warnings\n                 * @param {!boolean} bool set to true to disable warnings.\n                 */\n                disableWarnings: function (bool) {\n                    if (typeof bool !== 'boolean') {\n                        return new Error('Argument type: ' + typeof bool +\n                            '. Please use a boolean.');\n                    }\n                    deprecationWarnings_ = !bool;\n                    return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');\n                },\n\n                log: function () {\n                    if (typeof window === 'object') {\n                        if (logDisabled_) {\n                            return;\n                        }\n                        if (typeof console !== 'undefined' && typeof console.log === 'function') {\n                            console.log.apply(console, arguments);\n                        }\n                    }\n                },\n\n                /**\n                 * Shows a deprecation warning suggesting the modern and spec-compatible API.\n                 */\n                deprecated: function (oldMethod, newMethod) {\n                    if (!deprecationWarnings_) {\n                        return;\n                    }\n                    console.warn(oldMethod + ' is deprecated, please use ' + newMethod +\n                        ' instead.');\n                },\n\n                /**\n                 * Browser detector.\n                 *\n                 * @return {object} result containing browser and version\n                 *     properties.\n                 */\n                detectBrowser: function (window) {\n                    var navigator = window && window.navigator;\n\n                    // Returned result object.\n                    var result = {};\n                    result.browser = null;\n                    result.version = null;\n\n                    // Fail early if it's not a browser\n                    if (typeof window === 'undefined' || !window.navigator) {\n                        result.browser = 'Not a browser.';\n                        return result;\n                    }\n\n                    if (navigator.mozGetUserMedia) { // Firefox.\n                        result.browser = 'firefox';\n                        result.version = extractVersion(navigator.userAgent,\n                            /Firefox\\/(\\d+)\\./, 1);\n                    } else if (navigator.webkitGetUserMedia) {\n                        // Chrome, Chromium, Webview, Opera.\n                        // Version matches Chrome/WebRTC version.\n                        result.browser = 'chrome';\n                        result.version = extractVersion(navigator.userAgent,\n                            /Chrom(e|ium)\\/(\\d+)\\./, 2);\n                    } else if (navigator.mediaDevices &&\n                        navigator.userAgent.match(/Edge\\/(\\d+).(\\d+)$/)) { // Edge.\n                        result.browser = 'edge';\n                        result.version = extractVersion(navigator.userAgent,\n                            /Edge\\/(\\d+).(\\d+)$/, 2);\n                    } else if (window.RTCPeerConnection &&\n                        navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)) { // Safari.\n                        result.browser = 'safari';\n                        result.version = extractVersion(navigator.userAgent,\n                            /AppleWebKit\\/(\\d+)\\./, 1);\n                    } else { // Default fallthrough: not supported.\n                        result.browser = 'Not a supported browser.';\n                        return result;\n                    }\n\n                    return result;\n                }\n            };\n\n        }, {}]\n    }, {}, [3])(3)\n});\n","import {ZegoDataReport} from \"../common/zego.datareport\";\nimport {ENUM_RETRY_STATE, ENUM_PUBLISH_STATE, VideoInfo} from \"../common/zego.entity\";\nimport {ZegoSignal} from \"../common/zego.signal\";\nimport {ENUM_PUBLISH_STATE_UPDATE, getSeq, publishErrorList} from \"../common/zego.extern\";\nimport * as adapter from \"./adapter.js\";\nimport {Logger} from \"../common/zego.logger\";\n\nexport class ZegoPublish {\n        \n        logger: Logger;\n        signal: ZegoSignal;\n        state = ENUM_PUBLISH_STATE.stop;\n        \n        sessionId = 0;\n        \n        // localVideo = null;\n        // localStream = null;\n        \n        waitingICETimeInterval = 5000;\n        waitingAnswerTimeInterval = 5000;\n        candidateInfo = [];\n        \n        waitingICETimer = null;\n        waitingAnswerTimer = null;\n        \n        qualityTimer = null;\n        qualityTimeInterval: number;\n        publishQualityList = [];\n        maxQualityListCount = 10;\n        lastPublishStats:any = {};\n        \n        reportSeq = getSeq ();\n        dataReport: ZegoDataReport;\n        \n        \n        //quality signal\n        qualityUpload = false;\n        qualityUploadInterval = 30 * 1000;\n        qualityUploadLastTime = 0;\n        qualitySeq = 0;\n        \n        //retry\n        maxRetryCount = 3;\n        currentRetryCount = 0;\n        retryState = ENUM_RETRY_STATE.didNotStart;\n        waitingServerTimerInterval = 3 * 1000;\n        waitingServerTimer = null;\n        \n        videoInfo: VideoInfo = {\n                width: 0,\n                height: 0,\n                frameRate: 0,\n                bitRate: 0\n        };\n        \n        \n        offerSeq = 0;\n        \n        \n        streamId: string;\n        localStream: MediaStream;\n        \n        sessionSeq: number;\n        \n        peerConnection: RTCPeerConnection | any;\n        qualityCount = 0;\n        closeSessionSignal = false;\n        \n        \n        constructor (log: Logger, signal: ZegoSignal, dataReport: ZegoDataReport, qualityTimeInterval: number) {\n                this.logger = log;\n                this.signal = signal;\n                this.dataReport = dataReport;\n                this.qualityTimeInterval = qualityTimeInterval;\n                dataReport.newReport (this.reportSeq);\n        }\n        \n        private publishStateUpdateError (errorCode: { code: string, msg: string }) {\n                if (this.sessionId != 0 && this.shouldSendCloseSession (errorCode)) {\n                        //send close session request\n                        this.signal.sendCloseSession (getSeq (), this.sessionId, 1);\n                        this.closeSessionSignal = true;\n                }\n                \n                this.state = ENUM_PUBLISH_STATE.stop;\n                this.onPublishStateUpdate (ENUM_PUBLISH_STATE_UPDATE.error, this.streamId, errorCode);\n                \n                this.resetPublish ();\n        }\n        \n        //////////////////////////////////////////////////////////////////////////////////////////////\n        // reset\n        /*\n         *    \"zp.rp.0\": \"ZegoPublish.resetPublish\"\n         */\n        private resetPublish () {\n                this.logger.info (\"zp.rp.0 call\");\n                \n                this.streamId = null;\n                this.state = ENUM_PUBLISH_STATE.stop;\n                \n                if (this.peerConnection != undefined || this.peerConnection != null) {\n                        this.peerConnection.close ();\n                        this.peerConnection = null;\n                }\n                \n                if (this.waitingAnswerTimer != null) {\n                        clearTimeout (this.waitingAnswerTimer);\n                        this.waitingAnswerTimer = null;\n                }\n                \n                if (this.waitingICETimer != null) {\n                        clearTimeout (this.waitingICETimer);\n                        this.waitingICETimer = null;\n                }\n                \n                this.clearPublishQualityTimer ();\n                \n                if (this.signal) {\n                        this.signal.unregisterPushCallback (\"CandidateInfoPush\", this.sessionId);\n                        this.signal.unregisterPushCallback (\"MediaDescPush\", this.sessionId);\n                        this.signal.unregisterPushCallback (\"CloseSessionPush\", this.sessionId);\n                        // this.signal.unregisterPushCallback('WebSocketDisconnect', this.sessionId);\n                }\n                \n                // this.sessionId = 0;\n                this.sessionSeq = 0;\n                this.offerSeq = 0;\n                this.candidateInfo = [];\n                \n                this.publishQualityList = [];\n                \n                this.qualityUploadLastTime = 0;\n                \n                this.currentRetryCount = 0;\n                this.retryState = ENUM_RETRY_STATE.didNotStart;\n                \n                this.clearTryPublishTimer ();\n        }\n        \n        private clearTryPublishTimer () {\n                if (this.waitingServerTimer != null) {\n                        clearTimeout (this.waitingServerTimer);\n                        this.waitingServerTimer = null;\n                }\n        }\n        \n        \n        private clearPublishQualityTimer () {\n                if (this.qualityTimer != null) {\n                        clearInterval (this.qualityTimer);\n                        this.qualityTimer = null;\n                }\n                \n                this.lastPublishStats = {};\n                this.qualityCount = 0;\n                \n                //this.dataReport.uploadReport(this.qualitySeq, \"RTCPublishQuality\");\n        }\n        \n        private shouldSendCloseSession (errorCode: { code: string, msg: string }) {\n                if (this.state != ENUM_PUBLISH_STATE.stop && this.state != ENUM_PUBLISH_STATE.waitingSessionRsp) {\n                        return true;\n                }\n                return false;\n        }\n        \n        \n        /*\n       *    \"zp.sp.0\": \"ZegoPublish.startPublish\"\n       */\n        startPublish (streamId: string, localStream: MediaStream, videoInfo: VideoInfo) {\n                this.logger.debug (\"zp.sp.0 called\");\n                \n                if (!streamId) {\n                        this.logger.error (\"zp.sp.0 streamId is null\");\n                        return;\n                }\n                \n                this.streamId = streamId;\n                this.localStream = localStream;\n                if (videoInfo) {\n                        this.videoInfo = videoInfo;\n                }\n                \n                //send to server\n                this.sessionSeq = getSeq ();\n                this.dataReport.eventStart (this.reportSeq, \"CreateSession\");\n                this.signal.createSession (this.sessionSeq, 0, streamId, (seq, sessionId, data) => {\n                        this.dataReport.eventEndWithMsg (this.reportSeq, \"CreateSession\", {\n                                sessionId: data.session_id\n                        });\n                        this.logger.info('zp.sp.0 sessionId:'+data.session_id);\n                        if (this.sessionSeq != seq) {\n                                this.logger.error (\"zp.sp.0 seq is not match.\");\n                                return;\n                        }\n                        \n                        if (data.result !== 0) {\n                                this.logger.error (\"zp.sp.0 create session failed \" + data.result);\n                                \n                                this.publishStateUpdateError (publishErrorList.CREATE_SESSION_ERROR);\n                        } else {\n                                this.sessionId = data.session_id;\n                                this.logger.debug (\"zp.sp.0 create session success \" + this.sessionId);\n                                \n                                this.onCreatePublishSessionSuccess (data);\n                        }\n                }, (err, seq) => {\n                        this.dataReport.eventEndWithMsg (this.reportSeq, \"CreateSession\", {\n                                error: err\n                        });\n                        \n                        this.publishStateUpdateError (publishErrorList.SEND_SESSION_TIMEOUT);\n                });\n                \n                this.state = ENUM_PUBLISH_STATE.waitingSessionRsp;\n                this.logger.debug (\"zp.sp.0 called success\");\n        };\n        \n        \n        //////////////////////////////////////////////////////////////////////////////////////////////\n        // create session result\n        /*\n         *    \"zp.ops.0\": \"ZegoPublish.onCreatePublishSessionSuccess\"\n         */\n        onCreatePublishSessionSuccess (data) {\n                //create offer\n                this.logger.debug (\"zp.ops.0 called\");\n                // this.state = ENUM_PUBLISH_STATE.Start;\n                \n                let urls = [];\n                if (data.turn_server) urls.push (data.turn_server);\n                if (data.stun_server) urls.push (data.stun_server);\n                \n                let configuration = {\n                        iceTransportPolicy : 'relay' as RTCIceTransportPolicy,\n                        iceServers: [{\n                                urls: urls,\n                                username: data.turn_username,\n                                credential: data.turn_auth_key\n                        }]\n                };\n                \n                this.logger.info (\"zp.ops.0 username: \" + data.turn_username);\n                this.logger.info (\"zp.ops.0 credential: \" + data.turn_auth_key);\n                \n                this.peerConnection = new RTCPeerConnection (configuration);\n                this.peerConnection.onicecandidate = (e) => {\n                        this.onIceCandidate (e);\n                };\n                \n                this.peerConnection.onsignalingstatechange = (e) => {\n                        this.onConnectionStateChange (e);\n                };\n                \n                this.peerConnection.oniceconnectionstatechange = (e) => {\n                        this.onIceConnectionStateChange (e);\n                };\n        \n                let videoTracks =[];\n                let audioTracks =[];\n                if (this.localStream) {\n                        this.localStream.getTracks ().forEach (\n                                    (track) => {\n                                            this.peerConnection.addTrack (track, this.localStream);\n                                    }\n                        );\n                        \n                        let videoTracks = this.localStream.getVideoTracks ();\n                        let audioTracks = this.localStream.getAudioTracks ();\n                        if (videoTracks.length > 0) this.logger.info (\"zp.ops.0 video device: \" + videoTracks[0].label);\n                        if (audioTracks.length > 0) this.logger.info (\"zp.ops.0 audio device: \" + audioTracks[0].label);\n                        \n                }\n                \n                let offerOptions = {\n                        offerToReceiveAudio: audioTracks.length>0?1:0,\n                        offerToReceiveVideo: videoTracks.length>0?1:0,\n                };\n        \n                this.logger.info (\"zp.ops.0 createOffer: \" + offerOptions);\n                //create offer\n                this.dataReport.eventStart (this.reportSeq, \"CreateOffer\");\n                this.peerConnection.createOffer (offerOptions).then (\n                            (desc) => {\n                                    this.dataReport.eventEnd (this.reportSeq, \"CreateOffer\");\n                                    \n                                    this.onCreateOfferSuccess (desc);\n                            },\n                            (error) => {\n                                    this.dataReport.eventEndWithMsg (this.reportSeq, \"CreateOffer\", {\n                                            error: error.toString ()\n                                    });\n                                    \n                                    this.logger.error (\"zp.ops.0 create offer error \" + error.toString ());\n                                    this.publishStateUpdateError (publishErrorList.CREATE_OFFER_ERROR);\n                            }\n                );\n                \n                //register callback\n                this.signal.registerPushCallback (\"CandidateInfoPush\", this.sessionId, (seq: number, sessionId: number, data: any) => {\n                        this.onRecvCandidateInfo (seq, sessionId, data)\n                });\n                this.signal.registerPushCallback (\"CloseSessionPush\", this.sessionId, (seq: number, sessionId: number, data: any) => {\n                        this.onRecvCloseSession (seq, sessionId, data)\n                });\n                this.signal.registerPushCallback (\"MediaDescPush\", this.sessionId, (seq: number, sessionId: number, data: any) => {\n                        this.onRecvMediaDescription (seq, sessionId, data)\n                });\n                // this.signal.registerPushCallback(\"WebSocketDisconnect\", this.sessionId, onDisconnect, this);\n                this.signal.registerPushCallback (\"SessionResetPush\", this.sessionId, (seq: number, sessionId: number, data: any) => {\n                        this.onRecvResetSession (seq, sessionId, data)\n                });\n                \n                this.logger.debug (\"zp.ops.0 call success\");\n        }\n        \n        \n        //////////////////////////////////////////////////////////////////////////////////////////////\n        // create offer result\n        /*\n         *    \"zp.oco.0\": \"ZegoPublish.onCreateOfferSuccess\"\n         */\n        onCreateOfferSuccess (desc: { sdp: any }) {\n                //this.logger.debug(\"zp.oco.0 success. before desc: \" + desc.sdp);\n                \n                //change bandwidth\n                if (this.videoInfo.bitRate != 0) desc.sdp = this.updateBandwidthRestriction (desc.sdp, this.videoInfo.bitRate);\n                \n                this.logger.debug (\"zp.oco.0 localSdp \" , desc.sdp);\n                \n                this.dataReport.eventStart (this.reportSeq, \"SetLocalDescription\");\n                this.peerConnection.setLocalDescription (desc).then (\n                            () => {\n                                    this.dataReport.eventEnd (this.reportSeq, \"SetLocalDescription\");\n                                    \n                                    this.onSetLocalDescriptionSuccess (desc);\n                            },\n                            (error) => {\n                                    this.dataReport.eventEndWithMsg (this.reportSeq, \"SetLocalDescription\", {\n                                            error: error.toString ()\n                                    });\n                                    \n                                    this.logger.error (\"zp.oco.0 error \" + error.toString ());\n                                    this.publishStateUpdateError (publishErrorList.SET_LOCAL_DESC_ERROR);\n                            }\n                );\n        }\n        \n        \n        updateBandwidthRestriction (sdp, bandwidth) {\n                let modifier = 'AS';\n                if (adapter.browserDetails.browser === 'firefox') {\n                        bandwidth = (bandwidth >>> 0) * 1000;\n                        modifier = 'TIAS';\n                }\n                if (sdp.indexOf ('b=' + modifier + ':') === -1) {\n                        // insert b= after c= line.\n                        sdp = sdp.replace (/c=IN (.*)\\r\\n/,\n                                    'c=IN $1\\r\\nb=' + modifier + ':' + bandwidth + '\\r\\n');\n                }\n                else {\n                        sdp = sdp.replace (new RegExp ('b=' + modifier + ':.*\\r\\n'),\n                                    'b=' + modifier + ':' + bandwidth + '\\r\\n');\n                }\n                \n                return sdp;\n        }\n        \n        //////////////////////////////////////////////////////////////////////////////////////////////\n        // setLocalDescription result\n        /*\n         *    \"zp.osd.0\": \"ZegoPublish.onSetLocalDescriptionSuccess\"\n         */\n        onSetLocalDescriptionSuccess (desc) {\n                this.logger.debug (\"zp.osd.0 success\");\n                \n                //send offer to other peer\n                let mediaDescription = {\n                        sdp: desc.sdp,\n                        width: this.videoInfo.width,\n                        height: this.videoInfo.height,\n                        frameRate: this.videoInfo.frameRate,\n                        video_min_kpbs: this.videoInfo.bitRate,\n                        video_max_kpbs: this.videoInfo.bitRate,\n                        audio_kpbs: 48\n                };\n                \n                this.offerSeq = getSeq ();\n                this.dataReport.eventStart (this.reportSeq, \"SendMediaDesc\");\n                this.signal.sendMediaDesc (this.offerSeq, this.sessionId, 0, mediaDescription, (seq, sessionId, data) => {\n                        if (this.offerSeq != seq || this.sessionId != sessionId) {\n                                this.logger.error (\"zp.osd.0 seq or sessionId is not equal\");\n                                return;\n                        }\n                        \n                        this.logger.debug (\"zp.osd.0 send success\");\n                        this.dataReport.eventEnd (this.reportSeq, \"SendMediaDesc\");\n                        \n                        //set timer for waiting\n                        this.waitingAnswerTimer = setTimeout (() => {\n                                if (this.state == ENUM_PUBLISH_STATE.waitingServerAnswer) {\n                                        this.logger.error (\"zp.osd.0 waiting timeout\");\n                                        this.publishStateUpdateError (publishErrorList.SERVER_MEDIA_DESC_TIMEOUT);\n                                }\n                        }, this.waitingAnswerTimeInterval);\n                        \n                        this.state = ENUM_PUBLISH_STATE.waitingServerAnswer;\n                        \n                }, (err, seq) => {\n                        this.dataReport.eventEndWithMsg (this.reportSeq, \"SendMediaDesc\", {\n                                error: err\n                        });\n                        \n                        this.publishStateUpdateError (publishErrorList.SEND_MEDIA_DESC_TIMEOUT);\n                });\n                \n                this.state = ENUM_PUBLISH_STATE.waitingOffserRsp;\n                this.logger.debug (\"zp.osd.0 call success\");\n        }\n        \n        /*\n         *    \"zp.sp.0.1\": \"ZegoPublish.stopPublish\"\n         */\n        stopPublish () {\n                this.logger.debug (\"zp.sp.0.1 called\");\n                \n                //close session\n                if (this.sessionId && !this.closeSessionSignal) {\n                        this.signal.sendCloseSession(getSeq(), this.sessionId, 0);\n                }\n                \n                this.dataReport.eventEndWithMsg (this.reportSeq, \"PublishState\", {\n                        \"state\": this.state + ''\n                });\n                \n                this.dataReport.addEvent (this.reportSeq, \"StopPublish\");\n                \n                this.dataReport.addMsgExt (this.reportSeq, {\n                        \"stream\": this.streamId,\n                        \"sessionId\": this.sessionId\n                });\n                \n                this.dataReport.uploadReport (this.reportSeq, \"RTCPublishStream\");\n                \n                this.resetPublish ();\n        };\n        \n        \n        onPublishStateUpdate (type, streamId, error?) {\n        };\n        \n        onPublishQualityUpdate (streamId, quality) {\n        };\n        \n        /*\n         *    \"zp.od.0\": \"ZegoPublish.onDisconnect\"\n         */\n        onDisconnect () {\n                this.logger.info (\"zp.od.0 call\");\n                \n                // if (this.sessionId !== sessionId) {\n                //     this.logger.info(\"zp.od.0 session is not same\");\n                //     return;\n                // }\n                \n                this.logger.info (\"zp.od.0 websocket disconnect\");\n                this.dataReport.addEvent (this.reportSeq, \"OnDisconnect\");\n                \n                this.publishStateUpdateError (publishErrorList.WEBSOCKET_ERROR);\n        };\n        \n        //////////////////////////////////////////////////////////////////////////////////////////////\n        // send candidate Info\n        /*\n         *    \"zp.sci.0\": \"ZegoPublish.sendCandidateInfo\"\n         */\n        sendCandidateInfo (candidateInfo: any[]) {\n                this.logger.debug (\"zp.sci.0 called\");\n                candidateInfo = candidateInfo.filter (function (item) {\n                        if (item.candidate.indexOf ('relay') > 0) {\n                                return true;\n                        }\n                        return false;\n                });\n                \n                if (!candidateInfo || candidateInfo.length < 1) {\n                        this.logger.info (\"zp.sci.0 cancelled\");\n                        return;\n                }\n                \n                this.dataReport.eventStart (this.reportSeq, \"SendIceCandidate\");\n                this.signal.sendCandidateInfo (getSeq (), this.sessionId, candidateInfo, (seq, sessionId, data) => {\n                        this.logger.debug (\"zp.sci.0 send success\");\n                        this.dataReport.eventEnd (this.reportSeq, \"SendIceCandidate\");\n                }, (err, seq) => {\n                        this.logger.error (\"zp.sci.0 failed to send: \" + err.toString ());\n                        \n                        this.dataReport.eventEndWithMsg (this.reportSeq, \"SendIceCandidate\", {\n                                error: err\n                        });\n                        \n                        this.publishStateUpdateError (publishErrorList.SEND_CANDIDATE_TIMEOUT);\n                });\n        }\n        \n        \n        /*\n        *    \"zp.oics.0\": \"ZegoPublish.onIceConnectionStateChange\"\n        */\n        onIceConnectionStateChange (event: any) {\n                \n                if (this.state == ENUM_PUBLISH_STATE.stop || this.peerConnection == null) {\n                        return;\n                }\n                \n                this.logger.info (\"zp.oics.0 stateChanged \" + this.peerConnection.iceConnectionState);\n                \n                if (this.peerConnection.iceConnectionState === \"connected\") {\n                        \n                        this.logger.info (\"zp.oics.0 connected state \" + this.state);\n                        \n                        this.dataReport.eventEnd (this.reportSeq, \"IceConnected\");\n                        \n                        if (this.state != ENUM_PUBLISH_STATE.publishing) {\n                                this.onPublishStateUpdate (ENUM_PUBLISH_STATE_UPDATE.start, this.streamId);\n                        }\n                        \n                        this.state = ENUM_PUBLISH_STATE.publishing;\n                        if (this.retryState != ENUM_RETRY_STATE.didNotStart) {\n                                this.retryState = ENUM_RETRY_STATE.finished;\n                                this.currentRetryCount = 0;\n                        }\n                        \n                        //publish started\n                        this.dataReport.eventStart (this.reportSeq, \"PublishState\");\n                        \n                        //start quality timeInterval\n                        this.setPublishQualityTimer ();\n                }\n                else if (this.peerConnection.iceConnectionState === \"closed\") {\n                        \n                        this.dataReport.addEvent (this.reportSeq, \"IceClosed\");\n                        \n                        this.checkPublishConnectionFailedState (this.peerConnection.iceConnectionState);\n                        \n                }\n                else if (this.peerConnection.iceConnectionState === \"failed\") {\n                        this.dataReport.addEvent (this.reportSeq, \"IceFailed\");\n                        \n                        this.checkPublishConnectionFailedState (this.peerConnection.iceConnectionState);\n                }\n        }\n        \n        \n        //////////////////////////////////////////////////////////////////////////////////////////////\n        // onIceCandidate callback\n        /*\n         *    \"zp.oic.0\": \"ZegoPublish.onIceCandidate\"\n         */\n        onIceCandidate (event: any) {\n                \n                if (!event.candidate) {\n                        return;\n                }\n                \n                this.logger.info (\"zp.oic.0 candidate\" + event.candidate.candidate);\n        \n                if (this.state < ENUM_PUBLISH_STATE.waitingServerICE || this.state == ENUM_PUBLISH_STATE.stop) {\n                        //save candidate Info\n                        \n                        this.candidateInfo.push ({\n                                candidate: event.candidate.candidate,\n                                sdpMid: event.candidate.sdpMid,\n                                sdpMLineIndex: event.candidate.sdpMLineIndex\n                        });\n                } else {\n                        let candidate = {\n                                candidate: event.candidate.candidate,\n                                sdpMid: event.candidate.sdpMid,\n                                sdpMLineIndex: event.candidate.sdpMLineIndex\n                        };\n                        \n                        this.sendCandidateInfo ([candidate]);\n                }\n        }\n        \n        //////////////////////////////////////////////////////////////////////////////////////////////\n        // onIceStateChange callback\n        /*\n         *    \"zp.ocs.0\": \"ZegoPublish.onConnectionStateChange\"\n         */\n        onConnectionStateChange (event) {\n                this.logger.info (\"zp.ocs.0 called \"+event.target.signalingState);\n        }\n        \n        \n        //////////////////////////////////////////////////////////////////////////////////////////////\n        // server push SDP (setRemoteDesription)\n        /*\n         *    \"zp.ormd.0\": \"ZegoPublish.onRecvMediaDescription\"\n         */\n        onRecvMediaDescription (seq: number, sessionId: number, data: any) {\n                this.logger.debug (\"zp.ormd.0 received\");\n                if (this.state != ENUM_PUBLISH_STATE.waitingServerAnswer) {\n                        this.logger.info (\"zp.ormd.0 current state \" + this.state + \" not allowed\");\n                        return;\n                }\n                \n                //clear timer\n                if (this.waitingAnswerTimer != null) {\n                        clearTimeout (this.waitingAnswerTimer);\n                        this.waitingAnswerTimer = null;\n                }\n                \n                this.dataReport.addEvent (this.reportSeq, \"RecvMediaDesc\");\n                \n                this.signal.sendMediaDescAck (seq, this.sessionId, 0);\n                \n                //not answer\n                if (data.type == 1) {\n                        this.onGetRemoteOfferSucceses (data.sdp);\n                } else {\n                        //server send error\n                        this.publishStateUpdateError (publishErrorList.SERVER_MEDIA_DESC_ERROR);\n                }\n        }\n        \n        //////////////////////////////////////////////////////////////////////////////////////////////\n        // server push offer (setRemoteDescription)\n        /*\n         *    \"zp.oro.0\": \"ZegoPublish.onGetRemoteOfferSucceses\"\n         */\n        onGetRemoteOfferSucceses (desc: RTCSdpType) {\n                this.logger.debug (\"zp.oro.0 remoteSdp:\",desc);\n                \n                let answerDescription: RTCSessionDescription = {\n                        type: \"answer\",\n                        sdp: desc,\n                        toJSON: () => {\n                        }\n                };\n                \n                this.dataReport.eventStart (this.reportSeq, \"SetRemoteDescription\");\n                \n                this.peerConnection.setRemoteDescription (new RTCSessionDescription (answerDescription)).then (() => {\n                        this.logger.debug (\"zp.oro.0 set success\");\n                        this.dataReport.eventEnd (this.reportSeq, \"SetRemoteDescription\");\n                }, (error) => {\n                        this.logger.error (\"zp.oro.0 failed: \" + error.toString ());\n                        this.dataReport.eventEndWithMsg (this.reportSeq, \"SetRemoteDescription\", {\n                                error: error.toString ()\n                        });\n                        \n                        this.publishStateUpdateError (publishErrorList.SET_REMOTE_DESC_ERROR);\n                });\n                \n                this.sendCandidateInfo (this.candidateInfo);\n                this.candidateInfo = [];\n                \n                this.state = ENUM_PUBLISH_STATE.waitingServerICE;\n                \n                //setTimer\n                this.waitingICETimer = setTimeout (() => {\n                        if (this.state == ENUM_PUBLISH_STATE.waitingServerICE) {\n                                this.logger.error (\"zp.orod.0 waiting server timeout\");\n                                this.publishStateUpdateError (publishErrorList.SERVER_CANDIDATE_TIMEOUT);\n                        }\n                }, this.waitingICETimeInterval);\n                \n                this.logger.debug (\"zp.oro.0 call success\");\n        }\n        \n        \n        //////////////////////////////////////////////////////////////////////////////////////////////\n        // server push ICE (addICECandidate)\n        /*\n         *    \"zp.oci.0\": \"ZegoPublish.onRecvCandidateInfo\"\n         */\n        onRecvCandidateInfo (seq: number, sessionId: number, data: any) {\n                this.logger.debug (\"zp.oci.0 received \" + data.infos.length);\n                if (this.state != ENUM_PUBLISH_STATE.waitingServerICE) {\n                        this.logger.info (\"zp.oci.0 current state \" + this.state + \" not allowed\");\n                        return;\n                }\n                \n                if (this.waitingICETimer != null) {\n                        clearTimeout (this.waitingICETimer);\n                        this.waitingICETimer = null;\n                }\n                \n                this.dataReport.addEvent (this.reportSeq, \"RecvIceCandidate\");\n                \n                this.signal.sendCandidateInfoAck (seq, this.sessionId, 0);\n                \n                for (let i = 0; i < data.infos.length; i++) {\n                        let ice = {\n                                sdpMid: data.infos[i].sdpMid,\n                                sdpMLineIndex: data.infos[i].sdpMLineIndex,\n                                candidate: data.infos[i].candidate\n                        };\n                        \n                        this.logger.debug (\"zp.orci.0 candidate \" + ice.candidate);\n                        \n                        this.peerConnection.addIceCandidate (new RTCIceCandidate (ice)).then (() => {\n                                this.logger.debug (\"zp.oci.0 add success\");\n                        }, (error) => {\n                                this.logger.error (\"zp.oci.0 add error \" + error.toString ());\n                                this.publishStateUpdateError (publishErrorList.SERVER_CANDIDATE_ERROR);\n                        });\n                }\n                \n                this.state = ENUM_PUBLISH_STATE.connecting;\n                \n                this.dataReport.eventStart (this.reportSeq, \"IceConnected\");\n        }\n        \n        \n        //////////////////////////////////////////////////////////////////////////////////////////////\n        // server push closeSession\n        /*\n         *    \"zp.orcs.0\": \"ZegoPublish.onRecvCloseSession\"\n         */\n        onRecvCloseSession (seq: number, sessionId: number, data: any) {\n                this.logger.info (\"zp.orcs.0 reason: \" + data.reason);\n                \n                this.dataReport.addEvent (this.reportSeq, \"RecvCloseSession\");\n                \n                this.signal.sendCloseSessionAck (seq, this.sessionId, 0);\n                \n                let error = JSON.parse(JSON.stringify(publishErrorList.SESSION_CLOSED));\n                error.msg += data.reason;\n                this.publishStateUpdateError (error);\n        }\n        \n        //////////////////////////////////////////////////////////////////////////////////////////////\n        // server push resetSession\n        /*\n         *    \"zp.orrs.0\": \"ZegoPublish.onRecvResetSession\"\n         */\n        onRecvResetSession (seq: number, sessionId: number, data: any) {\n                this.logger.info (\"zp.orrs.0 received \");\n                \n                if (sessionId != this.sessionId) {\n                        this.logger.error (\"zp.orrs.0 cannot find session\");\n                        return;\n                }\n                \n                this.dataReport.addEvent (this.reportSeq, \"RecvResetSession\");\n                \n                //check should retry\n                if (this.shouldRetryPublish ()) {\n                        this.startRetryPublish ();\n                }\n        }\n        \n        //////////////////////////////////////////////////////////////////////////////////////////////\n        // retry publish\n        /*\n         *    \"zp.srp.0.0\": \"ZegoPublish.shouldRetryPublish\"\n         */\n        shouldRetryPublish () {\n                if (this.retryState == ENUM_RETRY_STATE.didNotStart && this.state != ENUM_PUBLISH_STATE.publishing) {\n                        this.logger.info (\"zp.srp.0.0 connection didn't success\");\n                        return false;\n                }\n                \n                if (this.retryState == ENUM_RETRY_STATE.retrying) {\n                        this.logger.info (\"zp.srp.0.0 already retrying\");\n                        return false;\n                }\n                \n                if (this.currentRetryCount > this.maxRetryCount) {\n                        this.logger.info (\"zp.srp.0.0 beyond max\");\n                        return false;\n                }\n                \n                this.logger.debug (\"zp.srp.1.0 call success\");\n                return true;\n        }\n        \n        /*\n         *    \"zp.srp.0\": \"ZegoPublish.startRetryPublish\"\n         */\n        startRetryPublish () {\n                this.logger.debug (\"zp.srp.0 call\");\n                \n                let streamId = this.streamId;\n                if (!streamId) {\n                        this.logger.info (\"zp.srp.0 no streamid\");\n                        return;\n                }\n                \n                this.resetPublish ();\n                \n                this.tryStartPublish (streamId);\n        }\n        \n        /*\n         *    \"zp.tsp.0\": \"ZegoPublish.tryStartPublish\"\n         */\n        tryStartPublish ( streamId) {\n                \n                this.logger.debug (\"zp.tsp.0 call\");\n                \n                this.clearTryPublishTimer ();\n                \n                this.streamId = streamId;\n                if (this.currentRetryCount > this.maxRetryCount) {\n                        this.logger.info (\"zp.tsp.0 beyond max limit\");\n                        //callback error\n                        this.publishStateUpdateError (publishErrorList.WEBSOCKET_ERROR);\n                        return;\n                }\n                \n                this.retryState = ENUM_RETRY_STATE.retrying;\n                this.currentRetryCount += 1;\n                \n                if (this.signal.isServerConnected ()) {\n                        this.logger.debug (\"zp.tsp.0 signal connected\");\n                        \n                        this.startPublish (streamId,this.localStream,this.videoInfo);\n                }\n                else {\n                        //setTimer\n                        this.logger.debug (\"zp.tsp.0 signal server not connected\");\n                        \n                        this.waitingAnswerTimer = setTimeout (() => {\n                                this.tryStartPublish (streamId);\n                        }, this.waitingAnswerTimeInterval);\n                }\n        }\n        \n        \n        checkPublishConnectionFailedState (connectionState) {\n                let state = null;\n                if (connectionState == \"failed\") {\n                        state = publishErrorList.MEDIA_CONNECTION_FAILED;\n                }\n                else if (connectionState == \"closed\") {\n                        state = publishErrorList.MEDIA_CONNECTION_CLOSED;\n                }\n                \n                if (state == null) {\n                        return;\n                }\n                \n                if (this.state != ENUM_PUBLISH_STATE.publishing && this.retryState == ENUM_PUBLISH_STATE.didNotStart) {\n                        this.logger.info (\"zp.oics.0  state \" + this.state + \" retryState \" + this.retryState + \" connectionState \" + connectionState);\n                        \n                        this.publishStateUpdateError (state);\n                }\n                else {\n                        if (this.shouldRetryPublish ()) {\n                                this.onPublishStateUpdate (ENUM_PUBLISH_STATE_UPDATE.retry, this.streamId);\n                                this.startRetryPublish ();\n                        }\n                        else {\n                                this.publishStateUpdateError (state);\n                        }\n                }\n        }\n        \n        //////////////////////////////////////////////////////////////////////////////////////////////\n        // quality timer\n        /*\n         *    \"zp.spq.0\": \"ZegoPublish.setPublishQualityTimer\"\n         */\n        setPublishQualityTimer () {\n                if (this.qualityTimer != null) {\n                        return;\n                }\n                \n                this.logger.debug (\"zp.spq.0 called\");\n                \n                this.clearPublishQualityTimer ();\n                \n                this.qualityTimer = setInterval (() => {\n                        \n                        if (this.peerConnection) {\n                                this.peerConnection.getStats (null).then ((results) => {\n                                        this.getPublishStats (results);\n                                }, (error) => {\n                                        this.logger.info (\"zp.spq.0 getStats error \" + error.toString ());\n                                });\n                        }\n                        \n                }, this.qualityTimeInterval);\n                \n                this.lastPublishStats = {\n                        time: 0,\n                        audioBytesSent: 0,\n                        videoBytesSent: 0,\n                        framesEncoded: 0,\n                        framesSent: 0\n                };\n                \n                this.qualitySeq = getSeq();\n                this.qualityCount = 0;\n                this.dataReport.newReport (this.qualitySeq);\n        }\n        \n        /*\n         *    \"zp.gps.0\": \"ZegoPublish.getPublishStats\"\n         */\n        getPublishStats (results) {\n                if (!results) {\n                        return;\n                }\n                \n                let publishData = {\n                        audioBitrate: 0,\n                        videoBitrate: 0,\n                        videoFPS: 0,\n                        nackCount: 0,\n                        pliCount: 0,\n                        sliCount: 0,\n                        frameHeight: 0,\n                        frameWidth: 0,\n                        videoTransferFPS: 0,\n                        totalRoundTripTime: 0,\n                        currentRoundTripTime: 0\n                };\n                let time = this.lastPublishStats.time;\n                results.forEach ((result) => {\n                        if ((result.type == \"outbound-rtp\" || (result.type == \"ssrc\" && result.bytesSent != undefined)) && result.mediaType == \"audio\") {\n                                //audio\n                                if (time != 0) {\n                                        publishData.audioBitrate = 8 * (result.bytesSent - this.lastPublishStats.audioBytesSent) / (result.timestamp - time);\n                                }\n                                \n                                if (publishData.audioBitrate < 0) {\n                                        publishData.audioBitrate = 0;\n                                }\n                                \n                                this.lastPublishStats.audioBytesSent = result.bytesSent;\n                                this.lastPublishStats.time = result.timestamp;\n                        }\n                        else if ((result.type == \"outbound-rtp\" || (result.type == \"ssrc\" && result.bytesSent != undefined)) && result.mediaType == \"video\") {\n                                //video\n                                if (time != 0) {\n                                        publishData.videoBitrate = 8 * (result.bytesSent - this.lastPublishStats.videoBytesSent) / (result.timestamp - time);\n                                        publishData.videoFPS = 1000 * (result.framesEncoded - this.lastPublishStats.framesEncoded) / (result.timestamp - time);\n                                }\n                                \n                                if (publishData.videoBitrate < 0) {\n                                        publishData.videoBitrate = 0;\n                                }\n                                if (publishData.videoFPS < 0) {\n                                        publishData.videoFPS = 0;\n                                }\n                                \n                                publishData.nackCount = result.nackCount;\n                                publishData.pliCount = result.pliCount;\n                                publishData.sliCount = result.sliCount;\n                                \n                                this.lastPublishStats.videoBytesSent = result.bytesSent;\n                                this.lastPublishStats.framesEncoded = result.framesEncoded;\n                                this.lastPublishStats.time = result.timestamp;\n                        }\n                        //safari don't have this type\n                        else if (result.type == \"track\" && (result.kind == \"video\" || result.id.indexOf (\"video\") >= 0)) {\n                                publishData.frameHeight = result.frameHeight;\n                                publishData.frameWidth = result.frameWidth;\n                                \n                                if (time != 0) {\n                                        publishData.videoTransferFPS = 1000 * (result.framesSent - this.lastPublishStats.framesSent) / (result.timestamp - time);\n                                }\n                                \n                                if (publishData.videoTransferFPS < 0) {\n                                        publishData.videoTransferFPS = 0;\n                                }\n                                \n                                this.lastPublishStats.framesSent = result.framesSent;\n                        }\n                        else if (result.type == \"candidate-pair\") {\n                                if (result.totalRoundTripTime != undefined) {\n                                        publishData.totalRoundTripTime = result.totalRoundTripTime;\n                                }\n                                \n                                if (result.currentRoundTripTime != undefined) {\n                                        publishData.currentRoundTripTime = result.currentRoundTripTime;\n                                }\n                        }\n                });\n                \n                // this.logger.debug(\"zp.gps.0 audio: \" + publishData.audioBitrate + \" video: \" + publishData.videoBitrate +\n                //  \" FPS: \" + publishData.videoFPS + \" transfer: \" + publishData.videoTransferFPS);\n                \n                // this.dataReport.addEvent(this.qualitySeq, \"PublishQuality\", publishData);\n                // this.qualityCount += 1;\n                // if (this.qualityCount > this.maxQualityListCount) {\n                //     this.dataReport.uploadReport(this.qualitySeq, \"RTCPublishQuality\");\n                //     this.qualityCount = 0;\n                //     this.qualitySeq = getSeq();\n                //     this.dataReport.newReport(this.qualitySeq);\n                // }\n                \n                //upload quality\n                this.uploadPublishQuality (publishData);\n                \n                if (time != 0) {\n                        this.onPublishQualityUpdate (this.streamId, publishData);\n                }\n        }\n        \n        \n        /*\n         *    \"zp.upq.0\": \"ZegoPublish.uploadPublishQuality\"\n         */\n        uploadPublishQuality (publishData) {\n                if (!this.qualityUpload) {\n                        return;\n                }\n                \n                let timeStamp = Date.parse (new Date () + '');\n                if (this.qualityUploadLastTime == 0 || timeStamp - this.qualityUploadLastTime >= this.qualityUploadInterval) {\n                        this.logger.debug (\"zp.upq.0 upload\");\n                        \n                        publishData[\"stream_type\"] = \"publish\";\n                        publishData[\"stream_id\"] = this.streamId;\n                        publishData[\"timeStamp\"] = timeStamp / 1000;\n                        \n                        this.signal.QualityReport (getSeq(), this.sessionId, publishData, (seq, sessionId, data) => {\n                                if (data.report !== undefined) {\n                                        this.qualityUpload = data.report;\n                                        this.qualityUploadInterval = data.report_interval_ms;\n                                }\n                        }, (err, seq) => {\n                                this.logger.info (\"zp.upq.0 upload failed \" + err);\n                        });\n                        \n                        this.qualityUploadLastTime = timeStamp;\n                }\n        }\n        \n        \n}\n","import {ENUM_RESOLUTION_TYPE, MediaStreamConstraints} from \"../common/zego.entity\";\nimport {Logger} from \"../common/zego.logger\";\n\nexport class ZegoPreview {\n        logger: Logger;\n        \n        localVideo = null;\n        localStream: MediaStream = null;\n        videoInfo = {};\n        \n        previewSuc = false;\n        \n        constructor (private log: Logger) {\n                this.logger = log;\n        }\n        \n        \n       \n        \n        /*\n         *    \"zp.gmsc.2\": \"getMediaStreamConstraints\"\n         */\n        \n        getMediaStreamConstraints (mediaStreamConfig: MediaStreamConstraints) {\n                \n                let mediaStreamConstraints = {\n                        audio: null,\n                        video: null\n                };\n                mediaStreamConstraints['audio'] = false;\n                mediaStreamConstraints['video'] = false;\n                \n                //audio\n                if (mediaStreamConfig.audio) {\n                        if (mediaStreamConfig.audioInput) {\n                                mediaStreamConstraints.audio = {\n                                        deviceId: {\n                                                exact: mediaStreamConfig.audioInput\n                                        }\n                                };\n                        }\n                        else {\n                                mediaStreamConstraints.audio = true;\n                        }\n                }\n                \n                //video\n                if (mediaStreamConfig.video) {\n                        let width = 640;\n                        let height = 480;\n                        let frameRate = 15;\n                        let bitRate = 800;\n                        \n                        //videoQuality\n                        //1 QVGA\n                        if (mediaStreamConfig.videoQuality === 1) {\n                                width = ENUM_RESOLUTION_TYPE.LOW.width;\n                                height = ENUM_RESOLUTION_TYPE.LOW.height;\n                                frameRate = ENUM_RESOLUTION_TYPE.LOW.frameRate;\n                                bitRate = ENUM_RESOLUTION_TYPE.LOW.bitRate;\n                        }\n                        //2 VGA\n                        else if (mediaStreamConfig.videoQuality === 2) {\n                                width = ENUM_RESOLUTION_TYPE.MEDIUM.width;\n                                height = ENUM_RESOLUTION_TYPE.MEDIUM.height;\n                                frameRate = ENUM_RESOLUTION_TYPE.MEDIUM.frameRate;\n                                bitRate = ENUM_RESOLUTION_TYPE.MEDIUM.bitRate;\n                        }\n                        //3 HD\n                        else if (mediaStreamConfig.videoQuality === 3) {\n                                width = ENUM_RESOLUTION_TYPE.HIGH.width;\n                                height = ENUM_RESOLUTION_TYPE.HIGH.height;\n                                frameRate = ENUM_RESOLUTION_TYPE.HIGH.frameRate;\n                                bitRate = ENUM_RESOLUTION_TYPE.HIGH.bitRate;\n                        }\n                        //custom\n                        else if (mediaStreamConfig.videoQuality === 4) {\n                                width = mediaStreamConfig.width;\n                                height = mediaStreamConfig.height;\n                                frameRate = mediaStreamConfig.frameRate;\n                                bitRate = mediaStreamConfig.bitRate||800;\n                        }\n                        else {\n                                this.logger.info (\"zp.gmsc.2 user default\");\n                        }\n                        \n                        //horizontal\n                        if (mediaStreamConfig.horizontal === true) {\n                                let temp = height;\n                                height = width;\n                                width = temp;\n                        }\n                        \n                        mediaStreamConstraints.video = {\n                                width: width,\n                                height: height,\n                                frameRate: frameRate,\n                                bitRate: bitRate\n                        };\n                        \n                        //facingMode\n                        if (mediaStreamConfig.facingMode != undefined) {\n                                mediaStreamConstraints.video.facingMode = mediaStreamConfig.facingMode;\n                        }\n                        else if (mediaStreamConfig.videoInput != undefined) {\n                                mediaStreamConstraints.video.deviceId = {\n                                        exact: mediaStreamConfig.videoInput\n                                };\n                        }\n                        \n                        this.logger.info (\"zp.gmsc.2 width: \" + width + \" height: \" + height + \" rate: \" + frameRate);\n                }\n                \n                return mediaStreamConstraints;\n        }\n        \n        /*\n         *    \"zp.sv.2\": \"startPreview\"\n         */\n        \n        \n        startPreview (localVideo: HTMLElement, mediaStreamConfig: MediaStreamConstraints, successCallback: Function, errorCallback: Function) {\n                this.logger.debug (\"zp.sv.2 called\");\n                this.localVideo = localVideo;\n                \n                if (navigator.mediaDevices === undefined || navigator.mediaDevices.getUserMedia == undefined) {\n                        if (errorCallback) {\n                                errorCallback (\"browser don't support\");\n                        }\n                        return;\n                }\n                \n                \n                //external media stream\n                if (mediaStreamConfig.externalMediaStream instanceof MediaStream) {\n                        this.logger.debug (\"zp.sv.2 use external media stream\");\n                        \n                        this.localStream = mediaStreamConfig.externalMediaStream;\n                        \n                        this.videoInfo = {\n                                width: mediaStreamConfig.width,\n                                height: mediaStreamConfig.height,\n                                frameRate: mediaStreamConfig.frameRate,\n                                bitRate: mediaStreamConfig.bitRate\n                        };\n                        \n                        if (successCallback) {\n                                successCallback ();\n                        }\n                        \n                        return;\n                } else if (mediaStreamConfig.externalCapture) {\n                        const result = this.captureStream (localVideo);\n                        if (result) {\n                                if (successCallback) {\n                                        successCallback ();\n                                }\n                        } else {\n                                if (errorCallback) {\n                                        errorCallback (\"browser don't support\");\n                                }\n                        }\n                        \n                        return;\n                }\n                \n                const mediaStreamConstraints = this.getMediaStreamConstraints (mediaStreamConfig);\n                this.videoInfo = mediaStreamConstraints.video;\n                \n                \n                navigator.getUserMedia (mediaStreamConstraints, stream => {\n                        this.logger.info (\"zp.sv.2 success\");\n                        \n                        if (!this.localVideo) {\n                                this.logger.info (\"zp.sv.2 no localVideo\");\n                                if (errorCallback) {\n                                        errorCallback (\"no localVideo\");\n                                }\n                                return;\n                        }\n                        \n                        this.localVideo.srcObject = stream;\n                        this.localStream = stream;\n                        this.previewSuc = true;\n                        if (successCallback) {\n                                successCallback ();\n                        }\n                }, error => {\n                        this.logger.info (\"zp.sv.2 failed\");\n                        if (errorCallback) {\n                                errorCallback (error.name);\n                        }\n                });\n        };\n        \n        \n        /*\n         *    \"zp.cs.2\": \"captureStream\"\n         */\n        captureStream (localVideo: HTMLElement) {\n                if (!localVideo) {\n                        this.logger.info (\"zp.cs.2 no local video\");\n                        return false;\n                }\n                \n                if (localVideo['captureStream']) {\n                        this.localStream = localVideo['captureStream']();\n                        this.logger.debug (\"zp.cs.2 captureStream\");\n                }\n                else if (localVideo['mozCaptureStream']) {\n                        this.localStream = localVideo['mozCaptureStream'] ();\n                        this.logger.debug (\"zp.cs.2 mozCaptureStream\");\n                }\n                else {\n                        this.logger.info (\"zp.cs.2 don't support\");\n                        return false;\n                }\n                \n                this.videoInfo = {\n                        width: localVideo['videoWidth'],\n                        height: localVideo['videoHeight'],\n                        frameRate: 0,\n                        bitRate: 0\n                };\n                this.logger.debug (\"zp.cs.2 called success\");\n                return true;\n        }\n        \n        /*\n         *    \"zp.sv.2.1\": \"stopPreview\"\n         */\n        stopPreview () {\n                this.logger.info (\"zp.sv.2.1 called\");\n                \n                if (!this.localStream) {\n                        return;\n                }\n                \n                this.localStream.getTracks ().forEach (track => {\n                        track.stop ();\n                });\n                \n                this.localStream = null;\n                \n                this.localVideo.srcObject = null;\n                this.localVideo = null;\n                \n                this.videoInfo = {};\n        };\n        \n        /*\n         *    \"zp.em.2\": \"enableMicrophone\"\n         */\n        enableMicrophone = (enable: boolean) => {\n                if (!this.localStream) {\n                        this.logger.error (\"zp.em.2 no localStream\");\n                        return false;\n                }\n                \n                this.localStream.getAudioTracks ().forEach (\n                            (track) => {\n                                    track.enabled = enable;\n                            }\n                );\n                \n                this.logger.debug (\"zp.em.2 call success\");\n                return true;\n        };\n        \n        /*\n         *    \"zp.ec.2\": \"enableCamera\"\n         */\n        enableCamera = (enable: boolean) => {\n                if (!this.localStream) {\n                        this.logger.error (\"zp.ec.2 no localStream\");\n                        return false;\n                }\n                \n                this.localStream.getVideoTracks ().forEach (\n                            (track) => {\n                                    track.enabled = enable;\n                            }\n                );\n                \n                this.logger.debug (\"zp.ec.2 call success\");\n                return true;\n        };\n        \n        /*\n         *    \"zp.sad.2\": \"setAudioDestination\"\n         */\n        setAudioDestination = audioOutput => {\n                if (!this.localVideo) {\n                        this.logger.error (\"zp.sad.2 no localVideo\");\n                        return false;\n                }\n                \n                if (this.localVideo.sinkId !== 'undefined') {\n                        this.localVideo.setSinkId (audioOutput).then (() => {\n                                this.logger.info (\"zp.sad.2 success device: \" + audioOutput);\n                                // _this.audioOutput = audioOutput;\n                        }).catch (error => {\n                                this.logger.info (\"zp.sad.2 \" + error.name);\n                        });\n                        return true;\n                }\n                else {\n                        this.logger.error (\"zp.sad.2 browser does not suppport\");\n                        return false;\n                }\n        }\n        \n        \n}\n","\nimport {DataStatistics} from \"./zego.entity\";\nimport {Logger} from \"./zego.logger\";\n\nexport  class ZegoDataReport  {\n        logger:Logger;\n        dataStatistics:DataStatistics = {};\n\n        constructor(private log:Logger){\n                this.logger = log; \n        }\n\n\n        newReport(seq:number) {\n                this.dataStatistics[seq] = {\n                        abs_time: Date.now(),\n                        time_consumed: 0,\n                        error: 0,\n                        events: [],\n                };\n        };\n\n        addMsgExt(seq:number, msg_ext) {\n                if (!this.dataStatistics[seq]) {\n                        console.warn(`${seq} not exist`);\n                        return;\n                }\n\n                this.dataStatistics[seq].msg_ext = msg_ext;\n        };\n\n        /*\n         *    \"zd.es.0\": \"ZegoDataReport.eventStart\"\n         */\n        eventStart (seq, event_name) {\n                if (!this.dataStatistics[seq]) {\n                        this.logger.warn(\"zd.es.0 no seq match\");\n                        return;\n                }else if (this.dataStatistics[seq].events == undefined) {\n                        this.logger.warn(\"zd.es.0 no events\");\n                        return;\n                }\n\n                this.dataStatistics[seq].events.push({\n                        event: event_name,\n                        abs_time: Date.now(),\n                        time_consumed: 0\n                });\n        };\n\n        /*\n         *    \"zd.ee.0\": \"ZegoDataReport.eventStart\"\n         */\n        eventEnd (seq, event_name,extInfo?:any) {\n                if (!this.dataStatistics[seq]) {\n                        this.logger.info(\"zd.ee.0 no seq match\");\n                        return;\n                }\n\n                let events = this.dataStatistics[seq].events;\n                if (!events||events.length===0) {\n                        this.logger.info(\"zd.ee.0 no events\");\n                        return;\n                }\n\n                for (let i = events.length - 1; i >= 0; i--) {\n                        if (events[i].event == event_name && events[i].time_consumed) {\n                                events[i].time_consumed = Date.now() - events[i].abs_time;\n                                break;\n                        }\n                }\n        };\n\n        eventEndWithMsg (seq:number, event_name:string, msg_ext:{[index:string]:any}) {\n                if (!this.dataStatistics[seq]) {\n                        this.logger.warn(\"zd.ee.0 no seq match\");\n                        return;\n                }\n\n                let events = this.dataStatistics[seq].events;\n                if (!events) {\n                        this.logger.warn(\"zd.ee.0 no events\");\n                        return;\n                }\n\n                for (let i = events.length - 1; i >= 0; i--) {\n                        if (events[i].event == event_name && events[i].time_consumed ) {\n                                events[i].time_consumed = Date.now() - events[i].abs_time;\n\n                                if (events[i].msg_ext == undefined) {\n                                        events[i].msg_ext = {};\n                                }\n                                events[i].msg_ext = {...msg_ext};\n                                break;\n                        }\n                }\n        };\n\n        /*\n         *    \"zd.aei.0\": \"ZegoDataReport.addEventInfo\"\n         */\n        addEventInfo (seq:number, event_name:string, key:string, value:string){\n                if (!this.dataStatistics[seq]) {\n                        this.logger.warn(\"zd.aei.0 no seq match\");\n                        return;\n                }\n\n                let events = this.dataStatistics[seq].events;\n                if (events == undefined) {\n                        this.logger.warn(\"zd.aei.0 no events\");\n                        return;\n                }\n\n                for (let i = events.length - 1; i >= 0; i--) {\n                        if (events[i].event == event_name && events[i].time_consumed != undefined) {\n                                if (events[i].event == event_name && events[i].time_consumed != undefined) {\n                                        if (events[i].msg_ext == undefined) {\n                                                events[i].msg_ext = {};\n                                        }\n\n                                        events[i].msg_ext[key] = value;\n                                        break;\n                                }\n                        }\n                }\n        };\n\n        /*\n         *    \"zd.ae.0\": \"ZegoDataReport.addEvent\"\n         */\n        addEvent (seq:number, event_name:string, msg_ext?:{[index:string]:string}) {\n                if (!this.dataStatistics[seq]) {\n                        this.logger.warn(\"zd.ae.0 no seq match\");\n                        return;\n                }\n\n                if (!this.dataStatistics[seq].events ) {\n                        return;\n                }\n\n                if (msg_ext) {\n                        this.dataStatistics[seq].events.push({\n                                event: event_name,\n                                abs_time: Date.now(),\n                                msg_ext: msg_ext\n                        });\n                }\n                else {\n                        this.dataStatistics[seq].events.push({\n                                event: event_name,\n                                abs_time: Date.now(),\n                        });\n                }\n        };\n\n        uploadReport(seq:number, itemType:string) {\n                var reportInfo = this.dataStatistics[seq];\n                if (reportInfo == undefined) {\n                        return;\n                }\n\n                reportInfo.itemtype = itemType;\n                reportInfo.time_consumed = Date.now() - reportInfo.abs_time;\n\n                this.logger.report(reportInfo);\n\n                delete this.dataStatistics[seq];\n        };\n}","import {ZegoDataReport} from \"../common/zego.datareport\";\nimport {ZegoPreview} from \"./zego.preview\";\nimport {ZegoPublish} from \"./zego.publish\";\nimport {\n        ENUM_PLAY_STATE_UPDATE,\n        ENUM_PUBLISH_STATE_UPDATE,\n        playErrorList,\n        publishErrorList\n} from \"../common/zego.extern\";\nimport {ENUM_SIGNAL_STATE, MediaStreamConstraints, PlayerInfo, PlayOption, SignalInfo} from \"../common/zego.entity\";\nimport {ZegoSignal} from \"../common/zego.signal\";\nimport {ZegoPlayWeb} from \"./zego.play.web\";\nimport {ZegoStreamCenter} from \"../common/ZegoStreamCenter\";\nimport {LoggerWeb} from \"./zego.logger.webrtc\";\n\nexport class ZegoStreamCenterWeb extends ZegoStreamCenter {\n        playerList: { [index: string]: PlayerInfo } = {};\n        publisherList = {};\n        \n        logger: LoggerWeb;\n        dataReport: ZegoDataReport;\n        \n        testEnvironment = false;\n        \n        //由streamcenter统一管理每个signal的心跳逻辑\n        heartbeatTimer = null;\n        heartbeatInterval = 10 * 1000;\n        \n        //质量回调时间间隔,默认3s\n        qualityTimerInterval = 3 * 1000;\n        \n        maxRetryCount = 5;\n        \n        previewVideoList: ZegoPreview[] = [];\n        \n        signalList: { [index: string]: SignalInfo } = {};\n        \n        \n        appid: number;\n        userid: string;\n        token: string;\n        \n        \n        constructor (log: LoggerWeb) {\n                super (log);\n                this.logger = log;\n                this.dataReport = new ZegoDataReport (this.logger);\n        }\n        \n        \n        onSignalDisconnected (server) {\n        };\n        \n        /*\n         *    \"zsc.qmc.0\": \"ZegoStreamCenter.setQualityMonitorCycle\"\n         */\n        setQualityMonitorCycle (timeInMs: number) {\n                this.logger.debug (\"zsc.qmc.0 timeInterval \" + timeInMs);\n                \n                this.qualityTimerInterval = timeInMs;\n        };\n        \n        /*\n         *    \"zsc.ssi.0\": \"ZegoStreamCenter.setSessionInfo\"\n         */\n        setSessionInfo (appid: number, userid: string, token: string, testEnvironment: boolean) {\n                this.logger.debug (\"zsc.ssi.0 called\");\n                \n                // this.signal.setSessionInfo(appid, userid, serverUrl);\n                this.appid = appid;\n                this.userid = userid;\n                this.token = token;\n                this.testEnvironment = testEnvironment;\n        };\n        \n        onPlayStateUpdate (type, streamid, error) {\n        };\n        \n        onPlayQualityUpdate (streamid, streamQuality) {\n        };\n        \n        onPublishStateUpdate (type, streamid, error) {\n        };\n        \n        onPublishQualityUpdate (streamid, streamQuality) {\n        };\n        \n        \n        /*\n         *    \"zsc.uhb.0\": \"ZegoStreamCenter.onUpdateHeartBeartIntervalHandle\"\n         */\n        onUpdateHeartBeartIntervalHandle (interval: number) {\n                if (interval != this.heartbeatInterval) {\n                        this.logger.debug (\"zsc.uhb.0 update \" + interval);\n                        \n                        if (this.heartbeatTimer) {\n                                clearTimeout (this.heartbeatTimer);\n                                this.heartbeatTimer = null;\n                        }\n                        \n                        this.heartbeatInterval = interval;\n                        \n                        this.startSignalHeartbeat ();\n                }\n        };\n        \n        \n        /*\n         *    \"zsc.em.0\": \"ZegoStreamCenter.enableMicrophone\"\n         */\n        enableMicrophone (localVideo: HTMLElement, enable: boolean) {\n                let preview = this.checkPreivew (localVideo);\n                if (!preview) {\n                        this.logger.info (\"zsc.em.0 no preview\");\n                        return false;\n                }\n                \n                return preview.enableMicrophone (enable);\n        };\n        \n        /*\n         *    \"zsc.ec.0\": \"ZegoStreamCenter.enableCamera\"\n         */\n        enableCamera (localVideo: HTMLElement, enable: boolean) {\n                let preview = this.checkPreivew (localVideo);\n                if (!preview) {\n                        this.logger.error (\"zsc.ec.0 no preview\");\n                        return false;\n                }\n                \n                return preview.enableCamera (enable);\n        };\n        \n        /*\n         *    \"zsc.sp.0\": \"ZegoStreamCenter.startPreview\"\n         */\n        startPreview (localVideo: HTMLElement, mediaStreamConstraints: MediaStreamConstraints, success: Function, error: Function): boolean {\n                if (!localVideo) {\n                        this.logger.error (\"zsc.sp.0 localVideo null\");\n                        return false;\n                }\n                \n                let preview = this.checkPreivew (localVideo);\n                \n                if (preview) {\n                        this.logger.warn (\"zsc.sp.0 localvideo alredy exist\");\n                        return true;\n                }\n                \n                preview = new ZegoPreview (this.logger);\n                this.previewVideoList.push (preview);\n                preview.startPreview (localVideo, mediaStreamConstraints, success, error);\n                \n                this.logger.debug (\"zsc.sp.0 call success\");\n                return true;\n        };\n        \n        /*\n         *    \"zsc.sp.1\": \"ZegoStreamCenter.stopPreview\"\n         */\n        stopPreview (localVideo: HTMLElement): boolean {\n                \n                if (!localVideo) {\n                        this.logger.warn (\"zsc.sp.0 localVideo null\");\n                        return false;\n                }\n                \n                for (let streamid in this.publisherList) {\n                        if (this.publisherList[streamid].localVideo === localVideo) {\n                                this.publisherList[streamid].localVideo = null;\n                        }\n                }\n                \n                let preview = this.checkPreivew (localVideo);\n                if (!preview) {\n                        this.logger.warn (\"zsc.sp.0 no preview\");\n                        return false;\n                }\n                if (preview.previewSuc) {\n                        preview.stopPreview ();\n                        this.removePreview (preview);\n                }\n                \n                \n                return true;\n        };\n        \n        /*\n         *    \"zsc.pss.0\": \"ZegoStreamCenter.setPublishStateStart\"\n         */\n        setPublishStateStart (streamid, localVideo) {\n                let totalStreamId = this.getTotalStreamId (streamid);\n                let publish = this.publisherList[totalStreamId];\n                if (publish) {\n                        this.logger.error (\"zsc.pss.0 publisher already exist\");\n                        return false;\n                }\n                \n                let publisher = new ZegoPublish (this.logger, null, this.dataReport, this.qualityTimerInterval);\n                publisher.onPublishStateUpdate = (type, _streamid, error) => {\n                        const publish = this.publisherList[_streamid];\n                        if (publish) {\n                                this.onPublishStateUpdate (type, publish.streamId, error);\n                        }\n                        else {\n                                this.logger.error (\"zsc.psuh.0 cannot find publish \" + streamid);\n                        }\n                        \n                };\n                publisher.onPublishQualityUpdate = (_streamid, streamQuality) => {\n                        const publish = this.publisherList[_streamid];\n                        if (publish) {\n                                this.onPublishQualityUpdate (publish.streamId, streamQuality)\n                        }\n                        else {\n                                this.logger.error (\"zsc.psuh.0 cannot find publish \" + streamid);\n                        }\n                        \n                };\n                \n                this.publisherList[totalStreamId] = {\n                        localVideo: localVideo,\n                        publisher: publisher,\n                        serverUrls: [],\n                        retryCount: 0,\n                        streamId: streamid,\n                };\n                \n                this.dataReport.eventStart (publisher.reportSeq, \"GetSignalUrl\");\n                \n                return true;\n        };\n        \n        /*\n       *    \"zsc.gts.0\": \"ZegoStreamCenter.getTotalStreamId\"\n       */\n        getTotalStreamId (streamid) {\n                if (this.testEnvironment) {\n                        var testStreamId = \"zegotest-\" + this.appid + \"-\" + streamid;\n                        this.logger.info (\"zsc.gts.0 test streamid \" + testStreamId);\n                        return testStreamId;\n                }\n                \n                return streamid;\n        }\n        \n        /*\n         *    \"zsc.sps.0\": \"ZegoStreamCenter.startPublishingStream\"\n         */\n        startPublishingStream (streamid: string, serverUrls: string[], preferPublishSourceType?: number) {\n                \n                this.logger.debug (\"zsc.sps.0 call\");\n                \n                let totalStreamid = this.getTotalStreamId (streamid);\n                let publish = this.publisherList[totalStreamid];\n                if (!publish) {\n                        this.logger.error (\"zsc.sps.0 publisher don't exist\");\n                        return false;\n                }\n                \n                let publisher = publish.publisher;\n                this.dataReport.eventEndWithMsg (publisher.reportSeq, \"GetSignalUrl\", {\n                        urls: serverUrls\n                });\n                \n                if (!serverUrls || serverUrls.length === 0) {\n                        this.onPublishStateUpdate (ENUM_PUBLISH_STATE_UPDATE.error, streamid, publishErrorList.DISPATCH_ERROR);\n                        \n                        this.logger.info (\"zsc.sps.0 server don't have signal url\");\n                        return false;\n                }\n                \n                let serverUrl = serverUrls[0];\n                publish.serverUrls = [...publish.serverUrls, ...serverUrls];\n                \n                return this.connectPublishServer (totalStreamid, serverUrl);\n        };\n        \n        \n        updateWaitingList (signalInfo: SignalInfo, isPublish: boolean, streamId: string, success: Function, error: Function) {\n                if (isPublish) {\n                        signalInfo.publishWaitingList.push ({\n                                streamId: streamId,\n                                success: success,\n                                error: error\n                        });\n                } else {\n                        signalInfo.playWaitingList.push ({\n                                streamId: streamId,\n                                success: success,\n                                error: error\n                        });\n                }\n        }\n        \n        \n        /*\n         *    \"zsc.ps.0\": \"ZegoStreamCenter.publishStream\"\n         */\n        publishStream (streamid) {\n                let publisher: ZegoPublish = this.publisherList[streamid].publisher;\n                if (!publisher) {\n                        this.logger.info (\"zsc.ps.0 publisher don't exist\");\n                        return;\n                }\n                \n                let localStream = null;\n                let videoInfo = null;\n                let preview = this.checkPreivew (this.publisherList[streamid].localVideo);\n                if (preview) {\n                        localStream = preview.localStream;\n                        videoInfo = preview.videoInfo;\n                }\n                \n                if (!localStream) {\n                        this.logger.info (\"zsc.ps.0 no localStream\");\n                }\n                \n                this.logger.debug (\"zsc.ps.0 call success\");\n                publisher.startPublish (streamid, localStream, videoInfo);\n        }\n        \n        connectPublishServer (streamId: string, serverUrl: string) {\n                \n                let publish = this.publisherList[streamId];\n                if (!publish) {\n                        this.logger.error (\"zsc.cps.0 publisher don't exist\");\n                        return false;\n                }\n                \n                this.dataReport.eventStart (publish.publisher.reportSeq, \"ConnectServer\");\n                \n                this.connetWithReuseSignalServer (streamId, true, serverUrl, (streamid: string, signalInfo: SignalInfo) => {\n                        \n                        //check streamid exist\n                        let checkPublish = this.publisherList[streamid];\n                        if (!checkPublish) {\n                                this.logger.info (\"zsc.cps.0 after connect publisher don't exist\");\n                                return;\n                        }\n                        \n                        let checkPublisher = checkPublish.publisher;\n                        if (!checkPublisher) {\n                                this.logger.info (\"zsc.cps.1 check publisher don't exist\");\n                                return;\n                        }\n                        \n                        this.dataReport.eventEndWithMsg (checkPublisher.reportSeq, \"ConnectServer\", {\n                                result: 0,\n                                server: serverUrl\n                        });\n                        \n                        let tokenInfo = signalInfo.tokenInfo;\n                        this.logger.info (\"zsc.cps.0 update token success\");\n                        \n                        if (tokenInfo && tokenInfo.report) {\n                                checkPublisher.qualityUpload = tokenInfo.report;\n                                checkPublisher.qualityUploadInterval = tokenInfo.report_interval;\n                        }\n                        \n                        checkPublisher.signal = signalInfo.signal;\n                        \n                        checkPublish.retryCount = 0;\n                        this.publishStream (streamid);\n                        \n                        this.getTokenSuccess ();\n                        \n                }, (streamid, result) => {\n                        this.logger.error (\"zsc.cps.0 update token failed \" + result);\n                        \n                        //check streamid exist\n                        let checkPublish = this.publisherList[streamid];\n                        if (!checkPublish) {\n                                this.logger.info (\"zsc.cps.0 after connect publisher don't exist\");\n                                return;\n                        }\n                        \n                        if (this.shouldRetry (checkPublish, result)) {\n                                this.logger.info (\"zsc.cps.1 retry connect\");\n                                \n                                let retryServerUrl = checkPublish.serverUrls[0];\n                                checkPublish.serverUrls.splice (0, 1);\n                                \n                                checkPublish.retryCount += 1;\n                                this.connectPublishServer (streamid, retryServerUrl);\n                        }\n                        else {\n                                this.onPublishStateUpdate (ENUM_PUBLISH_STATE_UPDATE.error, streamid, publishErrorList.TOKEN_ERROR);\n                        }\n                });\n                \n                return true;\n        }\n        \n        shouldRetry (stream: { serverUrls: string[], retryCount: number }, errorCode: number) {\n                if (stream.serverUrls.length == 0) {\n                        return false;\n                }\n                \n                if (stream.retryCount >= this.maxRetryCount) {\n                        return false;\n                }\n                \n                if (errorCode != 3) {\n                        return false;\n                }\n                \n                return true;\n        }\n        \n        /*\n         *    \"zsc.gts.0\": \"ZegoStreamCenter.getTokenSuccess\"\n         */\n        getTokenSuccess () {\n                this.logger.debug (\"zsc.gts.0 call\");\n        }\n        \n        /*\n         *    \"zsc.sps.0.1\": \"ZegoStreamCenter.stopPublishingStream\"\n         */\n        stopPublishingStream (streamid: string) {\n                \n                let totalStreamId = this.getTotalStreamId (streamid);\n                let publish = this.publisherList[totalStreamId];\n                \n                if (!publish) {\n                        this.logger.warn (\"zsc.sps.0.1 publisher don't exist\");\n                        return;\n                }\n                \n                if (publish.publisher) {\n                        publish.publisher.stopPublish ();\n                        delete publish.publisher;\n                }\n                \n                //update signal\n                this.removeStreamFromSignal (true, totalStreamId);\n                this.stopSignalHeartbeat ();\n                \n                delete this.publisherList[totalStreamId];\n                \n                this.logger.debug (\"zsc.sps.0.1 call success\");\n        };\n        \n        \n        /*\n         *    \"zsc.psao.1\": \"ZegoStreamCenter.setPlayStreamAudioOutput\"\n         */\n        setPlayStreamAudioOutput (streamid: string, audioOutput: string) {\n                let totalStreamId = this.getTotalStreamId (streamid);\n                if (audioOutput != undefined && audioOutput.length != 0) {\n                        this.logger.debug (\"zsc.psao.1 device \" + audioOutput);\n                        let play = this.playerList[totalStreamId];\n                        if (!play) {\n                                this.logger.info (\"zsc.psao.1 play don't exist\");\n                                return false;\n                        }\n                        \n                        if (!play.player) {\n                                this.logger.info (\"zsc.psao.1 player don't exist\");\n                                return false;\n                        }\n                        \n                        return play.player.setAudioDestination (audioOutput);\n                }\n                \n                return false;\n        };\n        \n        /*\n         *    \"zsc.psao.0\": \"ZegoStreamCenter.setPublishStreamAudioOutput\"\n         */\n        setPublishStreamAudioOutput (localVideo: HTMLElement, audioOutput: string): boolean {\n                \n                if (audioOutput != undefined && audioOutput.length != 0 && localVideo) {\n                        this.logger.debug (\"zsc.psao.0 device \" + audioOutput);\n                        \n                        let preview = this.checkPreivew (localVideo);\n                        if (preview) {\n                                preview.setAudioDestination (audioOutput);\n                        }\n                        else {\n                                this.logger.info (\"zsc.psao.0 no preview\");\n                        }\n                }\n                \n                return false;\n        };\n        \n        \n        /*\n          *    \"zsc.crss.0\": \"ZegoStreamCenter.connetWithReuseSignalServer\"\n          */\n        connetWithReuseSignalServer (streamId: string, isPublish: boolean, serverUrl: string, success: Function, error: Function) {\n                this.logger.debug (\"zsc.crss.0 begin \" + serverUrl);\n                \n                let signalInfo = null;\n                if (this.signalList[serverUrl]) {\n                        signalInfo = this.signalList[serverUrl];\n                        //already connected\n                        if (signalInfo.state == ENUM_SIGNAL_STATE.connected) {\n                                this.logger.debug (\"zsc.crss.0 already connected \" + serverUrl + \" streamId: \" + streamId);\n                                \n                                if (isPublish) {\n                                        signalInfo.publishConnectedList.push (streamId);\n                                } else {\n                                        signalInfo.playConnectedList.push (streamId);\n                                }\n                                \n                                success (streamId, signalInfo);\n                        } else if (signalInfo.state == ENUM_SIGNAL_STATE.connecting) { //isConnecting\n                                this.logger.debug (\"zsc.crss.0 signal is connecting \" + serverUrl + \" streamId: \" + streamId);\n                                this.updateWaitingList (signalInfo, isPublish, streamId, success, error);\n                        }\n                } else {\n                        //no connect\n                        this.logger.debug (\"zsc.crss.0 new signal \" + serverUrl + \" streamId: \" + streamId);\n                        \n                        let signal = new ZegoSignal (this.logger);\n                        signal.setSessionInfo (this.appid, this.userid);\n                        signal.onUpdateHeartBeartInterval = this.onUpdateHeartBeartIntervalHandle;\n                        signal.onDisconnect = this.onDisconnectHandle;\n                        \n                        this.signalList[serverUrl] = {\n                                signal: signal,\n                                state: ENUM_SIGNAL_STATE.connecting,\n                                publishWaitingList: [],\n                                playWaitingList: [],\n                                publishConnectedList: [],\n                                playConnectedList: [],\n                                tokenInfo: null\n                        };\n                        \n                        this.updateWaitingList (this.signalList[serverUrl], isPublish, streamId, success, error);\n                        \n                        signal.connectServer (this.token, serverUrl, (result, server, tokenInfo) => {\n                                signalInfo = this.signalList[serverUrl];\n                                \n                                let i = 0;\n                                let publishCallback;\n                                let playCallback;\n                                if (result != 0) {\n                                        //connected failed, notify and delete\n                                        this.logger.debug (\"zsc.crss.0 connect failed \" + server);\n                                        \n                                        for (i = 0; i < signalInfo.publishWaitingList.length; i++) {\n                                                publishCallback = signalInfo.publishWaitingList[i];\n                                                if (publishCallback.error) {\n                                                        publishCallback.error (publishCallback.streamId, result);\n                                                }\n                                        }\n                                        \n                                        for (i = 0; i < signalInfo.playWaitingList.length; i++) {\n                                                playCallback = signalInfo.playWaitingList[i];\n                                                if (playCallback.error) {\n                                                        playCallback.error (playCallback.streamId, result);\n                                                }\n                                        }\n                                        \n                                        delete this.signalList[serverUrl];\n                                } else {\n                                        //connected success, notify and update state\n                                        this.logger.debug (\"zsc.crss.0 connected success \" + server);\n                                        \n                                        signalInfo.state = ENUM_SIGNAL_STATE.connected;\n                                        signalInfo.tokenInfo = tokenInfo;\n                                        \n                                        for (i = 0; i < signalInfo.publishWaitingList.length; i++) {\n                                                publishCallback = signalInfo.publishWaitingList[i];\n                                                if (publishCallback.success) {\n                                                        publishCallback.success (publishCallback.streamId, signalInfo);\n                                                }\n                                                \n                                                signalInfo.publishConnectedList.push (publishCallback.streamId);\n                                        }\n                                        \n                                        for (i = 0; i < signalInfo.playWaitingList.length; i++) {\n                                                playCallback = signalInfo.playWaitingList[i];\n                                                if (playCallback.success) {\n                                                        playCallback.success (playCallback.streamId, signalInfo);\n                                                }\n                                                \n                                                signalInfo.playConnectedList.push (playCallback.streamId);\n                                        }\n                                        \n                                        signalInfo.publishWaitingList = [];\n                                        signalInfo.playWaitingList = [];\n                                        \n                                        if (this.heartbeatTimer == null) this.startSignalHeartbeat ();\n                                }\n                        });\n                }\n        }\n        \n        /*\n         *    \"zsc.pss.1\": \"ZegoStreamCenter.setPlayStateStart\"\n         */\n        setPlayStateStart (streamid: string, remoteVideo: HTMLElement, audioOutput: string, playOption: PlayOption) {\n                let totalStreamId = this.getTotalStreamId (streamid);\n                let play = this.playerList[totalStreamId];\n                if (play) {\n                        this.logger.warn (\"zsc.pss.1 player already exist\");\n                        return false;\n                }\n                \n                let player = new ZegoPlayWeb (this.logger, null, this.dataReport, this.qualityTimerInterval);\n                player.onPlayStateUpdate = this.onPlayStateUpdate;\n                player.onPlayQualityUpdate = this.onPlayQualityUpdate;\n                player.onVideoSizeChanged = this.onVideoSizeChanged;\n                \n                this.playerList[totalStreamId] = {\n                        player: player,\n                        remoteVideo: remoteVideo,\n                        audioOutput: audioOutput,\n                        signal: null,\n                        serverUrls: [],\n                        retryCount: 0,\n                        playOption: playOption\n                };\n                \n                this.dataReport.eventStart (player.reportSeq, \"GetSignalUrl\");\n                \n                return true;\n        };\n        \n        /*\n         *    \"zsc.sps.1\": \"ZegoStreamCenter.startPlayingStream\"\n         */\n        startPlayingStream (streamid: string, serverUrls: string[], currentPlaySourceType?: number): boolean {\n                this.logger.debug (\"zsc.sps.1 start play called\");\n                let totalStreamId = this.getTotalStreamId (streamid);\n                let play = this.playerList[totalStreamId];\n                if (!play) {\n                        this.logger.error (\"zsc.sps.1 player don't exist\");\n                        return false;\n                }\n                \n                let player = play.player;\n                this.dataReport.eventEndWithMsg (player.reportSeq, \"GetSignalUrl\", {\n                        urls: serverUrls\n                });\n                \n                if (serverUrls.length == 0) {\n                        this.onPlayStateUpdate (ENUM_PLAY_STATE_UPDATE.error, streamid, playErrorList.DISPATCH_ERROR);\n                        \n                        this.logger.info (\"zsc.sps.1 server don't have signal url\");\n                        return false;\n                }\n                \n                play.serverUrls = [...play.serverUrls, ...serverUrls];\n                \n                return this.connectPlayServer (totalStreamId, serverUrls[0]);\n        };\n        \n        \n        /*\n         *    \"zsc.cps.1\": \"ZegoStreamCenter.connectPlayServer\"\n         */\n        private connectPlayServer (streamId: string, serverUrl: string): boolean {\n                let play = this.playerList[streamId];\n                if (!play) {\n                        this.logger.error (\"zsc.cps.1 player don't exist\");\n                        return false;\n                }\n                \n                this.dataReport.eventStart (play.player.reportSeq, \"ConnectServer\");\n                this.connetWithReuseSignalServer (streamId, false, serverUrl, (streamid: string, signalInfo: SignalInfo) => {\n                        //check streamid exist\n                        let checkPlay = this.playerList[streamid];\n                        if (!checkPlay) {\n                                this.logger.error (\"zsc.cps.1 after connect player don't exist\");\n                                return;\n                        }\n                        \n                        let checkPlayer = checkPlay.player;\n                        if (!checkPlayer) {\n                                this.logger.error (\"zsc.cps.1 checkplayer don't exist\");\n                                return;\n                        }\n                        \n                        this.dataReport.eventEndWithMsg (checkPlayer.reportSeq, \"ConnectServer\", {\n                                result: 0,\n                                server: serverUrl\n                        });\n                        \n                        let tokenInfo = signalInfo.tokenInfo;\n                        this.logger.info (\"zsc.cps.1 update token success\");\n                        \n                        if (tokenInfo && tokenInfo.report) {\n                                checkPlayer.qualityUpload = tokenInfo.report;\n                                checkPlayer.qualityUploadInterval = tokenInfo.report_interval;\n                        }\n                        \n                        checkPlayer.signal = signalInfo.signal;\n                        \n                        checkPlay.retryCount = 0;\n                        this.playStream (streamid);\n                        \n                        this.getTokenSuccess ();\n                }, (streamid, result) => {\n                        let checkPlay = this.playerList[streamid];\n                        if (!checkPlay) {\n                                this.logger.error (\"zsc.cps.1 after connect player don't exist\");\n                                return;\n                        }\n                        \n                        if (this.shouldRetry (checkPlay, result)) {\n                                this.logger.info (\"zsc.cps.1 retry connect\");\n                                \n                                let retryServerUrl = checkPlay.serverUrls[0];\n                                checkPlay.serverUrls.splice (0, 1);\n                                \n                                checkPlay.retryCount += 1;\n                                this.connectPlayServer (streamid, retryServerUrl);\n                        }\n                        else {\n                                this.onPlayStateUpdate (ENUM_PLAY_STATE_UPDATE.error, streamid, playErrorList.TOKEN_ERROR);\n                        }\n                        \n                });\n                \n                return true;\n        }\n        \n        \n        /*\n         *    \"zsc.ps.1\": \"ZegoStreamCenter.playStream\"\n         */\n        private playStream (streamid) {\n                const player: ZegoPlayWeb = this.playerList[streamid].player;\n                if (!player) {\n                        this.logger.warn (\"zsc.ps.1 player don't exist\");\n                        return;\n                }\n                \n                this.logger.debug (\"zsc.ps.1 call success\");\n                player.startPlay (streamid, this.playerList[streamid].remoteVideo, this.playerList[streamid].audioOutput, this.playerList[streamid].playOption);\n        }\n        \n        \n        /*\n         *    \"zsc.rsfs.0\": \"ZegoStreamCenter.removeStreamFromSignal\"\n         */\n        private removeStreamFromSignal (isPublish, streamId) {\n                \n                let deleteSignal = [];\n                for (let serverUrl in this.signalList) {\n                        let signalInfo = this.signalList[serverUrl];\n                        if (isPublish) {\n                                for (let i = 0; i < signalInfo.publishConnectedList.length; i++) {\n                                        if (signalInfo.publishConnectedList[i] === streamId) {\n                                                this.logger.debug (\"zsc.rsfs.0 found from publish\");\n                                                signalInfo.publishConnectedList.splice (i, 1);\n                                                break;\n                                        }\n                                }\n                        }\n                        else {\n                                for (let j = 0; j < signalInfo.playConnectedList.length; j++) {\n                                        if (signalInfo.playConnectedList[j] === streamId) {\n                                                this.logger.debug (\"zsc.rsfs.0 found from play\");\n                                                signalInfo.playConnectedList.splice (j, 1);\n                                                break;\n                                        }\n                                }\n                        }\n                        \n                        if (signalInfo.publishConnectedList.length == 0 && signalInfo.playConnectedList.length == 0) {\n                                signalInfo.signal.disconnectServer ();\n                                deleteSignal.push (serverUrl);\n                        }\n                }\n                \n                for (let k = 0; k < deleteSignal.length; k++) {\n                        delete this.signalList[deleteSignal[k]];\n                }\n        }\n        \n        \n        /*\n         *    \"zsc.ssh.1\": \"ZegoStreamCenter.stopSignalHeartbeat\"\n         */\n        private stopSignalHeartbeat () {\n                this.logger.debug (\"zsc.ssh.1 call\");\n                \n                let count = 0;\n                for (let url in this.signalList) {\n                        count += 1;\n                }\n                \n                if (this.heartbeatTimer && count == 0) {\n                        \n                        this.logger.info (\"zsc.ssh.1 stop\");\n                        \n                        clearTimeout (this.heartbeatTimer);\n                        \n                        this.heartbeatTimer = null;\n                }\n        }\n        \n        \n        /*\n         *    \"zsc.sps.1.1\": \"ZegoStreamCenter.stopPlayingStream\"\n         */\n        stopPlayingStream (streamid) {\n                let totalStreamId = this.getTotalStreamId (streamid);\n                let player = this.playerList[totalStreamId];\n                if (!player) {\n                        this.logger.info (\"zsc.sps.1.1 player don't exist\");\n                        return;\n                }\n                \n                if (player.player) {\n                        player.player.stopPlay ();\n                        delete player.player;\n                }\n                \n                //update signal\n                this.removeStreamFromSignal (false, totalStreamId);\n                this.stopSignalHeartbeat ();\n                \n                delete this.playerList[totalStreamId];\n                \n                this.logger.debug (\"zsc.sps.1.1 call success\");\n        };\n        \n        reset () {\n                \n                for (let publishStreamId in this.publisherList) {\n                        if (this.publisherList[publishStreamId].publisher) {\n                                this.publisherList[publishStreamId].publisher.stopPublish ();\n                        }\n                }\n                \n                for (let playStreamId in this.playerList) {\n                        if (this.playerList[playStreamId].player) {\n                                this.playerList[playStreamId].player.stopPlay ();\n                        }\n                }\n                \n                for (let serverUrl in this.signalList) {\n                        if (this.signalList[serverUrl].signal) {\n                                this.signalList[serverUrl].signal.disconnectServer ();\n                        }\n                }\n                \n                this.playerList = {};\n                this.publisherList = {};\n                this.signalList = {};\n                \n                if (this.heartbeatTimer) {\n                        clearTimeout (this.heartbeatTimer);\n                        this.heartbeatTimer = null;\n                }\n        };\n        \n        checkMessageTimeout = () => {\n                for (let serverUrl in this.signalList) {\n                        if (this.signalList[serverUrl].signal) {\n                                this.signalList[serverUrl].signal.checkMessageTimeout ();\n                        }\n                }\n        };\n        \n        getAllInUseUrl = () => {\n                let serverUrls = [];\n                \n                for (let serverUrl in this.signalList) {\n                        serverUrls.push (serverUrl);\n                }\n                \n                return serverUrls;\n        };\n        \n        /*\n         *    \"zsc.od.0\": \"ZegoStreamCenter.onDisconnectHandle\"\n         */\n        onDisconnectHandle = (server) => {\n                this.logger.info (\"zsc.od.0 call\");\n                \n                if (this.signalList[server]) {\n                        let signalInfo = this.signalList[server];\n                        \n                        for (let i = 0; i < signalInfo.publishConnectedList.length; i++) {\n                                let publish = this.publisherList[signalInfo.publishConnectedList[i]];\n                                if (publish && publish.publisher) {\n                                        publish.publisher.onDisconnect ();\n                                }\n                        }\n                        \n                        for (let i = 0; i < signalInfo.playConnectedList.length; i++) {\n                                let play = this.playerList[signalInfo.playConnectedList[i]];\n                                if (play && play.player) {\n                                        play.player.onDisconnect ();\n                                }\n                        }\n                        \n                        delete this.signalList[server];\n                        \n                        this.stopSignalHeartbeat ();\n                }\n        };\n        \n        \n        startSignalHeartbeat () {\n                this.logger.debug (\"zsc.ssh.0 call\");\n                \n                if (this.heartbeatTimer) {\n                        clearTimeout (this.heartbeatTimer);\n                        this.heartbeatTimer = null;\n                }\n                \n                this.heartbeatTimer = setTimeout (() => {\n                        this.checkSignalHeartbeat ();\n                }, this.heartbeatInterval);\n        }\n        \n        checkSignalHeartbeat () {\n                this.logger.debug (\"zsc.csh.0 call\");\n                \n                for (let streamUrl in this.signalList) {\n                        if (this.signalList[streamUrl].signal) {\n                                this.signalList[streamUrl].signal.sendHeartbeat ();\n                        }\n                }\n                \n                if (this.heartbeatTimer) this.startSignalHeartbeat ();\n        }\n        \n        checkPreivew (localVideo: HTMLElement) {\n                for (let i = 0; i < this.previewVideoList.length; i++) {\n                        if (this.previewVideoList[i].localVideo === localVideo) {\n                                return this.previewVideoList[i];\n                        }\n                }\n                \n                return null;\n        }\n        \n        removePreview (preview: ZegoPreview) {\n                for (let i = 0; i < this.previewVideoList.length; i++) {\n                        if (this.previewVideoList[i] === preview) {\n                                this.previewVideoList.splice (i, 1);\n                                break;\n                        }\n                }\n        }\n        \n        onPlayerStreamUrlUpdate (streamid: string, url: string, type: string) {\n        \n        }\n        \n        onVideoSizeChanged (streamId: string, videoWidth: number, videoHeight: number) {\n        \n        }\n        \n}\n","import {ENUM_REMOTE_TYPE, ENUM_LOG_LEVEL} from \"./zego.entity\";\nimport {ZegoWebSocket} from \"../wechatMini/zego.webSocket\";\n\nexport const D = ['00', '01', '02', '03', '04', '05', '06', '07', '08', '09'];\n\nexport abstract class Logger {\n        \n        appid: number;\n        roomid: string;\n        sessionid: string;\n        userid: string;\n        userName: string;\n        version: string;\n        logType: ENUM_REMOTE_TYPE;\n        logLevel: ENUM_LOG_LEVEL;\n        logRemoteLevel: ENUM_LOG_LEVEL;\n        \n        websocket: WebSocket | ZegoWebSocket;\n        url: string;\n        logUploadTimer = null;\n        logUploadInterval = 1000 * 10;\n        \n        timeInterval: number;\n        \n        logCache = [];\n        logCacheSend = [];\n        logCacheMax = 100;\n        \n        abstract openWebSocketLogServer (url: string);\n        \n        abstract SendHttpsLog ();\n        \n        constructor () {\n        }\n        \n        \n        setLogLevel (logLevel: ENUM_LOG_LEVEL) {\n                if (this.logLevel < ENUM_LOG_LEVEL.debug || this.logLevel > ENUM_LOG_LEVEL.report) {\n                        this.logLevel = ENUM_LOG_LEVEL.disable;\n                } else {\n                        this.logLevel = logLevel;\n                }\n        }\n        \n        setRemoteLogLevel (logLevel: ENUM_LOG_LEVEL) {\n                if (this.logRemoteLevel < ENUM_LOG_LEVEL.debug || this.logRemoteLevel > ENUM_LOG_LEVEL.report) {\n                        this.logRemoteLevel = ENUM_LOG_LEVEL.disable;\n                } else {\n                        this.logRemoteLevel = logLevel;\n                }\n        }\n        \n        \n        setSessionInfo (appid: number, roomid: string, sessionid: string, userid: string, userName: string, version: string) {\n                this.appid = appid;\n                this.roomid = roomid;\n                this.sessionid = sessionid;\n                this.userid = userid;\n                this.userName = userName;\n                this.version = version;\n        };\n        \n        openLogServer (url: string) {\n                if (url.startsWith (\"wss:\")) {\n                        this.logType = ENUM_REMOTE_TYPE.websocket;\n                        this.openWebSocketLogServer (url);\n                } else if (url.startsWith (\"https:\")) {\n                        this.logType = ENUM_REMOTE_TYPE.https;\n                        this.openHttpsLogServer (url);\n                } else {\n                        this.logType = ENUM_REMOTE_TYPE.disable;\n                }\n        }\n        \n        stopLogServer () {\n                if (this.logType == ENUM_REMOTE_TYPE.websocket) {\n                        this.stopWebSocketServer ();\n                }\n                else if (this.logType == ENUM_REMOTE_TYPE.https) {\n                        //send last data\n                        this.SendHttpsLog ();\n                        this.stopHttpsServer ();\n                }\n                \n                this.logType = ENUM_REMOTE_TYPE.disable;\n        };\n        \n        \n        stopWebSocketServer () {\n                if (this.websocket) {\n                        this.websocket.onclose = null;\n                        this.websocket.onerror = null;\n                        this.websocket.close ();\n                        this.websocket = null;\n                }\n        }\n        \n        openHttpsLogServer (url: string) {\n                this.url = url;\n                if (!url) {\n                        return;\n                }\n                \n                this.stopHttpsServer ();\n                \n                //start timer\n                if (!this.logUploadTimer) {\n                        this.logUploadTimer = setInterval (() => {\n                                this.SendHttpsLog ();\n                        }, this.logUploadInterval);\n                }\n                \n        }\n        \n        stopHttpsServer () {\n                //stop timer\n                if (this.logUploadTimer) {\n                        clearInterval (this.logUploadTimer);\n                        this.logUploadTimer = null;\n                }\n        }\n        \n        \n        report (dataItem: any) {\n                const log = this.logReportParamList (ENUM_LOG_LEVEL.report, dataItem);\n                if (this.logLevel !== ENUM_LOG_LEVEL.disable && this.logLevel <= ENUM_LOG_LEVEL.report) {\n                        console.debug.apply (console, log);\n                }\n                \n                \n                //report 立即上报\n                this.RemoteLog (ENUM_LOG_LEVEL.report, log, true);\n        }\n        \n        debug (...values) {\n                let log = this.logParamList (ENUM_LOG_LEVEL.debug, values.join (''));\n                if (this.logLevel !== ENUM_LOG_LEVEL.disable && this.logLevel <= ENUM_LOG_LEVEL.debug) {\n                        console.debug.apply (console, log);\n                }\n                \n                this.log (ENUM_LOG_LEVEL.debug, log);\n        }\n        \n        info (...values) {\n                let log = this.logParamList (ENUM_LOG_LEVEL.info, values.join (''));\n                if (this.logLevel !== ENUM_LOG_LEVEL.disable && this.logLevel <= ENUM_LOG_LEVEL.info) {\n                        console.info.apply (console, log);\n                }\n                \n                this.log (ENUM_LOG_LEVEL.info, log);\n        }\n        \n        warn (...values) {\n                let log = this.logParamList (ENUM_LOG_LEVEL.warn, values.join (''));\n                if (this.logLevel !== ENUM_LOG_LEVEL.disable && this.logLevel <= ENUM_LOG_LEVEL.warn) {\n                        console.warn.apply (console, log);\n                }\n                \n                this.log (ENUM_LOG_LEVEL.warn, log);\n        }\n        \n        error (...values) {\n                let log = this.logParamList (ENUM_LOG_LEVEL.error, values.join (''));\n                if (this.logLevel !== ENUM_LOG_LEVEL.disable && this.logLevel <= ENUM_LOG_LEVEL.error) {\n                        console.error.apply (console, log);\n                }\n                \n                this.log (ENUM_LOG_LEVEL.error, log);\n        }\n        \n        log (level: ENUM_LOG_LEVEL, log: any) {\n                \n                if (this.logLevel !== ENUM_LOG_LEVEL.disable && this.logLevel <= level) {\n                        this.logCache.push (log);\n                        while (this.logCache.length > this.logCacheMax) {\n                                this.logCache.shift ();\n                        }\n                }\n                \n                if (this.logRemoteLevel !== ENUM_LOG_LEVEL.disable && this.logRemoteLevel <= level) {\n                        this.RemoteLog (level, log);\n                }\n        };\n        \n        RemoteLog (level: ENUM_LOG_LEVEL, log: any, force = false) {\n                \n                if (this.url == \"\") {\n                        return;\n                }\n                \n                if (this.logType == ENUM_REMOTE_TYPE.websocket) {\n                        this.RemoteWebSocketLog (level, log);\n                }\n                else if (this.logType == ENUM_REMOTE_TYPE.https) {\n                        this.RemoteHttpsLog (level, log, force);\n                }\n        };\n        \n        RemoteWebSocketLog (level: ENUM_LOG_LEVEL, log: any) {\n                if (this.websocket == null || this.websocket.readyState == 2 || this.websocket.readyState == 3) {\n                        let url = this.url;\n                        this.url = \"\";\n                        this.openLogServer (url);\n                        if (this.logCacheSend.length < this.logCacheMax) {\n                                this.logCacheSend.push (log);\n                        }\n                }\n                else if (this.websocket.readyState == 0) {\n                        if (this.logCacheSend.length < this.logCacheMax) {\n                                this.logCacheSend.push (log);\n                        }\n                }\n                else if (this.websocket.readyState == 1) {\n                        if (this.logCacheSend.length > 0) {\n                                let logBefore = \"\";\n                                for (let i = 0; i < this.logCacheSend.length; i++) {\n                                        logBefore = logBefore + this.logCacheSend[i] + \"\\n\";\n                                }\n                                log = logBefore + log;\n                                this.logCacheSend = [];\n                        }\n                        this.websocket.send(log);\n                }\n                else {\n                        console.warn (\"wrong socket state:\" + this.websocket.readyState);\n                        if (this.logCacheSend.length < this.logCacheMax) {\n                                this.logCacheSend.push (log);\n                        }\n                }\n        }\n        \n        RemoteHttpsLog (level: ENUM_LOG_LEVEL, log: any, force: boolean) {\n                this.logCacheSend.push (log);\n                if (this.logCacheSend.length >= this.logCacheMax || force === true) {\n                        this.SendHttpsLog ();\n                }\n        }\n        \n        logParamList (level: ENUM_LOG_LEVEL, logInfo: string) {\n                \n                let t = new Date ();\n                let stringTime = (t.getFullYear ()) + \"/\";\n                stringTime += (D[t.getMonth () + 1] || t.getMonth () + 1) + \"/\";\n                stringTime += (D[t.getDate ()] || t.getDate ()) + \" \";\n                stringTime += (D[t.getHours ()] || t.getHours ()) + \":\";\n                stringTime += (D[t.getMinutes ()] || t.getMinutes ()) + \":\";\n                stringTime += (D[t.getSeconds ()] || t.getSeconds ());\n                stringTime += \".\" + t.getTime () % 1000;\n                \n                //get first space from logInfo\n                let action = logInfo.substr (0, logInfo.indexOf (' '));\n                if (action.length == 0) {\n                        action = logInfo;\n                }\n                \n                let content = logInfo.substr (logInfo.indexOf (' ') + 1);\n                if (content.length == 0) {\n                        content = \"\";\n                }\n                \n                let s = {\n                        \"time\": stringTime,\n                        \"level\": level,\n                        \"action\": action,\n                        \"content\": content,\n                        \"appid\": this.appid,\n                        \"roomid\": this.roomid,\n                        \"userid\": this.userid,\n                        \"userName\": this.userName,\n                        \"sessionid\": this.sessionid\n                };\n                \n                return [JSON.stringify (s)];\n        }\n        \n        abstract logReportParamList (level: ENUM_LOG_LEVEL, logInfo: string);\n}\n\n\n\n","import {D, Logger} from \"../common/zego.logger\";\nimport {ENUM_LOG_LEVEL} from \"../common/zego.entity\";\n\nexport class LoggerWeb extends Logger {\n        \n        openWebSocketLogServer (url: string) {\n                if (this.url != url) {\n                        this.url = url;\n                        this.stopWebSocketServer ();\n                        if (!url) return;\n                        \n                        this.websocket = new WebSocket (url);\n                        \n                        \n                        this.websocket.onopen = function (evt) {\n                        \n                        };\n                        this.websocket.onclose = function (evt) {\n                        \n                        };\n                        this.websocket.onmessage = function (evt) {\n                        \n                        };\n                        this.websocket.onerror = function (err) {\n                                console.error (`open log websocket error:${err}`);\n                        };\n                }\n                \n        }\n        \n        SendHttpsLog () {\n                if (this.logCacheSend.length == 0) {\n                        return;\n                }\n                let uploadData = this.logCacheSend.join (\"\\n\");\n                \n                //console.log(\"url \" + this.url);\n                //console.log(uploadData);\n                let xmlhttp = new XMLHttpRequest ();\n                xmlhttp.onreadystatechange = () => {\n                        if (xmlhttp.readyState == 4) {\n                                if (xmlhttp.status == 200) {\n                                        if (xmlhttp.responseText.length == 0) {\n                                                return;\n                                        }\n                                        \n                                        try {\n                                                let json = JSON.parse (xmlhttp.responseText);\n                                                let interval = json.interval;\n                                                if (typeof interval === \"number\" && this.logUploadInterval !== interval) {\n                                                        this.timeInterval = interval;\n                                                        this.openHttpsLogServer (this.url);\n                                                }\n                                        }\n                                        catch (e) {\n                                                console.log (\"send result failed \" + e);\n                                        }\n                                        \n                                }\n                                else {\n                                        console.log (\"send failed \" + xmlhttp.status);\n                                }\n                        }\n                };\n                \n                xmlhttp.open (\"POST\", this.url, true);\n                xmlhttp.send (uploadData);\n                \n                \n                this.logCacheSend = [];\n        }\n        \n        logReportParamList (level: ENUM_LOG_LEVEL, logInfo: string) {\n                \n                const t = new Date ();\n                let stringTime = t.getFullYear () + \"/\";\n                stringTime += (D[t.getMonth () + 1] || t.getMonth () + 1) + \"/\";\n                stringTime += (D[t.getDate ()] || t.getDate ()) + \" \";\n                stringTime += (D[t.getHours ()] || t.getHours ()) + \":\";\n                stringTime += (D[t.getMinutes ()] || t.getMinutes ()) + \":\";\n                stringTime += (D[t.getSeconds ()] || t.getSeconds ());\n                stringTime += \".\" + t.getTime () % 1000;\n                \n                logInfo[\"time\"] = stringTime;\n                logInfo[\"level\"] = level;\n                \n                \n                logInfo[\"console\"] = \"rtc\";\n                \n                \n                logInfo[\"appid\"] = this.appid;\n                logInfo[\"roomid\"] = this.roomid;\n                logInfo[\"userid\"] = this.userid;\n                logInfo[\"id_name\"] = this.userid;\n                logInfo[\"userName\"] = this.userName;\n                logInfo[\"sessionid\"] = this.sessionid;\n                logInfo[\"version\"] = this.version;\n                \n                return [JSON.stringify (logInfo)];\n        }\n}","import {\n        DeviceInfo,\n        ENUM_PLAY_STATE_UPDATE,\n        ENUM_PUBLISH_STATE_UPDATE, ENUM_PUBLISH_STREAM_STATE,\n        ENUM_STREAM_SUB_CMD,\n        MediaStreamConstraints, PlayOption,\n        sdkErrorList\n} from \"../common/zego.entity\";\nimport {playErrorList, publishErrorList} from \"../common/zego.extern\";\nimport {LoggerWeb} from \"./zego.logger.webrtc\";\nimport {ZegoStreamCenterWeb} from \"./zego.streamCenter.web\";\nimport {ClientUtil} from \"../common/client-util\";\nimport {BaseCenter} from \"../common/clientBase/index\";\n\nexport  class ZegoClient extends BaseCenter {\n        \n        streamCenter:ZegoStreamCenterWeb;\n        \n        constructor () {\n                const log = new LoggerWeb();\n                const streamCenter = new ZegoStreamCenterWeb(log);\n                super (log,streamCenter);\n                \n                window.addEventListener ('message', event => {\n                        const {data: {type, streamId, canRequestAudioTrack}, origin} = event;\n                        if (type === 'SS_DIALOG_SUCCESS') { //user chose a stream\n                                this.screenStreamFrom (streamId, canRequestAudioTrack, ClientUtil.actionSuccessCallback ('screenShare', this.stateCenter.callbackList));\n                        }\n                });\n        }\n        \n        static screenShotReady: boolean = false;\n        \n        getSocket (server: string) {\n                return new WebSocket (server);\n        }\n        \n       \n        enableCamera (localVideo: HTMLElement, enable: boolean) {\n                this.logger.debug (\"zc.p.ec.0 call\");\n                \n                if (typeof enable !== \"boolean\") {\n                        this.logger.error (\"zc.p.ec.0 argument is not bool\");\n                        return false;\n                }\n                \n                return this.streamCenter.enableCamera (localVideo, enable);\n        }\n        \n        enableMicrophone (localVideo: HTMLElement, enable: boolean) {\n                this.logger.debug (\"zc.p.em.0 call\");\n                \n                if (typeof enable !== \"boolean\") {\n                        this.logger.error (\"zc.p.em.0 argument is not bool\");\n                        return false;\n                }\n                \n                return this.streamCenter.enableMicrophone (localVideo, enable);\n        }\n        \n        setLocalAudioOutput (localVideo: HTMLElement, audioOutput: string): boolean {\n                this.logger.debug (\"zc.p.psao.1 call\");\n                \n                return this.streamCenter.setPublishStreamAudioOutput (localVideo, audioOutput);\n        }\n        \n        setPlayAudioOutput (streamid: string, audioOutput: string): boolean {\n                this.logger.debug (\"zc.p.psao.1 call\");\n                \n                return this.streamCenter.setPlayStreamAudioOutput (streamid, audioOutput);\n        }\n        \n        setCustomSignalUrl (signalUrl: string) {\n                this.logger.debug (\"zc.p.scs.0 call: \" + signalUrl);\n                \n                if (!signalUrl || signalUrl.length == 0) {\n                        this.logger.error (\"zc.p.scs.0 param error\");\n                        return false;\n                }\n                \n                if (signalUrl.indexOf (\"wss://\") != 0) {\n                        this.logger.error (\"zc.p.scs.0 url is not correct\");\n                        return false;\n                }\n                \n                this.stateCenter.customUrl = signalUrl;\n        };\n        \n        setQualityMonitorCycle (timeInMs: number) {\n                if (typeof timeInMs === \"number\" && timeInMs >= 1000) {\n                        this.streamCenter.setQualityMonitorCycle (timeInMs);\n                }\n        }\n        \n        /*\n        *    \"zc.p.sps.0\": \"ZegoClient.startPlayingStream\",  // 播放流\n        */\n        startPlayingStream (streamid: string, remoteVideo: HTMLElement, audioOutput?: string,playOption?:PlayOption): boolean {\n                this.logger.debug (\"zc.p.sps.0 call\");\n                \n                if (!streamid || streamid === \"\") {\n                        this.logger.error (\"zc.p.sps.0 param error\");\n                        return false;\n                }\n                \n                if (!remoteVideo) {\n                        this.logger.error (\"zc.p.sps.0 don't have remoteVideo\");\n                        return false;\n                }\n                \n                if (this.stateCenter.customUrl) {\n                        if (!this.streamCenter.setPlayStateStart (streamid, remoteVideo, audioOutput,playOption)) {\n                                this.logger.error (\"zc.p.sps.0 cannot start play\");\n                                return false;\n                        }\n                        \n                        return this.streamCenter.startPlayingStream (streamid, [this.stateCenter.customUrl]);\n                }\n                \n                \n                if (!this.stateCenter.isLogin ()) {\n                        this.logger.error (\"zc.p.sps.0 not login\");\n                        return false;\n                }\n                \n                let found = false;\n                for (let i = 0; i < this.stateCenter.streamList.length; i++) {\n                        if (this.stateCenter.streamList[i].stream_id === streamid) {\n                                // 根据传入的流id判断当前的流列表中是否存在该流\n                                found = true;\n                                break;\n                        }\n                }\n                \n                if (found == false) {\n                        this.logger.info (\"zc.p.sps.0 cannot find stream\");\n                        // return false;\n                }\n                \n                if (!this.streamCenter.setPlayStateStart (streamid, remoteVideo, audioOutput,playOption)) {\n                        this.logger.info (\"zc.p.sps.0 cannot start play\");\n                        return false;\n                }\n                \n                //send request\n                let body = {\n                        stream_id: streamid,\n                        ptype: \"pull\",\n                        signals: this.streamCenter.getAllInUseUrl ()\n                };\n                \n                this.socketCenter.registerRouter ('webrtc_url', msg => {\n                        this.handleFetchWebRtcUrlRsp (msg)\n                });\n                this.socketCenter.sendMessage (\"webrtc_url\", body, undefined, (err, seq) => {\n                        if (err == sdkErrorList.SEND_MSG_TIMEOUT) {\n                                this.onPlayStateUpdate (ENUM_PLAY_STATE_UPDATE.error, streamid, playErrorList.DISPATCH_TIMEOUT);\n                        }\n                        else {\n                                this.onPlayStateUpdate (ENUM_PLAY_STATE_UPDATE.error, streamid, playErrorList.DISPATCH_ERROR);\n                        }\n                        \n                        this.streamCenter.stopPlayingStream (streamid);\n                });\n                \n                return true;\n        };\n        \n        \n        /*\n        *    \"zc.p.sps.0.1\": \"ZegoClient.stopPlayingStream\",停止拉流\n        */\n        stopPlayingStream (streamid: string) {\n                \n                this.logger.debug (\"zc.p.sps.1.0 call\");\n                \n                if (!streamid || streamid === \"\") {\n                        this.logger.info (\"zc.p.sps.1.0 param error\");\n                        return false;\n                }\n                \n                this.streamCenter.stopPlayingStream (streamid);\n                \n                for (let seq in this.stateCenter.streamUrlMap) {\n                        if (this.stateCenter.streamUrlMap[seq] === streamid) {\n                                delete this.stateCenter.streamUrlMap[seq];\n                                break;\n                        }\n                }\n                \n                this.logger.debug (\"zc.p.sps.1.0 call success\");\n                return true;\n        };\n        \n        \n        /*\n         *    \"zc.p.sp.0\": \"ZegoClient.startPreview\", 开始预览\n         */\n        startPreview (localVideo: HTMLElement, mediaStreamConstraints: MediaStreamConstraints, success: Function, error: Function): boolean {\n                this.logger.debug (\"zc.p.sp.0 call\");\n                \n                if (!localVideo) {\n                        this.logger.error (\"zc.p.sp.0 no localVideo\");\n                        return false;\n                }\n                \n                return this.streamCenter.startPreview (localVideo, mediaStreamConstraints, success, error);\n        };\n        \n        /*\n        *    \"zc.p.sp.1\": \"ZegoClient.stopPreview\",结束预览\n        */\n        stopPreview (localVideo: HTMLElement): boolean {\n                \n                this.logger.debug (\"zc.p.sp.1 call\");\n                \n                if (!localVideo) {\n                        this.logger.info (\"zc.p.sp.1 param error\");\n                        return false;\n                }\n                \n                return this.streamCenter.stopPreview (localVideo);\n        };\n        \n        \n        /*\n        *    \"zc.p.sps.1\": \"ZegoClient.startPublishingStream\",开始推流\n        */\n        startPublishingStream (streamid: string, localVideo: HTMLElement, extraInfo?: any) {\n                \n                this.logger.debug (\"zc.p.sps.1 call\");\n                \n                if (!streamid) {\n                        this.logger.error (\"zc.p.sps.1 param error\");\n                        return false;\n                }\n                \n                if (this.stateCenter.customUrl && this.stateCenter.customUrl.length != 0) {\n                        this.stateCenter.publishStreamList[streamid] = {\n                                state: ENUM_PUBLISH_STREAM_STATE.tryPublish,\n                                extra_info: extraInfo\n                        };\n                        \n                        if (!this.streamCenter.setPublishStateStart (streamid, localVideo)) {\n                                this.logger.info (\"zc.p.sps.1 cannot start publish\");\n                                return false;\n                        }\n                        \n                        return this.streamCenter.startPublishingStream (streamid, [this.stateCenter.customUrl]);\n                }\n                \n                if (!this.stateCenter.isLogin ()) {\n                        this.logger.error (\"zc.p.sps.1 not login\");\n                        return false;\n                }\n                \n                this.stateCenter.publishStreamList[streamid] = {\n                        state: ENUM_PUBLISH_STREAM_STATE.tryPublish,\n                        extra_info: extraInfo\n                };\n                \n                if (!this.streamCenter.setPublishStateStart (streamid, localVideo)) {\n                        this.logger.error (\"zc.p.sps.1 cannot start publish\");\n                        return false;\n                }\n                \n                this.logger.info (\"zc.p.sps.1 start publish\");\n                \n                const body = {\n                        stream_id: streamid,\n                        ptype: \"push\",\n                        signals: this.streamCenter.getAllInUseUrl ()\n                };\n                \n                this.socketCenter.registerRouter ('webrtc_url', msg => {\n                        this.handleFetchWebRtcUrlRsp (msg)\n                });\n                this.socketCenter.sendMessage (\"webrtc_url\", body, undefined, (err, seq) => {\n                        if (err == sdkErrorList.SEND_MSG_TIMEOUT) {\n                                this.onPublishStateUpdate (ENUM_PUBLISH_STATE_UPDATE.error, streamid, publishErrorList.DISPATCH_TIMEOUT);\n                        } else {\n                                this.onPublishStateUpdate (ENUM_PUBLISH_STATE_UPDATE.error, streamid, publishErrorList.DISPATCH_ERROR);\n                        }\n                        \n                        this.streamCenter.stopPublishingStream (streamid);\n                });\n                \n                return true;\n        };\n        \n        \n        //结束推流\n        stopPublishingStream (streamid: string): boolean {\n                \n                this.logger.debug (\"zc.p.sps.1.1 call\");\n                \n                if (!streamid) {\n                        this.logger.info (\"zc.p.sps.1.1 param error\");\n                        return false;\n                }\n                \n                this.streamCenter.stopPublishingStream (streamid);\n                \n                if (this.stateCenter.publishStreamList[streamid]) {\n                        if (this.stateCenter.publishStreamList[streamid].state >= ENUM_PUBLISH_STREAM_STATE.update_info) {\n                                this.streamHandler.updateStreamInfo (streamid, ENUM_STREAM_SUB_CMD.liveEnd);\n                        }\n                        delete this.stateCenter.publishStreamList[streamid];\n                }\n                \n                return true;\n        };\n        \n        startScreenShotChrome (callBack: (suc: boolean, stream: MediaStream) => void) {\n                \n                if (!ZegoClient.screenShotReady) {\n                        this.logger.error (`zc.b.ss Please install the extension:1. Go to chrome://extensions  2. Check: \"Enable Developer mode   3. Click: \"Load the unpacked extension... 4. Choose \"extension\" folder from the repository 5. Reload this page\n                                      `);\n                        return false;\n                } else {\n                        window.postMessage ({type: 'SS_UI_REQUEST', text: 'start'}, '*');\n                        // listen for messages from the content-script\n                        ClientUtil.registerCallback ('screenShare',\n                                    {success: callBack}, this.stateCenter.callbackList);\n                        \n                        \n                }\n        }\n        \n        startScreenShotFirFox (mediaSource: 'screen' | 'application' | 'window', audio, callBack: (suc: boolean, stream: MediaStream) => void) {\n                const config = {\n                        video: {},\n                        audio: audio\n                };\n                config.video['mediaSource'] = mediaSource;\n                \n                navigator.mediaDevices\n                .getUserMedia (config)\n                .then (stream => {\n                        this.stateCenter.screenShotStream = stream;\n                        callBack (true, stream);\n                }).catch (err => {\n                        this.logger.error ('zc.b.ssf ' + err);\n                        callBack (false, null);\n                });\n                \n        }\n        \n        stopScreenShot () {\n                this.stateCenter.screenShotStream.getTracks ().forEach (track => {\n                        track.stop ();\n                });\n                window.postMessage ({type: 'SS_UI_CANCEL', text: 'start'}, '*');\n        }\n        \n        // web独有\n        WebrtcOnPublishStateUpdateHandle (type: 0 | 1 | 2, streamid: string, error: { code: string, msg: string }) {\n                if (this.stateCenter.publishStreamList[streamid].state == ENUM_PUBLISH_STREAM_STATE.publishing) {\n                        this.onPublishStateUpdate (type, streamid, error);\n                }\n        };\n        \n        // web独有\n        setCDNInfo (streamInfo: { urls_flv: string, urls_hls: string, urls_rtmp: string },\n                    streamItem: { urls_flv: string, urls_m3u8: string, urls_rtmp: string }) {\n                streamInfo.urls_flv = streamItem.urls_flv;\n                streamInfo.urls_hls = streamItem.urls_m3u8;\n                streamInfo.urls_rtmp = streamItem.urls_rtmp;\n        };\n        \n        screenStreamFrom (streamId: string,canRequestAudioTrack:boolean,callBack:Function) {\n                \n                \n                const config = {};\n                config['audio'] = {\n                        mandatory: {\n                                chromeMediaSource: 'desktop',\n                                chromeMediaSourceId: streamId\n                        }\n                };\n                config['video'] = {\n                        mandatory : {\n                                chromeMediaSource: 'desktop',\n                                chromeMediaSourceId: streamId,\n                                maxWidth: window.screen.width,\n                                maxHeight: window.screen.height\n                        }\n                };\n                \n                !canRequestAudioTrack && (config['audio'] = false);\n                navigator.mediaDevices\n                .getUserMedia (config)\n                .then (stream => {\n                        this.stateCenter.screenShotStream = stream;\n                        callBack(true,stream);\n                }).catch (err => {\n                        this.logger.error ('zc.b.ssf ' + err);\n                        callBack(false,null);\n                });\n        }\n        \n        static  isSupportWebrtc(){\n                return ClientUtil.isSupportWebrtc();\n        }\n        \n        static  isSupportH264(sucCall,errCall){\n                  ClientUtil.isSupportH264(sucCall,errCall);\n        }\n        \n        \n        \n        enumDevices(deviceInfoCallback, error){\n                ZegoClient.enumDevices(deviceInfoCallback, error);\n        }\n        \n        static enumDevices (deviceInfoCallback, error) {\n                if (navigator.mediaDevices === undefined || navigator.mediaDevices.enumerateDevices === undefined) {\n                        if (error) {\n                                error (\"browser don't support enumerate devices\");\n                        }\n                        return;\n                }\n                \n                navigator.mediaDevices.enumerateDevices ().then (deviceInfos => {\n                        let microphone = [];\n                        let speaker = [];\n                        let camera = [];\n                        \n                        for (let i = 0; i < deviceInfos.length; i++) {\n                                let deviceInfo = deviceInfos[i];\n                                if (deviceInfo.kind === 'audioinput') {\n                                        microphone.push ({\n                                                label: deviceInfo.label,\n                                                deviceId: deviceInfo.deviceId\n                                        });\n                                }\n                                if (deviceInfo.kind === 'audiooutput') {\n                                        speaker.push ({\n                                                label: deviceInfo.label,\n                                                deviceId: deviceInfo.deviceId\n                                        });\n                                }\n                                if (deviceInfo.kind === 'videoinput') {\n                                        camera.push ({\n                                                label: deviceInfo.label,\n                                                deviceId: deviceInfo.deviceId\n                                        });\n                                }\n                        }\n                        \n                        if (deviceInfoCallback) {\n                                deviceInfoCallback ({\n                                        microphones: microphone,\n                                        speakers: speaker,\n                                        cameras: camera\n                                });\n                        }\n                        \n                }).catch (err => {\n                        if (error) {\n                                error (err);\n                        }\n                });\n        };\n        \n        \n}\n\n// listen for messages from the content-script\nwindow.addEventListener ('message', event => {\n        const {data: {type, streamId}, origin} = event;\n        \n        // NOTE: you should discard foreign events\n        if (origin !== window.location.origin) {\n                console.warn (\n                            'ScreenStream: you should discard foreign event from origin:',\n                            origin\n                );\n                // return;\n        }\n        \n        // content-script will send a 'SS_PING' msg if extension is installed\n        if (type === 'SS_PING') {\n                ZegoClient.screenShotReady = true;\n        }\n        \n        \n});\n"],"sourceRoot":""}